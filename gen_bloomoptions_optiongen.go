// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package redisson

// BloomOptions should use newBloomOptions to initialize it
type BloomOptions struct {
	// annotation@KeyPrefix(If enabled, Exists and ExistsMulti methods will be available as read-only operations. NOTE: If enabled, minimum redis version should be 7.0.0.)
	EnableReadOperation bool
}

// newBloomOptions new BloomOptions
func newBloomOptions(opts ...BloomOption) *BloomOptions {
	cc := newDefaultBloomOptions()
	for _, opt := range opts {
		opt(cc)
	}
	if watchDogBloomOptions != nil {
		watchDogBloomOptions(cc)
	}
	return cc
}

// ApplyOption apply multiple new option and return the old ones
// sample:
// old := cc.ApplyOption(WithTimeout(time.Second))
// defer cc.ApplyOption(old...)
func (cc *BloomOptions) ApplyOption(opts ...BloomOption) []BloomOption {
	var previous []BloomOption
	for _, opt := range opts {
		previous = append(previous, opt(cc))
	}
	return previous
}

// BloomOption option func
type BloomOption func(cc *BloomOptions) BloomOption

// WithEnableReadOperation option func for filed EnableReadOperation
func WithEnableReadOperation(v bool) BloomOption {
	return func(cc *BloomOptions) BloomOption {
		previous := cc.EnableReadOperation
		cc.EnableReadOperation = v
		return WithEnableReadOperation(previous)
	}
}

// InstallBloomOptionsWatchDog the installed func will called when newBloomOptions  called
func InstallBloomOptionsWatchDog(dog func(cc *BloomOptions)) { watchDogBloomOptions = dog }

// watchDogBloomOptions global watch dog
var watchDogBloomOptions func(cc *BloomOptions)

// setBloomOptionsDefaultValue default BloomOptions value
func setBloomOptionsDefaultValue(cc *BloomOptions) {
	for _, opt := range [...]BloomOption{
		WithEnableReadOperation(false),
	} {
		opt(cc)
	}
}

// newDefaultBloomOptions new default BloomOptions
func newDefaultBloomOptions() *BloomOptions {
	cc := &BloomOptions{}
	setBloomOptionsDefaultValue(cc)
	return cc
}

// all getter func
func (cc *BloomOptions) GetEnableReadOperation() bool { return cc.EnableReadOperation }

// BloomOptionsVisitor visitor interface for BloomOptions
type BloomOptionsVisitor interface {
	GetEnableReadOperation() bool
}

// BloomOptionsInterface visitor + ApplyOption interface for BloomOptions
type BloomOptionsInterface interface {
	BloomOptionsVisitor
	ApplyOption(...BloomOption) []BloomOption
}
