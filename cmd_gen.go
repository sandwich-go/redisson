// Code generated by tools. DO NOT EDIT.
package redisson

import "time"

const (
	commandSetBitWarning                     = "When setting the last possible bit (offset equal to 2^32 -1) and the string value stored at key does not yet hold a string value, or holds a small string value, Redis needs to allocate all intermediate memory which can block the server for some time. On a 2010 MacBook Pro, setting bit number 2^32 -1 (512MB allocation) takes ~300ms, setting bit number 2^30 -1 (128MB allocation) takes ~80ms, setting bit number 2^28 -1 (32MB allocation) takes ~30ms and setting bit number 2^26 -1 (8MB allocation) takes ~8ms. Note that once this first allocation is done, subsequent calls to SETBIT for the same key will not have the allocation overhead."
	commandClusterSlavesWarning              = "As of Redis version 5.0.0, this command is regarded as deprecated.It can be replaced by CLUSTER REPLICAS when migrating or writing new code."
	commandClusterSlotsWarning               = "As of Redis version 7.0.0, this command is regarded as deprecated.It can be replaced by CLUSTER SHARDS when migrating or writing new code."
	commandQuitWarning                       = "As of Redis version 7.2.0, this command is regarded as deprecated.It can be replaced by just closing the connection when migrating or writing new code."
	commandKeysWarning                       = "consider KEYS as a command that should only be used in production environments with extreme care. It may ruin performance when it is executed against large databases. This command is intended for debugging and special operations, such as changing your keyspace layout. Don't use KEYS in your regular application code. If you're looking for a way to find keys in a subset of your keyspace, consider using SCAN or sets."
	commandGeoRadiusROWarning                = "As of Redis version 6.2.0, this command is regarded as deprecated.It can be replaced by GEOSEARCH with the BYRADIUS argument when migrating or writing new code."
	commandGeoRadiusStoreWarning             = "As of Redis version 6.2.0, this command is regarded as deprecated.It can be replaced by GEOSEARCH and GEOSEARCHSTORE with the BYRADIUS argument when migrating or writing new code."
	commandGeoRadiusByMemberROWarning        = "As of Redis version 6.2.0, this command is regarded as deprecated.It can be replaced by GEOSEARCH and GEOSEARCHSTORE with the BYRADIUS and FROMMEMBER arguments when migrating or writing new code."
	commandGeoRadiusByMemberStoreWarning     = "As of Redis version 6.2.0, this command is regarded as deprecated.It can be replaced by GEOSEARCH with the BYRADIUS and FROMMEMBER arguments when migrating or writing new code."
	commandHMSetWarning                      = "As of Redis version 4.0.0, this command is regarded as deprecated.It can be replaced by HSET with multiple field-value pairs when migrating or writing new code."
	commandRPopLPushWarning                  = "As of Redis version 6.2.0, this command is regarded as deprecated.It can be replaced by LMOVE with the RIGHT and LEFT arguments when migrating or writing new code."
	commandZRevRangeWarning                  = "As of Redis version 6.2.0, this command is regarded as deprecated.It can be replaced by ZRANGE with the REV argument when migrating or writing new code."
	commandZRevRangeWithScoresWarning        = "As of Redis version 6.2.0, this command is regarded as deprecated.It can be replaced by ZRANGE with the REV argument when migrating or writing new code."
	commandZRangeByLexWarning                = "As of Redis version 6.2.0, this command is regarded as deprecated.It can be replaced by ZRANGE with the BYLEX argument when migrating or writing new code."
	commandZRevRangeByLexWarning             = "As of Redis version 6.2.0, this command is regarded as deprecated.It can be replaced by ZRANGE with the REV and BYLEX arguments when migrating or writing new code."
	commandZRangeByScoreWarning              = "As of Redis version 6.2.0, this command is regarded as deprecated.It can be replaced by ZRANGE with the BYSCORE argument when migrating or writing new code."
	commandZRevRangeByScoreWarning           = "As of Redis version 6.2.0, this command is regarded as deprecated.It can be replaced by ZRANGE with the REV and BYSCORE arguments when migrating or writing new code."
	commandZRangeByScoreWithScoresWarning    = "As of Redis version 6.2.0, this command is regarded as deprecated.It can be replaced by ZRANGE with the BYSCORE argument when migrating or writing new code."
	commandZRevRangeByScoreWithScoresWarning = "As of Redis version 6.2.0, this command is regarded as deprecated.It can be replaced by ZRANGE with the REV and BYSCORE arguments when migrating or writing new code."
	commandGetSetWarning                     = "As of Redis version 6.2.0, this command is regarded as deprecated.It can be replaced by SET with the GET argument when migrating or writing new code."
	commandSetEXWarning                      = "As of Redis version 2.6.12, this command is regarded as deprecated.It can be replaced by SET with the EX argument when migrating or writing new code."
	commandSetNXWarning                      = "As of Redis version 2.6.12, this command is regarded as deprecated.It can be replaced by SET with the NX argument when migrating or writing new code."
)

type Command interface {
	String() string
	Class() string
	RequireVersion() string
	Forbid() bool
	WarnVersion() string
	Warning() string
}

var CommandBitCount commandBitCount

type commandBitCount string
type commandBitCountP struct{ Pipeliner }

func (commandBitCount) String() string                 { return "BITCOUNT" }
func (commandBitCount) Class() string                  { return "Bitmap" }
func (commandBitCount) RequireVersion() string         { return "2.6.0" }
func (commandBitCount) Forbid() bool                   { return false }
func (commandBitCount) WarnVersion() string            { return "0.0.0" }
func (commandBitCount) Warning() string                { return "" }
func (commandBitCount) P(p Pipeliner) commandBitCountP { return commandBitCountP{p} }
func (b commandBitCountP) Cmd(key string, bc *BitCount) {
	b.Pipeliner.Cmd(b.builder().BitCountCompleted(key, bc))
}

var CommandBitCountByte commandBitCountByte

type commandBitCountByte string
type commandBitCountByteP struct{ Pipeliner }

func (commandBitCountByte) String() string                     { return "BITCOUNT BYTE" }
func (commandBitCountByte) Class() string                      { return "Bitmap" }
func (commandBitCountByte) RequireVersion() string             { return "7.0.0" }
func (commandBitCountByte) Forbid() bool                       { return false }
func (commandBitCountByte) WarnVersion() string                { return "0.0.0" }
func (commandBitCountByte) Warning() string                    { return "" }
func (commandBitCountByte) P(p Pipeliner) commandBitCountByteP { return commandBitCountByteP{p} }
func (b commandBitCountByteP) Cmd(key string, bc *BitCount) {
	b.Pipeliner.Cmd(b.builder().BitCountCompleted(key, bc))
}

var CommandBitCountBit commandBitCountBit

type commandBitCountBit string
type commandBitCountBitP struct{ Pipeliner }

func (commandBitCountBit) String() string                    { return "BITCOUNT BIT" }
func (commandBitCountBit) Class() string                     { return "Bitmap" }
func (commandBitCountBit) RequireVersion() string            { return "7.0.0" }
func (commandBitCountBit) Forbid() bool                      { return false }
func (commandBitCountBit) WarnVersion() string               { return "0.0.0" }
func (commandBitCountBit) Warning() string                   { return "" }
func (commandBitCountBit) P(p Pipeliner) commandBitCountBitP { return commandBitCountBitP{p} }
func (b commandBitCountBitP) Cmd(key string, bc *BitCount) {
	b.Pipeliner.Cmd(b.builder().BitCountCompleted(key, bc))
}

var CommandBitField commandBitField

type commandBitField string
type commandBitFieldP struct{ Pipeliner }

func (commandBitField) String() string                 { return "BITFIELD" }
func (commandBitField) Class() string                  { return "Bitmap" }
func (commandBitField) RequireVersion() string         { return "3.2.0" }
func (commandBitField) Forbid() bool                   { return false }
func (commandBitField) WarnVersion() string            { return "0.0.0" }
func (commandBitField) Warning() string                { return "" }
func (commandBitField) P(p Pipeliner) commandBitFieldP { return commandBitFieldP{p} }
func (b commandBitFieldP) Cmd(key string, args ...any) {
	b.Pipeliner.Cmd(b.builder().BitFieldCompleted(key, args...))
}

var CommandBitOpAnd commandBitOpAnd

type commandBitOpAnd string
type commandBitOpAndP struct{ Pipeliner }

func (commandBitOpAnd) String() string                 { return "BITOP AND" }
func (commandBitOpAnd) Class() string                  { return "Bitmap" }
func (commandBitOpAnd) RequireVersion() string         { return "2.6.0" }
func (commandBitOpAnd) Forbid() bool                   { return false }
func (commandBitOpAnd) WarnVersion() string            { return "0.0.0" }
func (commandBitOpAnd) Warning() string                { return "" }
func (commandBitOpAnd) P(p Pipeliner) commandBitOpAndP { return commandBitOpAndP{p} }
func (b commandBitOpAndP) Cmd(destKey string, keys ...string) {
	b.Pipeliner.Cmd(b.builder().BitOpAndCompleted(destKey, keys...))
}

var CommandBitOpOr commandBitOpOr

type commandBitOpOr string
type commandBitOpOrP struct{ Pipeliner }

func (commandBitOpOr) String() string                { return "BITOP OR" }
func (commandBitOpOr) Class() string                 { return "Bitmap" }
func (commandBitOpOr) RequireVersion() string        { return "2.6.0" }
func (commandBitOpOr) Forbid() bool                  { return false }
func (commandBitOpOr) WarnVersion() string           { return "0.0.0" }
func (commandBitOpOr) Warning() string               { return "" }
func (commandBitOpOr) P(p Pipeliner) commandBitOpOrP { return commandBitOpOrP{p} }
func (b commandBitOpOrP) Cmd(destKey string, keys ...string) {
	b.Pipeliner.Cmd(b.builder().BitOpOrCompleted(destKey, keys...))
}

var CommandBitOpXor commandBitOpXor

type commandBitOpXor string
type commandBitOpXorP struct{ Pipeliner }

func (commandBitOpXor) String() string                 { return "BITOP XOR" }
func (commandBitOpXor) Class() string                  { return "Bitmap" }
func (commandBitOpXor) RequireVersion() string         { return "2.6.0" }
func (commandBitOpXor) Forbid() bool                   { return false }
func (commandBitOpXor) WarnVersion() string            { return "0.0.0" }
func (commandBitOpXor) Warning() string                { return "" }
func (commandBitOpXor) P(p Pipeliner) commandBitOpXorP { return commandBitOpXorP{p} }
func (b commandBitOpXorP) Cmd(destKey string, keys ...string) {
	b.Pipeliner.Cmd(b.builder().BitOpXorCompleted(destKey, keys...))
}

var CommandBitOpNot commandBitOpNot

type commandBitOpNot string
type commandBitOpNotP struct{ Pipeliner }

func (commandBitOpNot) String() string                 { return "BITOP NOT" }
func (commandBitOpNot) Class() string                  { return "Bitmap" }
func (commandBitOpNot) RequireVersion() string         { return "2.6.0" }
func (commandBitOpNot) Forbid() bool                   { return false }
func (commandBitOpNot) WarnVersion() string            { return "0.0.0" }
func (commandBitOpNot) Warning() string                { return "" }
func (commandBitOpNot) P(p Pipeliner) commandBitOpNotP { return commandBitOpNotP{p} }
func (b commandBitOpNotP) Cmd(destKey string, key string) {
	b.Pipeliner.Cmd(b.builder().BitOpNotCompleted(destKey, key))
}

var CommandBitPos commandBitPos

type commandBitPos string
type commandBitPosP struct{ Pipeliner }

func (commandBitPos) String() string               { return "BITPOS" }
func (commandBitPos) Class() string                { return "Bitmap" }
func (commandBitPos) RequireVersion() string       { return "2.8.7" }
func (commandBitPos) Forbid() bool                 { return false }
func (commandBitPos) WarnVersion() string          { return "0.0.0" }
func (commandBitPos) Warning() string              { return "" }
func (commandBitPos) P(p Pipeliner) commandBitPosP { return commandBitPosP{p} }
func (b commandBitPosP) Cmd(key string, bit int64, pos ...int64) {
	b.Pipeliner.Cmd(b.builder().BitPosCompleted(key, bit, pos...))
}

var CommandBitPosSpan commandBitPosSpan

type commandBitPosSpan string
type commandBitPosSpanP struct{ Pipeliner }

func (commandBitPosSpan) String() string                   { return "BITPOS BYTE/BIT" }
func (commandBitPosSpan) Class() string                    { return "Bitmap" }
func (commandBitPosSpan) RequireVersion() string           { return "7.0.0" }
func (commandBitPosSpan) Forbid() bool                     { return false }
func (commandBitPosSpan) WarnVersion() string              { return "0.0.0" }
func (commandBitPosSpan) Warning() string                  { return "" }
func (commandBitPosSpan) P(p Pipeliner) commandBitPosSpanP { return commandBitPosSpanP{p} }
func (b commandBitPosSpanP) Cmd(key string, bit, start, end int64, span string) {
	b.Pipeliner.Cmd(b.builder().BitPosSpanCompleted(key, bit, start, end, span))
}

var CommandGetBit commandGetBit

type commandGetBit string
type commandGetBitP struct{ Pipeliner }

func (commandGetBit) String() string               { return "GETBIT" }
func (commandGetBit) Class() string                { return "Bitmap" }
func (commandGetBit) RequireVersion() string       { return "2.2.0" }
func (commandGetBit) Forbid() bool                 { return false }
func (commandGetBit) WarnVersion() string          { return "0.0.0" }
func (commandGetBit) Warning() string              { return "" }
func (commandGetBit) P(p Pipeliner) commandGetBitP { return commandGetBitP{p} }
func (b commandGetBitP) Cmd(key string, offset int64) {
	b.Pipeliner.Cmd(b.builder().GetBitCompleted(key, offset))
}

var CommandSetBit commandSetBit

type commandSetBit string
type commandSetBitP struct{ Pipeliner }

func (commandSetBit) String() string               { return "SETBIT" }
func (commandSetBit) Class() string                { return "Bitmap" }
func (commandSetBit) RequireVersion() string       { return "2.2.0" }
func (commandSetBit) Forbid() bool                 { return false }
func (commandSetBit) WarnVersion() string          { return "0.0.0" }
func (commandSetBit) Warning() string              { return commandSetBitWarning }
func (commandSetBit) P(p Pipeliner) commandSetBitP { return commandSetBitP{p} }
func (b commandSetBitP) Cmd(key string, offset int64, value int64) {
	b.Pipeliner.Cmd(b.builder().SetBitCompleted(key, offset, value))
}

var CommandClusterAddSlots commandClusterAddSlots

type commandClusterAddSlots string

func (commandClusterAddSlots) String() string         { return "CLUSTER ADDSLOTS" }
func (commandClusterAddSlots) Class() string          { return "Cluster" }
func (commandClusterAddSlots) RequireVersion() string { return "3.0.0" }
func (commandClusterAddSlots) Forbid() bool           { return true }
func (commandClusterAddSlots) WarnVersion() string    { return "0.0.0" }
func (commandClusterAddSlots) Warning() string        { return "" }

var CommandClusterAddSlotsRange commandClusterAddSlotsRange

type commandClusterAddSlotsRange string

func (commandClusterAddSlotsRange) String() string         { return "CLUSTER ADDSLOTSRANGE" }
func (commandClusterAddSlotsRange) Class() string          { return "Cluster" }
func (commandClusterAddSlotsRange) RequireVersion() string { return "7.0.0" }
func (commandClusterAddSlotsRange) Forbid() bool           { return true }
func (commandClusterAddSlotsRange) WarnVersion() string    { return "0.0.0" }
func (commandClusterAddSlotsRange) Warning() string        { return "" }

var CommandClusterCountFailureReports commandClusterCountFailureReports

type commandClusterCountFailureReports string

func (commandClusterCountFailureReports) String() string         { return "CLUSTER COUNT-FAILURE-REPORTS" }
func (commandClusterCountFailureReports) Class() string          { return "Cluster" }
func (commandClusterCountFailureReports) RequireVersion() string { return "3.0.0" }
func (commandClusterCountFailureReports) Forbid() bool           { return true }
func (commandClusterCountFailureReports) WarnVersion() string    { return "0.0.0" }
func (commandClusterCountFailureReports) Warning() string        { return "" }

var CommandClusterCountKeysInSlot commandClusterCountKeysInSlot

type commandClusterCountKeysInSlot string

func (commandClusterCountKeysInSlot) String() string         { return "CLUSTER COUNTKEYSINSLOT" }
func (commandClusterCountKeysInSlot) Class() string          { return "Cluster" }
func (commandClusterCountKeysInSlot) RequireVersion() string { return "3.0.0" }
func (commandClusterCountKeysInSlot) Forbid() bool           { return false }
func (commandClusterCountKeysInSlot) WarnVersion() string    { return "0.0.0" }
func (commandClusterCountKeysInSlot) Warning() string        { return "" }

var CommandClusterDelSlots commandClusterDelSlots

type commandClusterDelSlots string

func (commandClusterDelSlots) String() string         { return "CLUSTER DELSLOTS" }
func (commandClusterDelSlots) Class() string          { return "Cluster" }
func (commandClusterDelSlots) RequireVersion() string { return "3.0.0" }
func (commandClusterDelSlots) Forbid() bool           { return true }
func (commandClusterDelSlots) WarnVersion() string    { return "0.0.0" }
func (commandClusterDelSlots) Warning() string        { return "" }

var CommandClusterDelSlotsRange commandClusterDelSlotsRange

type commandClusterDelSlotsRange string

func (commandClusterDelSlotsRange) String() string         { return "CLUSTER DELSLOTSRANGE" }
func (commandClusterDelSlotsRange) Class() string          { return "Cluster" }
func (commandClusterDelSlotsRange) RequireVersion() string { return "7.0.0" }
func (commandClusterDelSlotsRange) Forbid() bool           { return true }
func (commandClusterDelSlotsRange) WarnVersion() string    { return "0.0.0" }
func (commandClusterDelSlotsRange) Warning() string        { return "" }

var CommandClusterFailover commandClusterFailover

type commandClusterFailover string

func (commandClusterFailover) String() string         { return "CLUSTER FAILOVER" }
func (commandClusterFailover) Class() string          { return "Cluster" }
func (commandClusterFailover) RequireVersion() string { return "3.0.0" }
func (commandClusterFailover) Forbid() bool           { return true }
func (commandClusterFailover) WarnVersion() string    { return "0.0.0" }
func (commandClusterFailover) Warning() string        { return "" }

var CommandClusterForget commandClusterForget

type commandClusterForget string

func (commandClusterForget) String() string         { return "CLUSTER FORGET" }
func (commandClusterForget) Class() string          { return "Cluster" }
func (commandClusterForget) RequireVersion() string { return "3.0.0" }
func (commandClusterForget) Forbid() bool           { return true }
func (commandClusterForget) WarnVersion() string    { return "0.0.0" }
func (commandClusterForget) Warning() string        { return "" }

var CommandClusterGetKeysInSlot commandClusterGetKeysInSlot

type commandClusterGetKeysInSlot string

func (commandClusterGetKeysInSlot) String() string         { return "CLUSTER GETKEYSINSLOT" }
func (commandClusterGetKeysInSlot) Class() string          { return "Cluster" }
func (commandClusterGetKeysInSlot) RequireVersion() string { return "3.0.0" }
func (commandClusterGetKeysInSlot) Forbid() bool           { return false }
func (commandClusterGetKeysInSlot) WarnVersion() string    { return "0.0.0" }
func (commandClusterGetKeysInSlot) Warning() string        { return "" }

var CommandClusterInfo commandClusterInfo

type commandClusterInfo string

func (commandClusterInfo) String() string         { return "CLUSTER INFO" }
func (commandClusterInfo) Class() string          { return "Cluster" }
func (commandClusterInfo) RequireVersion() string { return "3.0.0" }
func (commandClusterInfo) Forbid() bool           { return false }
func (commandClusterInfo) WarnVersion() string    { return "0.0.0" }
func (commandClusterInfo) Warning() string        { return "" }

var CommandClusterKeySlot commandClusterKeySlot

type commandClusterKeySlot string

func (commandClusterKeySlot) String() string         { return "CLUSTERKEYSLOT" }
func (commandClusterKeySlot) Class() string          { return "Cluster" }
func (commandClusterKeySlot) RequireVersion() string { return "3.0.0" }
func (commandClusterKeySlot) Forbid() bool           { return false }
func (commandClusterKeySlot) WarnVersion() string    { return "0.0.0" }
func (commandClusterKeySlot) Warning() string        { return "" }

var CommandClusterMeet commandClusterMeet

type commandClusterMeet string

func (commandClusterMeet) String() string         { return "CLUSTER MEET" }
func (commandClusterMeet) Class() string          { return "Cluster" }
func (commandClusterMeet) RequireVersion() string { return "3.0.0" }
func (commandClusterMeet) Forbid() bool           { return true }
func (commandClusterMeet) WarnVersion() string    { return "0.0.0" }
func (commandClusterMeet) Warning() string        { return "" }

var CommandClusterNodes commandClusterNodes

type commandClusterNodes string

func (commandClusterNodes) String() string         { return "CLUSTER NODES" }
func (commandClusterNodes) Class() string          { return "Cluster" }
func (commandClusterNodes) RequireVersion() string { return "3.0.0" }
func (commandClusterNodes) Forbid() bool           { return false }
func (commandClusterNodes) WarnVersion() string    { return "0.0.0" }
func (commandClusterNodes) Warning() string        { return "" }

var CommandClusterReplicate commandClusterReplicate

type commandClusterReplicate string

func (commandClusterReplicate) String() string         { return "CLUSTERREPLICATE" }
func (commandClusterReplicate) Class() string          { return "Cluster" }
func (commandClusterReplicate) RequireVersion() string { return "3.0.0" }
func (commandClusterReplicate) Forbid() bool           { return true }
func (commandClusterReplicate) WarnVersion() string    { return "0.0.0" }
func (commandClusterReplicate) Warning() string        { return "" }

var CommandClusterResetHard commandClusterResetHard

type commandClusterResetHard string

func (commandClusterResetHard) String() string         { return "CLUSTER RESET HARD" }
func (commandClusterResetHard) Class() string          { return "Cluster" }
func (commandClusterResetHard) RequireVersion() string { return "3.0.0" }
func (commandClusterResetHard) Forbid() bool           { return true }
func (commandClusterResetHard) WarnVersion() string    { return "0.0.0" }
func (commandClusterResetHard) Warning() string        { return "" }

var CommandClusterResetSoft commandClusterResetSoft

type commandClusterResetSoft string

func (commandClusterResetSoft) String() string         { return "CLUSTER RESET SOFT" }
func (commandClusterResetSoft) Class() string          { return "Cluster" }
func (commandClusterResetSoft) RequireVersion() string { return "3.0.0" }
func (commandClusterResetSoft) Forbid() bool           { return true }
func (commandClusterResetSoft) WarnVersion() string    { return "0.0.0" }
func (commandClusterResetSoft) Warning() string        { return "" }

var CommandClusterSaveConfig commandClusterSaveConfig

type commandClusterSaveConfig string

func (commandClusterSaveConfig) String() string         { return "CLUSTERSAVECONFIG" }
func (commandClusterSaveConfig) Class() string          { return "Cluster" }
func (commandClusterSaveConfig) RequireVersion() string { return "3.0.0" }
func (commandClusterSaveConfig) Forbid() bool           { return true }
func (commandClusterSaveConfig) WarnVersion() string    { return "0.0.0" }
func (commandClusterSaveConfig) Warning() string        { return "" }

var CommandClusterSlaves commandClusterSlaves

type commandClusterSlaves string

func (commandClusterSlaves) String() string         { return "CLUSTER SLAVES" }
func (commandClusterSlaves) Class() string          { return "Cluster" }
func (commandClusterSlaves) RequireVersion() string { return "3.0.0" }
func (commandClusterSlaves) Forbid() bool           { return true }
func (commandClusterSlaves) WarnVersion() string    { return "5.0.0" }
func (commandClusterSlaves) Warning() string        { return commandClusterSlavesWarning }

var CommandClusterSlots commandClusterSlots

type commandClusterSlots string

func (commandClusterSlots) String() string         { return "CLUSTER SLOTS" }
func (commandClusterSlots) Class() string          { return "Cluster" }
func (commandClusterSlots) RequireVersion() string { return "3.0.0" }
func (commandClusterSlots) Forbid() bool           { return false }
func (commandClusterSlots) WarnVersion() string    { return "7.0.0" }
func (commandClusterSlots) Warning() string        { return commandClusterSlotsWarning }

var CommandClusterShards commandClusterShards

type commandClusterShards string

func (commandClusterShards) String() string         { return "CLUSTER SHARDS" }
func (commandClusterShards) Class() string          { return "Cluster" }
func (commandClusterShards) RequireVersion() string { return "7.0.0" }
func (commandClusterShards) Forbid() bool           { return false }
func (commandClusterShards) WarnVersion() string    { return "0.0.0" }
func (commandClusterShards) Warning() string        { return "" }

var CommandReadOnly commandReadOnly

type commandReadOnly string

func (commandReadOnly) String() string         { return "READONLY" }
func (commandReadOnly) Class() string          { return "Cluster" }
func (commandReadOnly) RequireVersion() string { return "3.0.0" }
func (commandReadOnly) Forbid() bool           { return false }
func (commandReadOnly) WarnVersion() string    { return "0.0.0" }
func (commandReadOnly) Warning() string        { return "" }

var CommandReadWrite commandReadWrite

type commandReadWrite string

func (commandReadWrite) String() string         { return "READWRITE" }
func (commandReadWrite) Class() string          { return "Cluster" }
func (commandReadWrite) RequireVersion() string { return "3.0.0" }
func (commandReadWrite) Forbid() bool           { return false }
func (commandReadWrite) WarnVersion() string    { return "0.0.0" }
func (commandReadWrite) Warning() string        { return "" }

var CommandClientGetName commandClientGetName

type commandClientGetName string

func (commandClientGetName) String() string         { return "CLIENT GETNAME" }
func (commandClientGetName) Class() string          { return "Connection" }
func (commandClientGetName) RequireVersion() string { return "2.6.9" }
func (commandClientGetName) Forbid() bool           { return false }
func (commandClientGetName) WarnVersion() string    { return "0.0.0" }
func (commandClientGetName) Warning() string        { return "" }

var CommandClientID commandClientID

type commandClientID string

func (commandClientID) String() string         { return "CLIENT ID" }
func (commandClientID) Class() string          { return "Connection" }
func (commandClientID) RequireVersion() string { return "5.0.0" }
func (commandClientID) Forbid() bool           { return false }
func (commandClientID) WarnVersion() string    { return "0.0.0" }
func (commandClientID) Warning() string        { return "" }

var CommandClientKill commandClientKill

type commandClientKill string

func (commandClientKill) String() string         { return "CLIENT KILL" }
func (commandClientKill) Class() string          { return "Connection" }
func (commandClientKill) RequireVersion() string { return "2.4.0" }
func (commandClientKill) Forbid() bool           { return true }
func (commandClientKill) WarnVersion() string    { return "0.0.0" }
func (commandClientKill) Warning() string        { return "" }

var CommandClientKillByFilter commandClientKillByFilter

type commandClientKillByFilter string

func (commandClientKillByFilter) String() string         { return "CLIENT KILL" }
func (commandClientKillByFilter) Class() string          { return "Connection" }
func (commandClientKillByFilter) RequireVersion() string { return "2.8.12" }
func (commandClientKillByFilter) Forbid() bool           { return true }
func (commandClientKillByFilter) WarnVersion() string    { return "0.0.0" }
func (commandClientKillByFilter) Warning() string        { return "" }

var CommandClientKillByFilterWithType commandClientKillByFilterWithType

type commandClientKillByFilterWithType string

func (commandClientKillByFilterWithType) String() string         { return "CLIENT KILL" }
func (commandClientKillByFilterWithType) Class() string          { return "Connection" }
func (commandClientKillByFilterWithType) RequireVersion() string { return "3.2.0" }
func (commandClientKillByFilterWithType) Forbid() bool           { return true }
func (commandClientKillByFilterWithType) WarnVersion() string    { return "0.0.0" }
func (commandClientKillByFilterWithType) Warning() string        { return "" }

var CommandClientKillByFilterWithLADDR commandClientKillByFilterWithLADDR

type commandClientKillByFilterWithLADDR string

func (commandClientKillByFilterWithLADDR) String() string         { return "CLIENT KILL" }
func (commandClientKillByFilterWithLADDR) Class() string          { return "Connection" }
func (commandClientKillByFilterWithLADDR) RequireVersion() string { return "6.2.0" }
func (commandClientKillByFilterWithLADDR) Forbid() bool           { return true }
func (commandClientKillByFilterWithLADDR) WarnVersion() string    { return "0.0.0" }
func (commandClientKillByFilterWithLADDR) Warning() string        { return "" }

var CommandClientList commandClientList

type commandClientList string

func (commandClientList) String() string         { return "CLIENT LIST" }
func (commandClientList) Class() string          { return "Connection" }
func (commandClientList) RequireVersion() string { return "2.4.0" }
func (commandClientList) Forbid() bool           { return true }
func (commandClientList) WarnVersion() string    { return "0.0.0" }
func (commandClientList) Warning() string        { return "" }

var CommandClientPause commandClientPause

type commandClientPause string

func (commandClientPause) String() string         { return "CLIENT PAUSE" }
func (commandClientPause) Class() string          { return "Connection" }
func (commandClientPause) RequireVersion() string { return "3.0.0" }
func (commandClientPause) Forbid() bool           { return true }
func (commandClientPause) WarnVersion() string    { return "0.0.0" }
func (commandClientPause) Warning() string        { return "" }

var CommandClientUnpause commandClientUnpause

type commandClientUnpause string

func (commandClientUnpause) String() string         { return "CLIENT UNPAUSE" }
func (commandClientUnpause) Class() string          { return "Connection" }
func (commandClientUnpause) RequireVersion() string { return "6.2.0" }
func (commandClientUnpause) Forbid() bool           { return true }
func (commandClientUnpause) WarnVersion() string    { return "0.0.0" }
func (commandClientUnpause) Warning() string        { return "" }

var CommandClientUnblock commandClientUnblock

type commandClientUnblock string

func (commandClientUnblock) String() string         { return "CLIENT UNBLOCK" }
func (commandClientUnblock) Class() string          { return "Connection" }
func (commandClientUnblock) RequireVersion() string { return "5.0.0" }
func (commandClientUnblock) Forbid() bool           { return true }
func (commandClientUnblock) WarnVersion() string    { return "0.0.0" }
func (commandClientUnblock) Warning() string        { return "" }

var CommandClientUnblockWithError commandClientUnblockWithError

type commandClientUnblockWithError string

func (commandClientUnblockWithError) String() string         { return "CLIENT UNBLOCK" }
func (commandClientUnblockWithError) Class() string          { return "Connection" }
func (commandClientUnblockWithError) RequireVersion() string { return "5.0.0" }
func (commandClientUnblockWithError) Forbid() bool           { return true }
func (commandClientUnblockWithError) WarnVersion() string    { return "0.0.0" }
func (commandClientUnblockWithError) Warning() string        { return "" }

var CommandEcho commandEcho

type commandEcho string
type commandEchoP struct{ Pipeliner }

func (commandEcho) String() string             { return "ECHO" }
func (commandEcho) Class() string              { return "Connection" }
func (commandEcho) RequireVersion() string     { return "1.0.0" }
func (commandEcho) Forbid() bool               { return false }
func (commandEcho) WarnVersion() string        { return "0.0.0" }
func (commandEcho) Warning() string            { return "" }
func (commandEcho) P(p Pipeliner) commandEchoP { return commandEchoP{p} }
func (b commandEchoP) Cmd(message string)      { b.Pipeliner.Cmd(b.builder().EchoCompleted(message)) }

var CommandPing commandPing

type commandPing string
type commandPingP struct{ Pipeliner }

func (commandPing) String() string             { return "PING" }
func (commandPing) Class() string              { return "Connection" }
func (commandPing) RequireVersion() string     { return "1.0.0" }
func (commandPing) Forbid() bool               { return false }
func (commandPing) WarnVersion() string        { return "0.0.0" }
func (commandPing) Warning() string            { return "" }
func (commandPing) P(p Pipeliner) commandPingP { return commandPingP{p} }
func (b commandPingP) Cmd()                    { b.Pipeliner.Cmd(b.builder().PingCompleted()) }

var CommandQuit commandQuit

type commandQuit string

func (commandQuit) String() string         { return "QUIT" }
func (commandQuit) Class() string          { return "Connection" }
func (commandQuit) RequireVersion() string { return "1.0.0" }
func (commandQuit) Forbid() bool           { return false }
func (commandQuit) WarnVersion() string    { return "7.2.0" }
func (commandQuit) Warning() string        { return commandQuitWarning }

var CommandCopy commandCopy

type commandCopy string
type commandCopyP struct{ Pipeliner }

func (commandCopy) String() string             { return "COPY" }
func (commandCopy) Class() string              { return "Generic" }
func (commandCopy) RequireVersion() string     { return "6.2.0" }
func (commandCopy) Forbid() bool               { return false }
func (commandCopy) WarnVersion() string        { return "0.0.0" }
func (commandCopy) Warning() string            { return "" }
func (commandCopy) P(p Pipeliner) commandCopyP { return commandCopyP{p} }
func (b commandCopyP) Cmd(source string, destination string, db int64, replace bool) {
	b.Pipeliner.Cmd(b.builder().CopyCompleted(source, destination, db, replace))
}

var CommandDel commandDel

type commandDel string
type commandDelP struct{ Pipeliner }

func (commandDel) String() string            { return "DEL" }
func (commandDel) Class() string             { return "Generic" }
func (commandDel) RequireVersion() string    { return "1.0.0" }
func (commandDel) Forbid() bool              { return false }
func (commandDel) WarnVersion() string       { return "0.0.0" }
func (commandDel) Warning() string           { return "" }
func (commandDel) P(p Pipeliner) commandDelP { return commandDelP{p} }
func (b commandDelP) Cmd(keys ...string)     { b.Pipeliner.Cmd(b.builder().DelCompleted(keys...)) }

var CommandDump commandDump

type commandDump string
type commandDumpP struct{ Pipeliner }

func (commandDump) String() string             { return "DUMP" }
func (commandDump) Class() string              { return "Generic" }
func (commandDump) RequireVersion() string     { return "2.6.0" }
func (commandDump) Forbid() bool               { return false }
func (commandDump) WarnVersion() string        { return "0.0.0" }
func (commandDump) Warning() string            { return "" }
func (commandDump) P(p Pipeliner) commandDumpP { return commandDumpP{p} }
func (b commandDumpP) Cmd(key string)          { b.Pipeliner.Cmd(b.builder().DumpCompleted(key)) }

var CommandExists commandExists

type commandExists string
type commandExistsP struct{ Pipeliner }

func (commandExists) String() string               { return "EXISTS" }
func (commandExists) Class() string                { return "Generic" }
func (commandExists) RequireVersion() string       { return "1.0.0" }
func (commandExists) Forbid() bool                 { return false }
func (commandExists) WarnVersion() string          { return "0.0.0" }
func (commandExists) Warning() string              { return "" }
func (commandExists) P(p Pipeliner) commandExistsP { return commandExistsP{p} }
func (b commandExistsP) Cmd(key string)            { b.Pipeliner.Cmd(b.builder().ExistsCompleted(key)) }

var CommandMExists commandMExists

type commandMExists string
type commandMExistsP struct{ Pipeliner }

func (commandMExists) String() string                { return "EXISTS" }
func (commandMExists) Class() string                 { return "Generic" }
func (commandMExists) RequireVersion() string        { return "3.0.3" }
func (commandMExists) Forbid() bool                  { return false }
func (commandMExists) WarnVersion() string           { return "0.0.0" }
func (commandMExists) Warning() string               { return "" }
func (commandMExists) P(p Pipeliner) commandMExistsP { return commandMExistsP{p} }
func (b commandMExistsP) Cmd(keys ...string)         { b.Pipeliner.Cmd(b.builder().ExistsCompleted(keys...)) }

var CommandExpire commandExpire

type commandExpire string
type commandExpireP struct{ Pipeliner }

func (commandExpire) String() string               { return "EXPIRE" }
func (commandExpire) Class() string                { return "Generic" }
func (commandExpire) RequireVersion() string       { return "1.0.0" }
func (commandExpire) Forbid() bool                 { return false }
func (commandExpire) WarnVersion() string          { return "0.0.0" }
func (commandExpire) Warning() string              { return "" }
func (commandExpire) P(p Pipeliner) commandExpireP { return commandExpireP{p} }
func (b commandExpireP) Cmd(key string, seconds time.Duration) {
	b.Pipeliner.Cmd(b.builder().ExpireCompleted(key, seconds))
}

var CommandExpireNX commandExpireNX

type commandExpireNX string
type commandExpireNXP struct{ Pipeliner }

func (commandExpireNX) String() string                 { return "EXPIRE NX" }
func (commandExpireNX) Class() string                  { return "Generic" }
func (commandExpireNX) RequireVersion() string         { return "7.0.0" }
func (commandExpireNX) Forbid() bool                   { return false }
func (commandExpireNX) WarnVersion() string            { return "0.0.0" }
func (commandExpireNX) Warning() string                { return "" }
func (commandExpireNX) P(p Pipeliner) commandExpireNXP { return commandExpireNXP{p} }
func (b commandExpireNXP) Cmd(key string, seconds time.Duration) {
	b.Pipeliner.Cmd(b.builder().ExpireNXCompleted(key, seconds))
}

var CommandExpireXX commandExpireXX

type commandExpireXX string
type commandExpireXXP struct{ Pipeliner }

func (commandExpireXX) String() string                 { return "EXPIRE XX" }
func (commandExpireXX) Class() string                  { return "Generic" }
func (commandExpireXX) RequireVersion() string         { return "7.0.0" }
func (commandExpireXX) Forbid() bool                   { return false }
func (commandExpireXX) WarnVersion() string            { return "0.0.0" }
func (commandExpireXX) Warning() string                { return "" }
func (commandExpireXX) P(p Pipeliner) commandExpireXXP { return commandExpireXXP{p} }
func (b commandExpireXXP) Cmd(key string, seconds time.Duration) {
	b.Pipeliner.Cmd(b.builder().ExpireXXCompleted(key, seconds))
}

var CommandExpireGT commandExpireGT

type commandExpireGT string
type commandExpireGTP struct{ Pipeliner }

func (commandExpireGT) String() string                 { return "EXPIRE GT" }
func (commandExpireGT) Class() string                  { return "Generic" }
func (commandExpireGT) RequireVersion() string         { return "7.0.0" }
func (commandExpireGT) Forbid() bool                   { return false }
func (commandExpireGT) WarnVersion() string            { return "0.0.0" }
func (commandExpireGT) Warning() string                { return "" }
func (commandExpireGT) P(p Pipeliner) commandExpireGTP { return commandExpireGTP{p} }
func (b commandExpireGTP) Cmd(key string, seconds time.Duration) {
	b.Pipeliner.Cmd(b.builder().ExpireGTCompleted(key, seconds))
}

var CommandExpireLT commandExpireLT

type commandExpireLT string
type commandExpireLTP struct{ Pipeliner }

func (commandExpireLT) String() string                 { return "EXPIRE LT" }
func (commandExpireLT) Class() string                  { return "Generic" }
func (commandExpireLT) RequireVersion() string         { return "7.0.0" }
func (commandExpireLT) Forbid() bool                   { return false }
func (commandExpireLT) WarnVersion() string            { return "0.0.0" }
func (commandExpireLT) Warning() string                { return "" }
func (commandExpireLT) P(p Pipeliner) commandExpireLTP { return commandExpireLTP{p} }
func (b commandExpireLTP) Cmd(key string, seconds time.Duration) {
	b.Pipeliner.Cmd(b.builder().ExpireLTCompleted(key, seconds))
}

var CommandExpireAt commandExpireAt

type commandExpireAt string
type commandExpireAtP struct{ Pipeliner }

func (commandExpireAt) String() string                 { return "EXPIREAT" }
func (commandExpireAt) Class() string                  { return "Generic" }
func (commandExpireAt) RequireVersion() string         { return "1.2.0" }
func (commandExpireAt) Forbid() bool                   { return false }
func (commandExpireAt) WarnVersion() string            { return "0.0.0" }
func (commandExpireAt) Warning() string                { return "" }
func (commandExpireAt) P(p Pipeliner) commandExpireAtP { return commandExpireAtP{p} }
func (b commandExpireAtP) Cmd(key string, timestamp time.Time) {
	b.Pipeliner.Cmd(b.builder().ExpireAtCompleted(key, timestamp))
}

var CommandExpireAtNX commandExpireAtNX

type commandExpireAtNX string
type commandExpireAtNXP struct{ Pipeliner }

func (commandExpireAtNX) String() string                   { return "EXPIREAT NX" }
func (commandExpireAtNX) Class() string                    { return "Generic" }
func (commandExpireAtNX) RequireVersion() string           { return "7.0.0" }
func (commandExpireAtNX) Forbid() bool                     { return false }
func (commandExpireAtNX) WarnVersion() string              { return "0.0.0" }
func (commandExpireAtNX) Warning() string                  { return "" }
func (commandExpireAtNX) P(p Pipeliner) commandExpireAtNXP { return commandExpireAtNXP{p} }
func (b commandExpireAtNXP) Cmd(key string, timestamp time.Time) {
	b.Pipeliner.Cmd(b.builder().ExpireAtNXCompleted(key, timestamp))
}

var CommandExpireAtXX commandExpireAtXX

type commandExpireAtXX string
type commandExpireAtXXP struct{ Pipeliner }

func (commandExpireAtXX) String() string                   { return "EXPIREAT XX" }
func (commandExpireAtXX) Class() string                    { return "Generic" }
func (commandExpireAtXX) RequireVersion() string           { return "7.0.0" }
func (commandExpireAtXX) Forbid() bool                     { return false }
func (commandExpireAtXX) WarnVersion() string              { return "0.0.0" }
func (commandExpireAtXX) Warning() string                  { return "" }
func (commandExpireAtXX) P(p Pipeliner) commandExpireAtXXP { return commandExpireAtXXP{p} }
func (b commandExpireAtXXP) Cmd(key string, timestamp time.Time) {
	b.Pipeliner.Cmd(b.builder().ExpireAtXXCompleted(key, timestamp))
}

var CommandExpireAtGT commandExpireAtGT

type commandExpireAtGT string
type commandExpireAtGTP struct{ Pipeliner }

func (commandExpireAtGT) String() string                   { return "EXPIREAT GT" }
func (commandExpireAtGT) Class() string                    { return "Generic" }
func (commandExpireAtGT) RequireVersion() string           { return "7.0.0" }
func (commandExpireAtGT) Forbid() bool                     { return false }
func (commandExpireAtGT) WarnVersion() string              { return "0.0.0" }
func (commandExpireAtGT) Warning() string                  { return "" }
func (commandExpireAtGT) P(p Pipeliner) commandExpireAtGTP { return commandExpireAtGTP{p} }
func (b commandExpireAtGTP) Cmd(key string, timestamp time.Time) {
	b.Pipeliner.Cmd(b.builder().ExpireAtGTCompleted(key, timestamp))
}

var CommandExpireAtLT commandExpireAtLT

type commandExpireAtLT string
type commandExpireAtLTP struct{ Pipeliner }

func (commandExpireAtLT) String() string                   { return "EXPIREAT LT" }
func (commandExpireAtLT) Class() string                    { return "Generic" }
func (commandExpireAtLT) RequireVersion() string           { return "7.0.0" }
func (commandExpireAtLT) Forbid() bool                     { return false }
func (commandExpireAtLT) WarnVersion() string              { return "0.0.0" }
func (commandExpireAtLT) Warning() string                  { return "" }
func (commandExpireAtLT) P(p Pipeliner) commandExpireAtLTP { return commandExpireAtLTP{p} }
func (b commandExpireAtLTP) Cmd(key string, timestamp time.Time) {
	b.Pipeliner.Cmd(b.builder().ExpireAtLTCompleted(key, timestamp))
}

var CommandExpireTime commandExpireTime

type commandExpireTime string
type commandExpireTimeP struct{ Pipeliner }

func (commandExpireTime) String() string                   { return "EXPIRETIME" }
func (commandExpireTime) Class() string                    { return "Generic" }
func (commandExpireTime) RequireVersion() string           { return "7.0.0" }
func (commandExpireTime) Forbid() bool                     { return false }
func (commandExpireTime) WarnVersion() string              { return "0.0.0" }
func (commandExpireTime) Warning() string                  { return "" }
func (commandExpireTime) P(p Pipeliner) commandExpireTimeP { return commandExpireTimeP{p} }
func (b commandExpireTimeP) Cmd(key string)                { b.Pipeliner.Cmd(b.builder().ExpireTimeCompleted(key)) }

var CommandKeys commandKeys

type commandKeys string

func (commandKeys) String() string         { return "KEYS" }
func (commandKeys) Class() string          { return "Generic" }
func (commandKeys) RequireVersion() string { return "1.0.0" }
func (commandKeys) Forbid() bool           { return true }
func (commandKeys) WarnVersion() string    { return "0.0.0" }
func (commandKeys) Warning() string        { return commandKeysWarning }

var CommandMigrate commandMigrate

type commandMigrate string
type commandMigrateP struct{ Pipeliner }

func (commandMigrate) String() string                { return "MIGRATE" }
func (commandMigrate) Class() string                 { return "Generic" }
func (commandMigrate) RequireVersion() string        { return "2.6.0" }
func (commandMigrate) Forbid() bool                  { return true }
func (commandMigrate) WarnVersion() string           { return "0.0.0" }
func (commandMigrate) Warning() string               { return "" }
func (commandMigrate) P(p Pipeliner) commandMigrateP { return commandMigrateP{p} }
func (b commandMigrateP) Cmd(host string, port int64, key string, db int64, timeout time.Duration) {
	b.Pipeliner.Cmd(b.builder().MigrateCompleted(host, port, key, db, timeout))
}

var CommandMove commandMove

type commandMove string
type commandMoveP struct{ Pipeliner }

func (commandMove) String() string              { return "MOVE" }
func (commandMove) Class() string               { return "Generic" }
func (commandMove) RequireVersion() string      { return "1.0.0" }
func (commandMove) Forbid() bool                { return false }
func (commandMove) WarnVersion() string         { return "0.0.0" }
func (commandMove) Warning() string             { return "" }
func (commandMove) P(p Pipeliner) commandMoveP  { return commandMoveP{p} }
func (b commandMoveP) Cmd(key string, db int64) { b.Pipeliner.Cmd(b.builder().MoveCompleted(key, db)) }

var CommandObjectEncoding commandObjectEncoding

type commandObjectEncoding string
type commandObjectEncodingP struct{ Pipeliner }

func (commandObjectEncoding) String() string                       { return "OBJECT ENCODING" }
func (commandObjectEncoding) Class() string                        { return "Generic" }
func (commandObjectEncoding) RequireVersion() string               { return "2.2.3" }
func (commandObjectEncoding) Forbid() bool                         { return false }
func (commandObjectEncoding) WarnVersion() string                  { return "0.0.0" }
func (commandObjectEncoding) Warning() string                      { return "" }
func (commandObjectEncoding) P(p Pipeliner) commandObjectEncodingP { return commandObjectEncodingP{p} }
func (b commandObjectEncodingP) Cmd(key string) {
	b.Pipeliner.Cmd(b.builder().ObjectEncodingCompleted(key))
}

var CommandObjectIdleTime commandObjectIdleTime

type commandObjectIdleTime string
type commandObjectIdleTimeP struct{ Pipeliner }

func (commandObjectIdleTime) String() string                       { return "OBJECT IDLETIME" }
func (commandObjectIdleTime) Class() string                        { return "Generic" }
func (commandObjectIdleTime) RequireVersion() string               { return "2.2.3" }
func (commandObjectIdleTime) Forbid() bool                         { return false }
func (commandObjectIdleTime) WarnVersion() string                  { return "0.0.0" }
func (commandObjectIdleTime) Warning() string                      { return "" }
func (commandObjectIdleTime) P(p Pipeliner) commandObjectIdleTimeP { return commandObjectIdleTimeP{p} }
func (b commandObjectIdleTimeP) Cmd(key string) {
	b.Pipeliner.Cmd(b.builder().ObjectIdleTimeCompleted(key))
}

var CommandObjectRefCount commandObjectRefCount

type commandObjectRefCount string
type commandObjectRefCountP struct{ Pipeliner }

func (commandObjectRefCount) String() string                       { return "OBJECT REFCOUNT" }
func (commandObjectRefCount) Class() string                        { return "Generic" }
func (commandObjectRefCount) RequireVersion() string               { return "2.2.3" }
func (commandObjectRefCount) Forbid() bool                         { return false }
func (commandObjectRefCount) WarnVersion() string                  { return "0.0.0" }
func (commandObjectRefCount) Warning() string                      { return "" }
func (commandObjectRefCount) P(p Pipeliner) commandObjectRefCountP { return commandObjectRefCountP{p} }
func (b commandObjectRefCountP) Cmd(key string) {
	b.Pipeliner.Cmd(b.builder().ObjectRefCountCompleted(key))
}

var CommandPersist commandPersist

type commandPersist string
type commandPersistP struct{ Pipeliner }

func (commandPersist) String() string                { return "PERSIST" }
func (commandPersist) Class() string                 { return "Generic" }
func (commandPersist) RequireVersion() string        { return "2.2.0" }
func (commandPersist) Forbid() bool                  { return false }
func (commandPersist) WarnVersion() string           { return "0.0.0" }
func (commandPersist) Warning() string               { return "" }
func (commandPersist) P(p Pipeliner) commandPersistP { return commandPersistP{p} }
func (b commandPersistP) Cmd(key string)             { b.Pipeliner.Cmd(b.builder().PersistCompleted(key)) }

var CommandPExpire commandPExpire

type commandPExpire string
type commandPExpireP struct{ Pipeliner }

func (commandPExpire) String() string                { return "PEXPIRE" }
func (commandPExpire) Class() string                 { return "Generic" }
func (commandPExpire) RequireVersion() string        { return "2.6.0" }
func (commandPExpire) Forbid() bool                  { return false }
func (commandPExpire) WarnVersion() string           { return "0.0.0" }
func (commandPExpire) Warning() string               { return "" }
func (commandPExpire) P(p Pipeliner) commandPExpireP { return commandPExpireP{p} }
func (b commandPExpireP) Cmd(key string, milliseconds time.Duration) {
	b.Pipeliner.Cmd(b.builder().PExpireCompleted(key, milliseconds))
}

var CommandPExpireNX commandPExpireNX

type commandPExpireNX string
type commandPExpireNXP struct{ Pipeliner }

func (commandPExpireNX) String() string                  { return "PEXPIRE NX" }
func (commandPExpireNX) Class() string                   { return "Generic" }
func (commandPExpireNX) RequireVersion() string          { return "7.0.0" }
func (commandPExpireNX) Forbid() bool                    { return false }
func (commandPExpireNX) WarnVersion() string             { return "0.0.0" }
func (commandPExpireNX) Warning() string                 { return "" }
func (commandPExpireNX) P(p Pipeliner) commandPExpireNXP { return commandPExpireNXP{p} }
func (b commandPExpireNXP) Cmd(key string, milliseconds time.Duration) {
	b.Pipeliner.Cmd(b.builder().PExpireNXCompleted(key, milliseconds))
}

var CommandPExpireXX commandPExpireXX

type commandPExpireXX string
type commandPExpireXXP struct{ Pipeliner }

func (commandPExpireXX) String() string                  { return "PEXPIRE XX" }
func (commandPExpireXX) Class() string                   { return "Generic" }
func (commandPExpireXX) RequireVersion() string          { return "7.0.0" }
func (commandPExpireXX) Forbid() bool                    { return false }
func (commandPExpireXX) WarnVersion() string             { return "0.0.0" }
func (commandPExpireXX) Warning() string                 { return "" }
func (commandPExpireXX) P(p Pipeliner) commandPExpireXXP { return commandPExpireXXP{p} }
func (b commandPExpireXXP) Cmd(key string, milliseconds time.Duration) {
	b.Pipeliner.Cmd(b.builder().PExpireXXCompleted(key, milliseconds))
}

var CommandPExpireGT commandPExpireGT

type commandPExpireGT string
type commandPExpireGTP struct{ Pipeliner }

func (commandPExpireGT) String() string                  { return "PEXPIRE GT" }
func (commandPExpireGT) Class() string                   { return "Generic" }
func (commandPExpireGT) RequireVersion() string          { return "7.0.0" }
func (commandPExpireGT) Forbid() bool                    { return false }
func (commandPExpireGT) WarnVersion() string             { return "0.0.0" }
func (commandPExpireGT) Warning() string                 { return "" }
func (commandPExpireGT) P(p Pipeliner) commandPExpireGTP { return commandPExpireGTP{p} }
func (b commandPExpireGTP) Cmd(key string, milliseconds time.Duration) {
	b.Pipeliner.Cmd(b.builder().PExpireGTCompleted(key, milliseconds))
}

var CommandPExpireLT commandPExpireLT

type commandPExpireLT string
type commandPExpireLTP struct{ Pipeliner }

func (commandPExpireLT) String() string                  { return "PEXPIRE LT" }
func (commandPExpireLT) Class() string                   { return "Generic" }
func (commandPExpireLT) RequireVersion() string          { return "7.0.0" }
func (commandPExpireLT) Forbid() bool                    { return false }
func (commandPExpireLT) WarnVersion() string             { return "0.0.0" }
func (commandPExpireLT) Warning() string                 { return "" }
func (commandPExpireLT) P(p Pipeliner) commandPExpireLTP { return commandPExpireLTP{p} }
func (b commandPExpireLTP) Cmd(key string, milliseconds time.Duration) {
	b.Pipeliner.Cmd(b.builder().PExpireLTCompleted(key, milliseconds))
}

var CommandPExpireAt commandPExpireAt

type commandPExpireAt string
type commandPExpireAtP struct{ Pipeliner }

func (commandPExpireAt) String() string                  { return "PEXPIREAT" }
func (commandPExpireAt) Class() string                   { return "Generic" }
func (commandPExpireAt) RequireVersion() string          { return "2.6.0" }
func (commandPExpireAt) Forbid() bool                    { return false }
func (commandPExpireAt) WarnVersion() string             { return "0.0.0" }
func (commandPExpireAt) Warning() string                 { return "" }
func (commandPExpireAt) P(p Pipeliner) commandPExpireAtP { return commandPExpireAtP{p} }
func (b commandPExpireAtP) Cmd(key string, millisecondsTimestamp time.Time) {
	b.Pipeliner.Cmd(b.builder().PExpireAtCompleted(key, millisecondsTimestamp))
}

var CommandPExpireAtNX commandPExpireAtNX

type commandPExpireAtNX string
type commandPExpireAtNXP struct{ Pipeliner }

func (commandPExpireAtNX) String() string                    { return "PEXPIREAT NX" }
func (commandPExpireAtNX) Class() string                     { return "Generic" }
func (commandPExpireAtNX) RequireVersion() string            { return "7.0.0" }
func (commandPExpireAtNX) Forbid() bool                      { return false }
func (commandPExpireAtNX) WarnVersion() string               { return "0.0.0" }
func (commandPExpireAtNX) Warning() string                   { return "" }
func (commandPExpireAtNX) P(p Pipeliner) commandPExpireAtNXP { return commandPExpireAtNXP{p} }
func (b commandPExpireAtNXP) Cmd(key string, millisecondsTimestamp time.Time) {
	b.Pipeliner.Cmd(b.builder().PExpireAtNXCompleted(key, millisecondsTimestamp))
}

var CommandPExpireAtXX commandPExpireAtXX

type commandPExpireAtXX string
type commandPExpireAtXXP struct{ Pipeliner }

func (commandPExpireAtXX) String() string                    { return "PEXPIREAT XX" }
func (commandPExpireAtXX) Class() string                     { return "Generic" }
func (commandPExpireAtXX) RequireVersion() string            { return "7.0.0" }
func (commandPExpireAtXX) Forbid() bool                      { return false }
func (commandPExpireAtXX) WarnVersion() string               { return "0.0.0" }
func (commandPExpireAtXX) Warning() string                   { return "" }
func (commandPExpireAtXX) P(p Pipeliner) commandPExpireAtXXP { return commandPExpireAtXXP{p} }
func (b commandPExpireAtXXP) Cmd(key string, millisecondsTimestamp time.Time) {
	b.Pipeliner.Cmd(b.builder().PExpireAtXXCompleted(key, millisecondsTimestamp))
}

var CommandPExpireAtGT commandPExpireAtGT

type commandPExpireAtGT string
type commandPExpireAtGTP struct{ Pipeliner }

func (commandPExpireAtGT) String() string                    { return "PEXPIREAT GT" }
func (commandPExpireAtGT) Class() string                     { return "Generic" }
func (commandPExpireAtGT) RequireVersion() string            { return "7.0.0" }
func (commandPExpireAtGT) Forbid() bool                      { return false }
func (commandPExpireAtGT) WarnVersion() string               { return "0.0.0" }
func (commandPExpireAtGT) Warning() string                   { return "" }
func (commandPExpireAtGT) P(p Pipeliner) commandPExpireAtGTP { return commandPExpireAtGTP{p} }
func (b commandPExpireAtGTP) Cmd(key string, millisecondsTimestamp time.Time) {
	b.Pipeliner.Cmd(b.builder().PExpireAtGTCompleted(key, millisecondsTimestamp))
}

var CommandPExpireAtLT commandPExpireAtLT

type commandPExpireAtLT string
type commandPExpireAtLTP struct{ Pipeliner }

func (commandPExpireAtLT) String() string                    { return "PEXPIREAT LT" }
func (commandPExpireAtLT) Class() string                     { return "Generic" }
func (commandPExpireAtLT) RequireVersion() string            { return "7.0.0" }
func (commandPExpireAtLT) Forbid() bool                      { return false }
func (commandPExpireAtLT) WarnVersion() string               { return "0.0.0" }
func (commandPExpireAtLT) Warning() string                   { return "" }
func (commandPExpireAtLT) P(p Pipeliner) commandPExpireAtLTP { return commandPExpireAtLTP{p} }
func (b commandPExpireAtLTP) Cmd(key string, millisecondsTimestamp time.Time) {
	b.Pipeliner.Cmd(b.builder().PExpireAtLTCompleted(key, millisecondsTimestamp))
}

var CommandPExpireTime commandPExpireTime

type commandPExpireTime string
type commandPExpireTimeP struct{ Pipeliner }

func (commandPExpireTime) String() string                    { return "PEXPIRETIME" }
func (commandPExpireTime) Class() string                     { return "Generic" }
func (commandPExpireTime) RequireVersion() string            { return "7.0.0" }
func (commandPExpireTime) Forbid() bool                      { return false }
func (commandPExpireTime) WarnVersion() string               { return "0.0.0" }
func (commandPExpireTime) Warning() string                   { return "" }
func (commandPExpireTime) P(p Pipeliner) commandPExpireTimeP { return commandPExpireTimeP{p} }
func (b commandPExpireTimeP) Cmd(key string)                 { b.Pipeliner.Cmd(b.builder().PExpireTimeCompleted(key)) }

var CommandPTTL commandPTTL

type commandPTTL string
type commandPTTLP struct{ Pipeliner }

func (commandPTTL) String() string             { return "PTTL" }
func (commandPTTL) Class() string              { return "Generic" }
func (commandPTTL) RequireVersion() string     { return "2.6.0" }
func (commandPTTL) Forbid() bool               { return false }
func (commandPTTL) WarnVersion() string        { return "0.0.0" }
func (commandPTTL) Warning() string            { return "" }
func (commandPTTL) P(p Pipeliner) commandPTTLP { return commandPTTLP{p} }
func (b commandPTTLP) Cmd(key string)          { b.Pipeliner.Cmd(b.builder().PTTLCompleted(key)) }

var CommandRandomKey commandRandomKey

type commandRandomKey string
type commandRandomKeyP struct{ Pipeliner }

func (commandRandomKey) String() string                  { return "RANDOMKEY" }
func (commandRandomKey) Class() string                   { return "Generic" }
func (commandRandomKey) RequireVersion() string          { return "1.0.0" }
func (commandRandomKey) Forbid() bool                    { return false }
func (commandRandomKey) WarnVersion() string             { return "0.0.0" }
func (commandRandomKey) Warning() string                 { return "" }
func (commandRandomKey) P(p Pipeliner) commandRandomKeyP { return commandRandomKeyP{p} }
func (b commandRandomKeyP) Cmd()                         { b.Pipeliner.Cmd(b.builder().RandomKeyCompleted()) }

var CommandRename commandRename

type commandRename string
type commandRenameP struct{ Pipeliner }

func (commandRename) String() string               { return "RENAME" }
func (commandRename) Class() string                { return "Generic" }
func (commandRename) RequireVersion() string       { return "1.0.0" }
func (commandRename) Forbid() bool                 { return false }
func (commandRename) WarnVersion() string          { return "0.0.0" }
func (commandRename) Warning() string              { return "" }
func (commandRename) P(p Pipeliner) commandRenameP { return commandRenameP{p} }
func (b commandRenameP) Cmd(key, newkey string) {
	b.Pipeliner.Cmd(b.builder().RenameCompleted(key, newkey))
}

var CommandRenameNX commandRenameNX

type commandRenameNX string
type commandRenameNXP struct{ Pipeliner }

func (commandRenameNX) String() string                 { return "RENAMENX" }
func (commandRenameNX) Class() string                  { return "Generic" }
func (commandRenameNX) RequireVersion() string         { return "1.0.0" }
func (commandRenameNX) Forbid() bool                   { return false }
func (commandRenameNX) WarnVersion() string            { return "0.0.0" }
func (commandRenameNX) Warning() string                { return "" }
func (commandRenameNX) P(p Pipeliner) commandRenameNXP { return commandRenameNXP{p} }
func (b commandRenameNXP) Cmd(key, newkey string) {
	b.Pipeliner.Cmd(b.builder().RenameNXCompleted(key, newkey))
}

var CommandRestore commandRestore

type commandRestore string
type commandRestoreP struct{ Pipeliner }

func (commandRestore) String() string                { return "RESTORE" }
func (commandRestore) Class() string                 { return "Generic" }
func (commandRestore) RequireVersion() string        { return "2.6.0" }
func (commandRestore) Forbid() bool                  { return true }
func (commandRestore) WarnVersion() string           { return "0.0.0" }
func (commandRestore) Warning() string               { return "" }
func (commandRestore) P(p Pipeliner) commandRestoreP { return commandRestoreP{p} }
func (b commandRestoreP) Cmd(key string, ttl time.Duration, serializedValue string) {
	b.Pipeliner.Cmd(b.builder().RestoreCompleted(key, ttl, serializedValue))
}

var CommandRestoreReplace commandRestoreReplace

type commandRestoreReplace string
type commandRestoreReplaceP struct{ Pipeliner }

func (commandRestoreReplace) String() string                       { return "RESTORE REPLACE" }
func (commandRestoreReplace) Class() string                        { return "Generic" }
func (commandRestoreReplace) RequireVersion() string               { return "3.0.0" }
func (commandRestoreReplace) Forbid() bool                         { return true }
func (commandRestoreReplace) WarnVersion() string                  { return "0.0.0" }
func (commandRestoreReplace) Warning() string                      { return "" }
func (commandRestoreReplace) P(p Pipeliner) commandRestoreReplaceP { return commandRestoreReplaceP{p} }
func (b commandRestoreReplaceP) Cmd(key string, ttl time.Duration, serializedValue string) {
	b.Pipeliner.Cmd(b.builder().RestoreReplaceCompleted(key, ttl, serializedValue))
}

var CommandScan commandScan

type commandScan string
type commandScanP struct{ Pipeliner }

func (commandScan) String() string             { return "SCAN" }
func (commandScan) Class() string              { return "Generic" }
func (commandScan) RequireVersion() string     { return "2.8.0" }
func (commandScan) Forbid() bool               { return false }
func (commandScan) WarnVersion() string        { return "0.0.0" }
func (commandScan) Warning() string            { return "" }
func (commandScan) P(p Pipeliner) commandScanP { return commandScanP{p} }
func (b commandScanP) Cmd(cursor uint64, match string, count int64) {
	b.Pipeliner.Cmd(b.builder().ScanCompleted(cursor, match, count))
}

var CommandScanType commandScanType

type commandScanType string
type commandScanTypeP struct{ Pipeliner }

func (commandScanType) String() string                 { return "SCAN TYPE" }
func (commandScanType) Class() string                  { return "Generic" }
func (commandScanType) RequireVersion() string         { return "6.0.0" }
func (commandScanType) Forbid() bool                   { return false }
func (commandScanType) WarnVersion() string            { return "0.0.0" }
func (commandScanType) Warning() string                { return "" }
func (commandScanType) P(p Pipeliner) commandScanTypeP { return commandScanTypeP{p} }
func (b commandScanTypeP) Cmd(cursor uint64, match string, count int64, keyType string) {
	b.Pipeliner.Cmd(b.builder().ScanTypeCompleted(cursor, match, count, keyType))
}

var CommandSort commandSort

type commandSort string

func (commandSort) String() string         { return "SORT" }
func (commandSort) Class() string          { return "Generic" }
func (commandSort) RequireVersion() string { return "1.0.0" }
func (commandSort) Forbid() bool           { return true }
func (commandSort) WarnVersion() string    { return "0.0.0" }
func (commandSort) Warning() string        { return "" }

var CommandSortStore commandSortStore

type commandSortStore string

func (commandSortStore) String() string         { return "SORT STORE" }
func (commandSortStore) Class() string          { return "Generic" }
func (commandSortStore) RequireVersion() string { return "1.0.0" }
func (commandSortStore) Forbid() bool           { return true }
func (commandSortStore) WarnVersion() string    { return "0.0.0" }
func (commandSortStore) Warning() string        { return "" }

var CommandSortRO commandSortRO

type commandSortRO string

func (commandSortRO) String() string         { return "SORT_RO" }
func (commandSortRO) Class() string          { return "Generic" }
func (commandSortRO) RequireVersion() string { return "7.0.0" }
func (commandSortRO) Forbid() bool           { return true }
func (commandSortRO) WarnVersion() string    { return "0.0.0" }
func (commandSortRO) Warning() string        { return "" }

var CommandTouch commandTouch

type commandTouch string
type commandTouchP struct{ Pipeliner }

func (commandTouch) String() string              { return "TOUCH" }
func (commandTouch) Class() string               { return "Generic" }
func (commandTouch) RequireVersion() string      { return "3.2.1" }
func (commandTouch) Forbid() bool                { return false }
func (commandTouch) WarnVersion() string         { return "0.0.0" }
func (commandTouch) Warning() string             { return "" }
func (commandTouch) P(p Pipeliner) commandTouchP { return commandTouchP{p} }
func (b commandTouchP) Cmd(keys ...string)       { b.Pipeliner.Cmd(b.builder().TouchCompleted(keys...)) }

var CommandTTL commandTTL

type commandTTL string
type commandTTLP struct{ Pipeliner }

func (commandTTL) String() string            { return "TTL" }
func (commandTTL) Class() string             { return "Generic" }
func (commandTTL) RequireVersion() string    { return "1.0.0" }
func (commandTTL) Forbid() bool              { return false }
func (commandTTL) WarnVersion() string       { return "0.0.0" }
func (commandTTL) Warning() string           { return "" }
func (commandTTL) P(p Pipeliner) commandTTLP { return commandTTLP{p} }
func (b commandTTLP) Cmd(key string)         { b.Pipeliner.Cmd(b.builder().TTLCompleted(key)) }

var CommandType commandType

type commandType string
type commandTypeP struct{ Pipeliner }

func (commandType) String() string             { return "TYPE" }
func (commandType) Class() string              { return "Generic" }
func (commandType) RequireVersion() string     { return "1.0.0" }
func (commandType) Forbid() bool               { return false }
func (commandType) WarnVersion() string        { return "0.0.0" }
func (commandType) Warning() string            { return "" }
func (commandType) P(p Pipeliner) commandTypeP { return commandTypeP{p} }
func (b commandTypeP) Cmd(key string)          { b.Pipeliner.Cmd(b.builder().TypeCompleted(key)) }

var CommandUnlink commandUnlink

type commandUnlink string
type commandUnlinkP struct{ Pipeliner }

func (commandUnlink) String() string               { return "UNLINK" }
func (commandUnlink) Class() string                { return "Generic" }
func (commandUnlink) RequireVersion() string       { return "4.0.0" }
func (commandUnlink) Forbid() bool                 { return false }
func (commandUnlink) WarnVersion() string          { return "0.0.0" }
func (commandUnlink) Warning() string              { return "" }
func (commandUnlink) P(p Pipeliner) commandUnlinkP { return commandUnlinkP{p} }
func (b commandUnlinkP) Cmd(keys ...string)        { b.Pipeliner.Cmd(b.builder().UnlinkCompleted(keys...)) }

var CommandGeoAdd commandGeoAdd

type commandGeoAdd string
type commandGeoAddP struct{ Pipeliner }

func (commandGeoAdd) String() string               { return "GEOADD" }
func (commandGeoAdd) Class() string                { return "Geospatial" }
func (commandGeoAdd) RequireVersion() string       { return "3.2.0" }
func (commandGeoAdd) Forbid() bool                 { return false }
func (commandGeoAdd) WarnVersion() string          { return "0.0.0" }
func (commandGeoAdd) Warning() string              { return "" }
func (commandGeoAdd) P(p Pipeliner) commandGeoAddP { return commandGeoAddP{p} }
func (b commandGeoAddP) Cmd(key string, geoLocation ...GeoLocation) {
	b.Pipeliner.Cmd(b.builder().GeoAddCompleted(key, geoLocation...))
}

var CommandGeoDist commandGeoDist

type commandGeoDist string
type commandGeoDistP struct{ Pipeliner }

func (commandGeoDist) String() string                { return "GEODIST" }
func (commandGeoDist) Class() string                 { return "Geospatial" }
func (commandGeoDist) RequireVersion() string        { return "3.2.0" }
func (commandGeoDist) Forbid() bool                  { return false }
func (commandGeoDist) WarnVersion() string           { return "0.0.0" }
func (commandGeoDist) Warning() string               { return "" }
func (commandGeoDist) P(p Pipeliner) commandGeoDistP { return commandGeoDistP{p} }
func (b commandGeoDistP) Cmd(key, member1, member2, unit string) {
	b.Pipeliner.Cmd(b.builder().GeoDistCompleted(key, member1, member2, unit))
}

var CommandGeoHash commandGeoHash

type commandGeoHash string
type commandGeoHashP struct{ Pipeliner }

func (commandGeoHash) String() string                { return "GEOHASH" }
func (commandGeoHash) Class() string                 { return "Geospatial" }
func (commandGeoHash) RequireVersion() string        { return "3.2.0" }
func (commandGeoHash) Forbid() bool                  { return false }
func (commandGeoHash) WarnVersion() string           { return "0.0.0" }
func (commandGeoHash) Warning() string               { return "" }
func (commandGeoHash) P(p Pipeliner) commandGeoHashP { return commandGeoHashP{p} }
func (b commandGeoHashP) Cmd(key string, members ...string) {
	b.Pipeliner.Cmd(b.builder().GeoHashCompleted(key, members...))
}

var CommandGeoPos commandGeoPos

type commandGeoPos string
type commandGeoPosP struct{ Pipeliner }

func (commandGeoPos) String() string               { return "GEOPOS" }
func (commandGeoPos) Class() string                { return "Geospatial" }
func (commandGeoPos) RequireVersion() string       { return "3.2.0" }
func (commandGeoPos) Forbid() bool                 { return false }
func (commandGeoPos) WarnVersion() string          { return "0.0.0" }
func (commandGeoPos) Warning() string              { return "" }
func (commandGeoPos) P(p Pipeliner) commandGeoPosP { return commandGeoPosP{p} }
func (b commandGeoPosP) Cmd(key string, members ...string) {
	b.Pipeliner.Cmd(b.builder().GeoPosCompleted(key, members...))
}

var CommandGeoRadiusRO commandGeoRadiusRO

type commandGeoRadiusRO string

func (commandGeoRadiusRO) String() string         { return "GEORADIUS_RO" }
func (commandGeoRadiusRO) Class() string          { return "Geospatial" }
func (commandGeoRadiusRO) RequireVersion() string { return "3.2.10" }
func (commandGeoRadiusRO) Forbid() bool           { return false }
func (commandGeoRadiusRO) WarnVersion() string    { return "6.2.0" }
func (commandGeoRadiusRO) Warning() string        { return commandGeoRadiusROWarning }

var CommandGeoRadiusStore commandGeoRadiusStore

type commandGeoRadiusStore string

func (commandGeoRadiusStore) String() string         { return "GEORADIUS" }
func (commandGeoRadiusStore) Class() string          { return "Geospatial" }
func (commandGeoRadiusStore) RequireVersion() string { return "3.2.0" }
func (commandGeoRadiusStore) Forbid() bool           { return false }
func (commandGeoRadiusStore) WarnVersion() string    { return "6.2.0" }
func (commandGeoRadiusStore) Warning() string        { return commandGeoRadiusStoreWarning }

var CommandGeoRadiusByMemberRO commandGeoRadiusByMemberRO

type commandGeoRadiusByMemberRO string

func (commandGeoRadiusByMemberRO) String() string         { return "GEORADIUSBYMEMBER_RO" }
func (commandGeoRadiusByMemberRO) Class() string          { return "Geospatial" }
func (commandGeoRadiusByMemberRO) RequireVersion() string { return "3.2.10" }
func (commandGeoRadiusByMemberRO) Forbid() bool           { return false }
func (commandGeoRadiusByMemberRO) WarnVersion() string    { return "6.2.0" }
func (commandGeoRadiusByMemberRO) Warning() string        { return commandGeoRadiusByMemberROWarning }

var CommandGeoRadiusByMemberStore commandGeoRadiusByMemberStore

type commandGeoRadiusByMemberStore string

func (commandGeoRadiusByMemberStore) String() string         { return "GEORADIUSBYMEMBER" }
func (commandGeoRadiusByMemberStore) Class() string          { return "Geospatial" }
func (commandGeoRadiusByMemberStore) RequireVersion() string { return "6.2.0" }
func (commandGeoRadiusByMemberStore) Forbid() bool           { return false }
func (commandGeoRadiusByMemberStore) WarnVersion() string    { return "6.2.0" }
func (commandGeoRadiusByMemberStore) Warning() string        { return commandGeoRadiusByMemberStoreWarning }

var CommandGeoSearch commandGeoSearch

type commandGeoSearch string
type commandGeoSearchP struct{ Pipeliner }

func (commandGeoSearch) String() string                  { return "GEOSEARCH" }
func (commandGeoSearch) Class() string                   { return "Geospatial" }
func (commandGeoSearch) RequireVersion() string          { return "6.2.0" }
func (commandGeoSearch) Forbid() bool                    { return false }
func (commandGeoSearch) WarnVersion() string             { return "0.0.0" }
func (commandGeoSearch) Warning() string                 { return "" }
func (commandGeoSearch) P(p Pipeliner) commandGeoSearchP { return commandGeoSearchP{p} }
func (b commandGeoSearchP) Cmd(key string, q GeoSearchQuery) {
	b.Pipeliner.Cmd(b.builder().GeoSearchCompleted(key, q))
}

var CommandGeoSearchStore commandGeoSearchStore

type commandGeoSearchStore string
type commandGeoSearchStoreP struct{ Pipeliner }

func (commandGeoSearchStore) String() string                       { return "GEOSEARCHSTORE" }
func (commandGeoSearchStore) Class() string                        { return "Geospatial" }
func (commandGeoSearchStore) RequireVersion() string               { return "6.2.0" }
func (commandGeoSearchStore) Forbid() bool                         { return false }
func (commandGeoSearchStore) WarnVersion() string                  { return "0.0.0" }
func (commandGeoSearchStore) Warning() string                      { return "" }
func (commandGeoSearchStore) P(p Pipeliner) commandGeoSearchStoreP { return commandGeoSearchStoreP{p} }
func (b commandGeoSearchStoreP) Cmd(src, dest string, q GeoSearchStoreQuery) {
	b.Pipeliner.Cmd(b.builder().GeoSearchStoreCompleted(src, dest, q))
}

var CommandHDel commandHDel

type commandHDel string
type commandHDelP struct{ Pipeliner }

func (commandHDel) String() string             { return "HDEL" }
func (commandHDel) Class() string              { return "Hash" }
func (commandHDel) RequireVersion() string     { return "2.0.0" }
func (commandHDel) Forbid() bool               { return false }
func (commandHDel) WarnVersion() string        { return "0.0.0" }
func (commandHDel) Warning() string            { return "" }
func (commandHDel) P(p Pipeliner) commandHDelP { return commandHDelP{p} }
func (b commandHDelP) Cmd(key, field string)   { b.Pipeliner.Cmd(b.builder().HDelCompleted(key, field)) }

var CommandHMDel commandHMDel

type commandHMDel string
type commandHMDelP struct{ Pipeliner }

func (commandHMDel) String() string              { return "HDEL" }
func (commandHMDel) Class() string               { return "Hash" }
func (commandHMDel) RequireVersion() string      { return "2.4.0" }
func (commandHMDel) Forbid() bool                { return false }
func (commandHMDel) WarnVersion() string         { return "0.0.0" }
func (commandHMDel) Warning() string             { return "" }
func (commandHMDel) P(p Pipeliner) commandHMDelP { return commandHMDelP{p} }
func (b commandHMDelP) Cmd(key string, fields ...string) {
	b.Pipeliner.Cmd(b.builder().HDelCompleted(key, fields...))
}

var CommandHExists commandHExists

type commandHExists string
type commandHExistsP struct{ Pipeliner }

func (commandHExists) String() string                { return "HEXISTS" }
func (commandHExists) Class() string                 { return "Hash" }
func (commandHExists) RequireVersion() string        { return "2.0.0" }
func (commandHExists) Forbid() bool                  { return false }
func (commandHExists) WarnVersion() string           { return "0.0.0" }
func (commandHExists) Warning() string               { return "" }
func (commandHExists) P(p Pipeliner) commandHExistsP { return commandHExistsP{p} }
func (b commandHExistsP) Cmd(key, field string) {
	b.Pipeliner.Cmd(b.builder().HExistsCompleted(key, field))
}

var CommandHExpire commandHExpire

type commandHExpire string
type commandHExpireP struct{ Pipeliner }

func (commandHExpire) String() string                { return "HEXPIRE" }
func (commandHExpire) Class() string                 { return "Hash" }
func (commandHExpire) RequireVersion() string        { return "7.4.0" }
func (commandHExpire) Forbid() bool                  { return false }
func (commandHExpire) WarnVersion() string           { return "0.0.0" }
func (commandHExpire) Warning() string               { return "" }
func (commandHExpire) P(p Pipeliner) commandHExpireP { return commandHExpireP{p} }
func (b commandHExpireP) Cmd(key string, seconds time.Duration, fields ...string) {
	b.Pipeliner.Cmd(b.builder().HExpireCompleted(key, seconds, fields...))
}

var CommandHExpireNX commandHExpireNX

type commandHExpireNX string
type commandHExpireNXP struct{ Pipeliner }

func (commandHExpireNX) String() string                  { return "HEXPIRE NX" }
func (commandHExpireNX) Class() string                   { return "Hash" }
func (commandHExpireNX) RequireVersion() string          { return "7.4.0" }
func (commandHExpireNX) Forbid() bool                    { return false }
func (commandHExpireNX) WarnVersion() string             { return "0.0.0" }
func (commandHExpireNX) Warning() string                 { return "" }
func (commandHExpireNX) P(p Pipeliner) commandHExpireNXP { return commandHExpireNXP{p} }
func (b commandHExpireNXP) Cmd(key string, seconds time.Duration, fields ...string) {
	b.Pipeliner.Cmd(b.builder().HExpireNXCompleted(key, seconds, fields...))
}

var CommandHExpireXX commandHExpireXX

type commandHExpireXX string
type commandHExpireXXP struct{ Pipeliner }

func (commandHExpireXX) String() string                  { return "HEXPIRE XX" }
func (commandHExpireXX) Class() string                   { return "Hash" }
func (commandHExpireXX) RequireVersion() string          { return "7.4.0" }
func (commandHExpireXX) Forbid() bool                    { return false }
func (commandHExpireXX) WarnVersion() string             { return "0.0.0" }
func (commandHExpireXX) Warning() string                 { return "" }
func (commandHExpireXX) P(p Pipeliner) commandHExpireXXP { return commandHExpireXXP{p} }
func (b commandHExpireXXP) Cmd(key string, seconds time.Duration, fields ...string) {
	b.Pipeliner.Cmd(b.builder().HExpireXXCompleted(key, seconds, fields...))
}

var CommandHExpireGT commandHExpireGT

type commandHExpireGT string
type commandHExpireGTP struct{ Pipeliner }

func (commandHExpireGT) String() string                  { return "HEXPIRE GT" }
func (commandHExpireGT) Class() string                   { return "Hash" }
func (commandHExpireGT) RequireVersion() string          { return "7.4.0" }
func (commandHExpireGT) Forbid() bool                    { return false }
func (commandHExpireGT) WarnVersion() string             { return "0.0.0" }
func (commandHExpireGT) Warning() string                 { return "" }
func (commandHExpireGT) P(p Pipeliner) commandHExpireGTP { return commandHExpireGTP{p} }
func (b commandHExpireGTP) Cmd(key string, seconds time.Duration, fields ...string) {
	b.Pipeliner.Cmd(b.builder().HExpireGTCompleted(key, seconds, fields...))
}

var CommandHExpireLT commandHExpireLT

type commandHExpireLT string
type commandHExpireLTP struct{ Pipeliner }

func (commandHExpireLT) String() string                  { return "HEXPIRE LT" }
func (commandHExpireLT) Class() string                   { return "Hash" }
func (commandHExpireLT) RequireVersion() string          { return "7.4.0" }
func (commandHExpireLT) Forbid() bool                    { return false }
func (commandHExpireLT) WarnVersion() string             { return "0.0.0" }
func (commandHExpireLT) Warning() string                 { return "" }
func (commandHExpireLT) P(p Pipeliner) commandHExpireLTP { return commandHExpireLTP{p} }
func (b commandHExpireLTP) Cmd(key string, seconds time.Duration, fields ...string) {
	b.Pipeliner.Cmd(b.builder().HExpireLTCompleted(key, seconds, fields...))
}

var CommandHExpireAt commandHExpireAt

type commandHExpireAt string
type commandHExpireAtP struct{ Pipeliner }

func (commandHExpireAt) String() string                  { return "HEXPIREAT" }
func (commandHExpireAt) Class() string                   { return "Hash" }
func (commandHExpireAt) RequireVersion() string          { return "7.4.0" }
func (commandHExpireAt) Forbid() bool                    { return false }
func (commandHExpireAt) WarnVersion() string             { return "0.0.0" }
func (commandHExpireAt) Warning() string                 { return "" }
func (commandHExpireAt) P(p Pipeliner) commandHExpireAtP { return commandHExpireAtP{p} }
func (b commandHExpireAtP) Cmd(key string, tm time.Time, fields ...string) {
	b.Pipeliner.Cmd(b.builder().HExpireAtCompleted(key, tm, fields...))
}

var CommandHExpireAtNX commandHExpireAtNX

type commandHExpireAtNX string
type commandHExpireAtNXP struct{ Pipeliner }

func (commandHExpireAtNX) String() string                    { return "HEXPIREAT NX" }
func (commandHExpireAtNX) Class() string                     { return "Hash" }
func (commandHExpireAtNX) RequireVersion() string            { return "7.4.0" }
func (commandHExpireAtNX) Forbid() bool                      { return false }
func (commandHExpireAtNX) WarnVersion() string               { return "0.0.0" }
func (commandHExpireAtNX) Warning() string                   { return "" }
func (commandHExpireAtNX) P(p Pipeliner) commandHExpireAtNXP { return commandHExpireAtNXP{p} }
func (b commandHExpireAtNXP) Cmd(key string, tm time.Time, fields ...string) {
	b.Pipeliner.Cmd(b.builder().HExpireAtNXCompleted(key, tm, fields...))
}

var CommandHExpireAtXX commandHExpireAtXX

type commandHExpireAtXX string
type commandHExpireAtXXP struct{ Pipeliner }

func (commandHExpireAtXX) String() string                    { return "HEXPIREAT XX" }
func (commandHExpireAtXX) Class() string                     { return "Hash" }
func (commandHExpireAtXX) RequireVersion() string            { return "7.4.0" }
func (commandHExpireAtXX) Forbid() bool                      { return false }
func (commandHExpireAtXX) WarnVersion() string               { return "0.0.0" }
func (commandHExpireAtXX) Warning() string                   { return "" }
func (commandHExpireAtXX) P(p Pipeliner) commandHExpireAtXXP { return commandHExpireAtXXP{p} }
func (b commandHExpireAtXXP) Cmd(key string, tm time.Time, fields ...string) {
	b.Pipeliner.Cmd(b.builder().HExpireAtXXCompleted(key, tm, fields...))
}

var CommandHExpireAtGT commandHExpireAtGT

type commandHExpireAtGT string
type commandHExpireAtGTP struct{ Pipeliner }

func (commandHExpireAtGT) String() string                    { return "HEXPIREAT GT" }
func (commandHExpireAtGT) Class() string                     { return "Hash" }
func (commandHExpireAtGT) RequireVersion() string            { return "7.4.0" }
func (commandHExpireAtGT) Forbid() bool                      { return false }
func (commandHExpireAtGT) WarnVersion() string               { return "0.0.0" }
func (commandHExpireAtGT) Warning() string                   { return "" }
func (commandHExpireAtGT) P(p Pipeliner) commandHExpireAtGTP { return commandHExpireAtGTP{p} }
func (b commandHExpireAtGTP) Cmd(key string, tm time.Time, fields ...string) {
	b.Pipeliner.Cmd(b.builder().HExpireAtGTCompleted(key, tm, fields...))
}

var CommandHExpireAtLT commandHExpireAtLT

type commandHExpireAtLT string
type commandHExpireAtLTP struct{ Pipeliner }

func (commandHExpireAtLT) String() string                    { return "HEXPIREAT LT" }
func (commandHExpireAtLT) Class() string                     { return "Hash" }
func (commandHExpireAtLT) RequireVersion() string            { return "7.4.0" }
func (commandHExpireAtLT) Forbid() bool                      { return false }
func (commandHExpireAtLT) WarnVersion() string               { return "0.0.0" }
func (commandHExpireAtLT) Warning() string                   { return "" }
func (commandHExpireAtLT) P(p Pipeliner) commandHExpireAtLTP { return commandHExpireAtLTP{p} }
func (b commandHExpireAtLTP) Cmd(key string, tm time.Time, fields ...string) {
	b.Pipeliner.Cmd(b.builder().HExpireAtLTCompleted(key, tm, fields...))
}

var CommandHExpireTime commandHExpireTime

type commandHExpireTime string
type commandHExpireTimeP struct{ Pipeliner }

func (commandHExpireTime) String() string                    { return "HEXPIRETIME" }
func (commandHExpireTime) Class() string                     { return "Hash" }
func (commandHExpireTime) RequireVersion() string            { return "7.4.0" }
func (commandHExpireTime) Forbid() bool                      { return false }
func (commandHExpireTime) WarnVersion() string               { return "0.0.0" }
func (commandHExpireTime) Warning() string                   { return "" }
func (commandHExpireTime) P(p Pipeliner) commandHExpireTimeP { return commandHExpireTimeP{p} }
func (b commandHExpireTimeP) Cmd(key string, fields ...string) {
	b.Pipeliner.Cmd(b.builder().HExpireTimeCompleted(key, fields...))
}

var CommandHGet commandHGet

type commandHGet string
type commandHGetP struct{ Pipeliner }

func (commandHGet) String() string             { return "HGET" }
func (commandHGet) Class() string              { return "Hash" }
func (commandHGet) RequireVersion() string     { return "2.0.0" }
func (commandHGet) Forbid() bool               { return false }
func (commandHGet) WarnVersion() string        { return "0.0.0" }
func (commandHGet) Warning() string            { return "" }
func (commandHGet) P(p Pipeliner) commandHGetP { return commandHGetP{p} }
func (b commandHGetP) Cmd(key, field string)   { b.Pipeliner.Cmd(b.builder().HGetCompleted(key, field)) }

var CommandHGetAll commandHGetAll

type commandHGetAll string
type commandHGetAllP struct{ Pipeliner }

func (commandHGetAll) String() string                { return "HGETALL" }
func (commandHGetAll) Class() string                 { return "Hash" }
func (commandHGetAll) RequireVersion() string        { return "2.0.0" }
func (commandHGetAll) Forbid() bool                  { return false }
func (commandHGetAll) WarnVersion() string           { return "0.0.0" }
func (commandHGetAll) Warning() string               { return "" }
func (commandHGetAll) P(p Pipeliner) commandHGetAllP { return commandHGetAllP{p} }
func (b commandHGetAllP) Cmd(key string)             { b.Pipeliner.Cmd(b.builder().HGetAllCompleted(key)) }

var CommandHIncrBy commandHIncrBy

type commandHIncrBy string
type commandHIncrByP struct{ Pipeliner }

func (commandHIncrBy) String() string                { return "HINCRBY" }
func (commandHIncrBy) Class() string                 { return "Hash" }
func (commandHIncrBy) RequireVersion() string        { return "2.0.0" }
func (commandHIncrBy) Forbid() bool                  { return false }
func (commandHIncrBy) WarnVersion() string           { return "0.0.0" }
func (commandHIncrBy) Warning() string               { return "" }
func (commandHIncrBy) P(p Pipeliner) commandHIncrByP { return commandHIncrByP{p} }
func (b commandHIncrByP) Cmd(key, field string, incr int64) {
	b.Pipeliner.Cmd(b.builder().HIncrByCompleted(key, field, incr))
}

var CommandHIncrByFloat commandHIncrByFloat

type commandHIncrByFloat string
type commandHIncrByFloatP struct{ Pipeliner }

func (commandHIncrByFloat) String() string                     { return "HINCRBYFLOAT" }
func (commandHIncrByFloat) Class() string                      { return "Hash" }
func (commandHIncrByFloat) RequireVersion() string             { return "2.6.0" }
func (commandHIncrByFloat) Forbid() bool                       { return false }
func (commandHIncrByFloat) WarnVersion() string                { return "0.0.0" }
func (commandHIncrByFloat) Warning() string                    { return "" }
func (commandHIncrByFloat) P(p Pipeliner) commandHIncrByFloatP { return commandHIncrByFloatP{p} }
func (b commandHIncrByFloatP) Cmd(key, field string, incr float64) {
	b.Pipeliner.Cmd(b.builder().HIncrByFloatCompleted(key, field, incr))
}

var CommandHKeys commandHKeys

type commandHKeys string
type commandHKeysP struct{ Pipeliner }

func (commandHKeys) String() string              { return "HKEYS" }
func (commandHKeys) Class() string               { return "Hash" }
func (commandHKeys) RequireVersion() string      { return "2.0.0" }
func (commandHKeys) Forbid() bool                { return false }
func (commandHKeys) WarnVersion() string         { return "0.0.0" }
func (commandHKeys) Warning() string             { return "" }
func (commandHKeys) P(p Pipeliner) commandHKeysP { return commandHKeysP{p} }
func (b commandHKeysP) Cmd(key string)           { b.Pipeliner.Cmd(b.builder().HKeysCompleted(key)) }

var CommandHLen commandHLen

type commandHLen string
type commandHLenP struct{ Pipeliner }

func (commandHLen) String() string             { return "HLEN" }
func (commandHLen) Class() string              { return "Hash" }
func (commandHLen) RequireVersion() string     { return "2.0.0" }
func (commandHLen) Forbid() bool               { return false }
func (commandHLen) WarnVersion() string        { return "0.0.0" }
func (commandHLen) Warning() string            { return "" }
func (commandHLen) P(p Pipeliner) commandHLenP { return commandHLenP{p} }
func (b commandHLenP) Cmd(key string)          { b.Pipeliner.Cmd(b.builder().HLenCompleted(key)) }

var CommandHMGet commandHMGet

type commandHMGet string
type commandHMGetP struct{ Pipeliner }

func (commandHMGet) String() string              { return "HMGET" }
func (commandHMGet) Class() string               { return "Hash" }
func (commandHMGet) RequireVersion() string      { return "2.0.0" }
func (commandHMGet) Forbid() bool                { return false }
func (commandHMGet) WarnVersion() string         { return "0.0.0" }
func (commandHMGet) Warning() string             { return "" }
func (commandHMGet) P(p Pipeliner) commandHMGetP { return commandHMGetP{p} }
func (b commandHMGetP) Cmd(key string, fields ...string) {
	b.Pipeliner.Cmd(b.builder().HMGetCompleted(key, fields...))
}

var CommandHMSet commandHMSet

type commandHMSet string
type commandHMSetP struct{ Pipeliner }

func (commandHMSet) String() string              { return "HMSET" }
func (commandHMSet) Class() string               { return "Hash" }
func (commandHMSet) RequireVersion() string      { return "2.0.0" }
func (commandHMSet) Forbid() bool                { return false }
func (commandHMSet) WarnVersion() string         { return "4.0.0" }
func (commandHMSet) Warning() string             { return commandHMSetWarning }
func (commandHMSet) P(p Pipeliner) commandHMSetP { return commandHMSetP{p} }
func (b commandHMSetP) Cmd(key string, values ...any) {
	b.Pipeliner.Cmd(b.builder().HMSetCompleted(key, values...))
}

var CommandHPersist commandHPersist

type commandHPersist string
type commandHPersistP struct{ Pipeliner }

func (commandHPersist) String() string                 { return "HPERSIST" }
func (commandHPersist) Class() string                  { return "Hash" }
func (commandHPersist) RequireVersion() string         { return "7.4.0" }
func (commandHPersist) Forbid() bool                   { return false }
func (commandHPersist) WarnVersion() string            { return "0.0.0" }
func (commandHPersist) Warning() string                { return "" }
func (commandHPersist) P(p Pipeliner) commandHPersistP { return commandHPersistP{p} }
func (b commandHPersistP) Cmd(key string, fields ...string) {
	b.Pipeliner.Cmd(b.builder().HPersistCompleted(key, fields...))
}

var CommandHPExpire commandHPExpire

type commandHPExpire string
type commandHPExpireP struct{ Pipeliner }

func (commandHPExpire) String() string                 { return "HPEXPIRE" }
func (commandHPExpire) Class() string                  { return "Hash" }
func (commandHPExpire) RequireVersion() string         { return "7.4.0" }
func (commandHPExpire) Forbid() bool                   { return false }
func (commandHPExpire) WarnVersion() string            { return "0.0.0" }
func (commandHPExpire) Warning() string                { return "" }
func (commandHPExpire) P(p Pipeliner) commandHPExpireP { return commandHPExpireP{p} }
func (b commandHPExpireP) Cmd(key string, milliseconds time.Duration, fields ...string) {
	b.Pipeliner.Cmd(b.builder().HPExpireCompleted(key, milliseconds, fields...))
}

var CommandHPExpireNX commandHPExpireNX

type commandHPExpireNX string
type commandHPExpireNXP struct{ Pipeliner }

func (commandHPExpireNX) String() string                   { return "HPEXPIRE NX" }
func (commandHPExpireNX) Class() string                    { return "Hash" }
func (commandHPExpireNX) RequireVersion() string           { return "7.4.0" }
func (commandHPExpireNX) Forbid() bool                     { return false }
func (commandHPExpireNX) WarnVersion() string              { return "0.0.0" }
func (commandHPExpireNX) Warning() string                  { return "" }
func (commandHPExpireNX) P(p Pipeliner) commandHPExpireNXP { return commandHPExpireNXP{p} }
func (b commandHPExpireNXP) Cmd(key string, milliseconds time.Duration, fields ...string) {
	b.Pipeliner.Cmd(b.builder().HPExpireNXCompleted(key, milliseconds, fields...))
}

var CommandHPExpireXX commandHPExpireXX

type commandHPExpireXX string
type commandHPExpireXXP struct{ Pipeliner }

func (commandHPExpireXX) String() string                   { return "HPEXPIRE XX" }
func (commandHPExpireXX) Class() string                    { return "Hash" }
func (commandHPExpireXX) RequireVersion() string           { return "7.4.0" }
func (commandHPExpireXX) Forbid() bool                     { return false }
func (commandHPExpireXX) WarnVersion() string              { return "0.0.0" }
func (commandHPExpireXX) Warning() string                  { return "" }
func (commandHPExpireXX) P(p Pipeliner) commandHPExpireXXP { return commandHPExpireXXP{p} }
func (b commandHPExpireXXP) Cmd(key string, milliseconds time.Duration, fields ...string) {
	b.Pipeliner.Cmd(b.builder().HPExpireXXCompleted(key, milliseconds, fields...))
}

var CommandHPExpireGT commandHPExpireGT

type commandHPExpireGT string
type commandHPExpireGTP struct{ Pipeliner }

func (commandHPExpireGT) String() string                   { return "HPEXPIRE GT" }
func (commandHPExpireGT) Class() string                    { return "Hash" }
func (commandHPExpireGT) RequireVersion() string           { return "7.4.0" }
func (commandHPExpireGT) Forbid() bool                     { return false }
func (commandHPExpireGT) WarnVersion() string              { return "0.0.0" }
func (commandHPExpireGT) Warning() string                  { return "" }
func (commandHPExpireGT) P(p Pipeliner) commandHPExpireGTP { return commandHPExpireGTP{p} }
func (b commandHPExpireGTP) Cmd(key string, milliseconds time.Duration, fields ...string) {
	b.Pipeliner.Cmd(b.builder().HPExpireGTCompleted(key, milliseconds, fields...))
}

var CommandHPExpireLT commandHPExpireLT

type commandHPExpireLT string
type commandHPExpireLTP struct{ Pipeliner }

func (commandHPExpireLT) String() string                   { return "HPEXPIRE LT" }
func (commandHPExpireLT) Class() string                    { return "Hash" }
func (commandHPExpireLT) RequireVersion() string           { return "7.4.0" }
func (commandHPExpireLT) Forbid() bool                     { return false }
func (commandHPExpireLT) WarnVersion() string              { return "0.0.0" }
func (commandHPExpireLT) Warning() string                  { return "" }
func (commandHPExpireLT) P(p Pipeliner) commandHPExpireLTP { return commandHPExpireLTP{p} }
func (b commandHPExpireLTP) Cmd(key string, milliseconds time.Duration, fields ...string) {
	b.Pipeliner.Cmd(b.builder().HPExpireLTCompleted(key, milliseconds, fields...))
}

var CommandHPExpireAt commandHPExpireAt

type commandHPExpireAt string
type commandHPExpireAtP struct{ Pipeliner }

func (commandHPExpireAt) String() string                   { return "HPEXPIREAT" }
func (commandHPExpireAt) Class() string                    { return "Hash" }
func (commandHPExpireAt) RequireVersion() string           { return "7.4.0" }
func (commandHPExpireAt) Forbid() bool                     { return false }
func (commandHPExpireAt) WarnVersion() string              { return "0.0.0" }
func (commandHPExpireAt) Warning() string                  { return "" }
func (commandHPExpireAt) P(p Pipeliner) commandHPExpireAtP { return commandHPExpireAtP{p} }
func (b commandHPExpireAtP) Cmd(key string, tm time.Time, fields ...string) {
	b.Pipeliner.Cmd(b.builder().HPExpireAtCompleted(key, tm, fields...))
}

var CommandHPExpireAtNX commandHPExpireAtNX

type commandHPExpireAtNX string
type commandHPExpireAtNXP struct{ Pipeliner }

func (commandHPExpireAtNX) String() string                     { return "HPEXPIREAT NX" }
func (commandHPExpireAtNX) Class() string                      { return "Hash" }
func (commandHPExpireAtNX) RequireVersion() string             { return "7.4.0" }
func (commandHPExpireAtNX) Forbid() bool                       { return false }
func (commandHPExpireAtNX) WarnVersion() string                { return "0.0.0" }
func (commandHPExpireAtNX) Warning() string                    { return "" }
func (commandHPExpireAtNX) P(p Pipeliner) commandHPExpireAtNXP { return commandHPExpireAtNXP{p} }
func (b commandHPExpireAtNXP) Cmd(key string, tm time.Time, fields ...string) {
	b.Pipeliner.Cmd(b.builder().HPExpireAtNXCompleted(key, tm, fields...))
}

var CommandHPExpireAtXX commandHPExpireAtXX

type commandHPExpireAtXX string
type commandHPExpireAtXXP struct{ Pipeliner }

func (commandHPExpireAtXX) String() string                     { return "HPEXPIREAT XX" }
func (commandHPExpireAtXX) Class() string                      { return "Hash" }
func (commandHPExpireAtXX) RequireVersion() string             { return "7.4.0" }
func (commandHPExpireAtXX) Forbid() bool                       { return false }
func (commandHPExpireAtXX) WarnVersion() string                { return "0.0.0" }
func (commandHPExpireAtXX) Warning() string                    { return "" }
func (commandHPExpireAtXX) P(p Pipeliner) commandHPExpireAtXXP { return commandHPExpireAtXXP{p} }
func (b commandHPExpireAtXXP) Cmd(key string, tm time.Time, fields ...string) {
	b.Pipeliner.Cmd(b.builder().HPExpireAtXXCompleted(key, tm, fields...))
}

var CommandHPExpireAtGT commandHPExpireAtGT

type commandHPExpireAtGT string
type commandHPExpireAtGTP struct{ Pipeliner }

func (commandHPExpireAtGT) String() string                     { return "HPEXPIREAT GT" }
func (commandHPExpireAtGT) Class() string                      { return "Hash" }
func (commandHPExpireAtGT) RequireVersion() string             { return "7.4.0" }
func (commandHPExpireAtGT) Forbid() bool                       { return false }
func (commandHPExpireAtGT) WarnVersion() string                { return "0.0.0" }
func (commandHPExpireAtGT) Warning() string                    { return "" }
func (commandHPExpireAtGT) P(p Pipeliner) commandHPExpireAtGTP { return commandHPExpireAtGTP{p} }
func (b commandHPExpireAtGTP) Cmd(key string, tm time.Time, fields ...string) {
	b.Pipeliner.Cmd(b.builder().HPExpireAtGTCompleted(key, tm, fields...))
}

var CommandHPExpireAtLT commandHPExpireAtLT

type commandHPExpireAtLT string
type commandHPExpireAtLTP struct{ Pipeliner }

func (commandHPExpireAtLT) String() string                     { return "HPEXPIREAT LT" }
func (commandHPExpireAtLT) Class() string                      { return "Hash" }
func (commandHPExpireAtLT) RequireVersion() string             { return "7.4.0" }
func (commandHPExpireAtLT) Forbid() bool                       { return false }
func (commandHPExpireAtLT) WarnVersion() string                { return "0.0.0" }
func (commandHPExpireAtLT) Warning() string                    { return "" }
func (commandHPExpireAtLT) P(p Pipeliner) commandHPExpireAtLTP { return commandHPExpireAtLTP{p} }
func (b commandHPExpireAtLTP) Cmd(key string, tm time.Time, fields ...string) {
	b.Pipeliner.Cmd(b.builder().HPExpireAtLTCompleted(key, tm, fields...))
}

var CommandHPExpireTime commandHPExpireTime

type commandHPExpireTime string
type commandHPExpireTimeP struct{ Pipeliner }

func (commandHPExpireTime) String() string                     { return "HPEXPIRETIME" }
func (commandHPExpireTime) Class() string                      { return "Hash" }
func (commandHPExpireTime) RequireVersion() string             { return "7.4.0" }
func (commandHPExpireTime) Forbid() bool                       { return false }
func (commandHPExpireTime) WarnVersion() string                { return "0.0.0" }
func (commandHPExpireTime) Warning() string                    { return "" }
func (commandHPExpireTime) P(p Pipeliner) commandHPExpireTimeP { return commandHPExpireTimeP{p} }
func (b commandHPExpireTimeP) Cmd(key string, fields ...string) {
	b.Pipeliner.Cmd(b.builder().HPExpireTimeCompleted(key, fields...))
}

var CommandHTTL commandHTTL

type commandHTTL string
type commandHTTLP struct{ Pipeliner }

func (commandHTTL) String() string             { return "HTTL" }
func (commandHTTL) Class() string              { return "Hash" }
func (commandHTTL) RequireVersion() string     { return "7.4.0" }
func (commandHTTL) Forbid() bool               { return false }
func (commandHTTL) WarnVersion() string        { return "0.0.0" }
func (commandHTTL) Warning() string            { return "" }
func (commandHTTL) P(p Pipeliner) commandHTTLP { return commandHTTLP{p} }
func (b commandHTTLP) Cmd(key string, fields ...string) {
	b.Pipeliner.Cmd(b.builder().HTTLCompleted(key, fields...))
}

var CommandHPTTL commandHPTTL

type commandHPTTL string
type commandHPTTLP struct{ Pipeliner }

func (commandHPTTL) String() string              { return "HPTTL" }
func (commandHPTTL) Class() string               { return "Hash" }
func (commandHPTTL) RequireVersion() string      { return "7.4.0" }
func (commandHPTTL) Forbid() bool                { return false }
func (commandHPTTL) WarnVersion() string         { return "0.0.0" }
func (commandHPTTL) Warning() string             { return "" }
func (commandHPTTL) P(p Pipeliner) commandHPTTLP { return commandHPTTLP{p} }
func (b commandHPTTLP) Cmd(key string, fields ...string) {
	b.Pipeliner.Cmd(b.builder().HPTTLCompleted(key, fields...))
}

var CommandHRandField commandHRandField

type commandHRandField string
type commandHRandFieldP struct{ Pipeliner }

func (commandHRandField) String() string                   { return "HRANDFIELD" }
func (commandHRandField) Class() string                    { return "Hash" }
func (commandHRandField) RequireVersion() string           { return "6.2.0" }
func (commandHRandField) Forbid() bool                     { return false }
func (commandHRandField) WarnVersion() string              { return "0.0.0" }
func (commandHRandField) Warning() string                  { return "" }
func (commandHRandField) P(p Pipeliner) commandHRandFieldP { return commandHRandFieldP{p} }
func (b commandHRandFieldP) Cmd(key string, count int64) {
	b.Pipeliner.Cmd(b.builder().HRandFieldCompleted(key, count))
}

var CommandHRandFieldWithValues commandHRandFieldWithValues

type commandHRandFieldWithValues string
type commandHRandFieldWithValuesP struct{ Pipeliner }

func (commandHRandFieldWithValues) String() string         { return "HRANDFIELD WITHVALUES" }
func (commandHRandFieldWithValues) Class() string          { return "Hash" }
func (commandHRandFieldWithValues) RequireVersion() string { return "6.2.0" }
func (commandHRandFieldWithValues) Forbid() bool           { return false }
func (commandHRandFieldWithValues) WarnVersion() string    { return "0.0.0" }
func (commandHRandFieldWithValues) Warning() string        { return "" }
func (commandHRandFieldWithValues) P(p Pipeliner) commandHRandFieldWithValuesP {
	return commandHRandFieldWithValuesP{p}
}
func (b commandHRandFieldWithValuesP) Cmd(key string, count int64) {
	b.Pipeliner.Cmd(b.builder().HRandFieldWithValuesCompleted(key, count))
}

var CommandHScan commandHScan

type commandHScan string
type commandHScanP struct{ Pipeliner }

func (commandHScan) String() string              { return "HSCAN" }
func (commandHScan) Class() string               { return "Hash" }
func (commandHScan) RequireVersion() string      { return "2.8.0" }
func (commandHScan) Forbid() bool                { return false }
func (commandHScan) WarnVersion() string         { return "0.0.0" }
func (commandHScan) Warning() string             { return "" }
func (commandHScan) P(p Pipeliner) commandHScanP { return commandHScanP{p} }
func (b commandHScanP) Cmd(key string, cursor uint64, match string, count int64) {
	b.Pipeliner.Cmd(b.builder().HScanCompleted(key, cursor, match, count))
}

var CommandHSet commandHSet

type commandHSet string
type commandHSetP struct{ Pipeliner }

func (commandHSet) String() string             { return "HSET" }
func (commandHSet) Class() string              { return "Hash" }
func (commandHSet) RequireVersion() string     { return "2.8.0" }
func (commandHSet) Forbid() bool               { return false }
func (commandHSet) WarnVersion() string        { return "0.0.0" }
func (commandHSet) Warning() string            { return "" }
func (commandHSet) P(p Pipeliner) commandHSetP { return commandHSetP{p} }
func (b commandHSetP) Cmd(key, field, value string) {
	b.Pipeliner.Cmd(b.builder().HSetCompleted(key, field, value))
}

var CommandHMSetX commandHMSetX

type commandHMSetX string
type commandHMSetXP struct{ Pipeliner }

func (commandHMSetX) String() string               { return "HSET" }
func (commandHMSetX) Class() string                { return "Hash" }
func (commandHMSetX) RequireVersion() string       { return "4.0.0" }
func (commandHMSetX) Forbid() bool                 { return false }
func (commandHMSetX) WarnVersion() string          { return "0.0.0" }
func (commandHMSetX) Warning() string              { return "" }
func (commandHMSetX) P(p Pipeliner) commandHMSetXP { return commandHMSetXP{p} }
func (b commandHMSetXP) Cmd(key string, values ...any) {
	b.Pipeliner.Cmd(b.builder().HMSetXCompleted(key, values...))
}

var CommandHSetNX commandHSetNX

type commandHSetNX string
type commandHSetNXP struct{ Pipeliner }

func (commandHSetNX) String() string               { return "HSETNX" }
func (commandHSetNX) Class() string                { return "Hash" }
func (commandHSetNX) RequireVersion() string       { return "2.0.0" }
func (commandHSetNX) Forbid() bool                 { return false }
func (commandHSetNX) WarnVersion() string          { return "0.0.0" }
func (commandHSetNX) Warning() string              { return "" }
func (commandHSetNX) P(p Pipeliner) commandHSetNXP { return commandHSetNXP{p} }
func (b commandHSetNXP) Cmd(key, field string, value any) {
	b.Pipeliner.Cmd(b.builder().HSetNXCompleted(key, field, value))
}

var CommandHVals commandHVals

type commandHVals string
type commandHValsP struct{ Pipeliner }

func (commandHVals) String() string              { return "HVALS" }
func (commandHVals) Class() string               { return "Hash" }
func (commandHVals) RequireVersion() string      { return "2.0.0" }
func (commandHVals) Forbid() bool                { return false }
func (commandHVals) WarnVersion() string         { return "0.0.0" }
func (commandHVals) Warning() string             { return "" }
func (commandHVals) P(p Pipeliner) commandHValsP { return commandHValsP{p} }
func (b commandHValsP) Cmd(key string)           { b.Pipeliner.Cmd(b.builder().HValsCompleted(key)) }

var CommandHStrLen commandHStrLen

type commandHStrLen string
type commandHStrLenP struct{ Pipeliner }

func (commandHStrLen) String() string                { return "HSTRLEN" }
func (commandHStrLen) Class() string                 { return "Hash" }
func (commandHStrLen) RequireVersion() string        { return "3.2.0" }
func (commandHStrLen) Forbid() bool                  { return false }
func (commandHStrLen) WarnVersion() string           { return "0.0.0" }
func (commandHStrLen) Warning() string               { return "" }
func (commandHStrLen) P(p Pipeliner) commandHStrLenP { return commandHStrLenP{p} }
func (b commandHStrLenP) Cmd(key, field string) {
	b.Pipeliner.Cmd(b.builder().HStrLenCompleted(key, field))
}

var CommandPFAdd commandPFAdd

type commandPFAdd string
type commandPFAddP struct{ Pipeliner }

func (commandPFAdd) String() string              { return "PFADD" }
func (commandPFAdd) Class() string               { return "HyperLog" }
func (commandPFAdd) RequireVersion() string      { return "2.8.9" }
func (commandPFAdd) Forbid() bool                { return false }
func (commandPFAdd) WarnVersion() string         { return "0.0.0" }
func (commandPFAdd) Warning() string             { return "" }
func (commandPFAdd) P(p Pipeliner) commandPFAddP { return commandPFAddP{p} }
func (b commandPFAddP) Cmd(key string, els ...any) {
	b.Pipeliner.Cmd(b.builder().PFAddCompleted(key, els...))
}

var CommandPFCount commandPFCount

type commandPFCount string
type commandPFCountP struct{ Pipeliner }

func (commandPFCount) String() string                { return "PFCOUNT" }
func (commandPFCount) Class() string                 { return "HyperLog" }
func (commandPFCount) RequireVersion() string        { return "2.8.9" }
func (commandPFCount) Forbid() bool                  { return false }
func (commandPFCount) WarnVersion() string           { return "0.0.0" }
func (commandPFCount) Warning() string               { return "" }
func (commandPFCount) P(p Pipeliner) commandPFCountP { return commandPFCountP{p} }
func (b commandPFCountP) Cmd(keys ...string)         { b.Pipeliner.Cmd(b.builder().PFCountCompleted(keys...)) }

var CommandPFMerge commandPFMerge

type commandPFMerge string
type commandPFMergeP struct{ Pipeliner }

func (commandPFMerge) String() string                { return "PFMERGE" }
func (commandPFMerge) Class() string                 { return "HyperLog" }
func (commandPFMerge) RequireVersion() string        { return "2.8.9" }
func (commandPFMerge) Forbid() bool                  { return false }
func (commandPFMerge) WarnVersion() string           { return "0.0.0" }
func (commandPFMerge) Warning() string               { return "" }
func (commandPFMerge) P(p Pipeliner) commandPFMergeP { return commandPFMergeP{p} }
func (b commandPFMergeP) Cmd(dest string, keys ...string) {
	b.Pipeliner.Cmd(b.builder().PFMergeCompleted(dest, keys...))
}

var CommandBLMove commandBLMove

type commandBLMove string

func (commandBLMove) String() string         { return "BLMOVE" }
func (commandBLMove) Class() string          { return "List" }
func (commandBLMove) RequireVersion() string { return "6.2.0" }
func (commandBLMove) Forbid() bool           { return false }
func (commandBLMove) WarnVersion() string    { return "0.0.0" }
func (commandBLMove) Warning() string        { return "" }

var CommandBLMPop commandBLMPop

type commandBLMPop string

func (commandBLMPop) String() string         { return "BLMPOP" }
func (commandBLMPop) Class() string          { return "List" }
func (commandBLMPop) RequireVersion() string { return "7.0.0" }
func (commandBLMPop) Forbid() bool           { return false }
func (commandBLMPop) WarnVersion() string    { return "0.0.0" }
func (commandBLMPop) Warning() string        { return "" }

var CommandBLPop commandBLPop

type commandBLPop string

func (commandBLPop) String() string         { return "BLPOP" }
func (commandBLPop) Class() string          { return "List" }
func (commandBLPop) RequireVersion() string { return "7.0.0" }
func (commandBLPop) Forbid() bool           { return false }
func (commandBLPop) WarnVersion() string    { return "0.0.0" }
func (commandBLPop) Warning() string        { return "" }

var CommandBRPop commandBRPop

type commandBRPop string

func (commandBRPop) String() string         { return "BRPOP" }
func (commandBRPop) Class() string          { return "List" }
func (commandBRPop) RequireVersion() string { return "2.0.0" }
func (commandBRPop) Forbid() bool           { return false }
func (commandBRPop) WarnVersion() string    { return "0.0.0" }
func (commandBRPop) Warning() string        { return "" }

var CommandBRPopLPush commandBRPopLPush

type commandBRPopLPush string

func (commandBRPopLPush) String() string         { return "BRPOPLPUSH" }
func (commandBRPopLPush) Class() string          { return "List" }
func (commandBRPopLPush) RequireVersion() string { return "2.2.0" }
func (commandBRPopLPush) Forbid() bool           { return false }
func (commandBRPopLPush) WarnVersion() string    { return "0.0.0" }
func (commandBRPopLPush) Warning() string        { return "" }

var CommandLIndex commandLIndex

type commandLIndex string
type commandLIndexP struct{ Pipeliner }

func (commandLIndex) String() string               { return "LINDEX" }
func (commandLIndex) Class() string                { return "List" }
func (commandLIndex) RequireVersion() string       { return "1.0.0" }
func (commandLIndex) Forbid() bool                 { return false }
func (commandLIndex) WarnVersion() string          { return "0.0.0" }
func (commandLIndex) Warning() string              { return "" }
func (commandLIndex) P(p Pipeliner) commandLIndexP { return commandLIndexP{p} }
func (b commandLIndexP) Cmd(key string, index int64) {
	b.Pipeliner.Cmd(b.builder().LIndexCompleted(key, index))
}

var CommandLInsert commandLInsert

type commandLInsert string
type commandLInsertP struct{ Pipeliner }

func (commandLInsert) String() string                { return "LINSERT" }
func (commandLInsert) Class() string                 { return "List" }
func (commandLInsert) RequireVersion() string        { return "2.2.0" }
func (commandLInsert) Forbid() bool                  { return false }
func (commandLInsert) WarnVersion() string           { return "0.0.0" }
func (commandLInsert) Warning() string               { return "" }
func (commandLInsert) P(p Pipeliner) commandLInsertP { return commandLInsertP{p} }
func (b commandLInsertP) Cmd(key, op string, pivot, element any) {
	b.Pipeliner.Cmd(b.builder().LInsertCompleted(key, op, pivot, element))
}

var CommandLLen commandLLen

type commandLLen string
type commandLLenP struct{ Pipeliner }

func (commandLLen) String() string             { return "LLEN" }
func (commandLLen) Class() string              { return "List" }
func (commandLLen) RequireVersion() string     { return "1.0.0" }
func (commandLLen) Forbid() bool               { return false }
func (commandLLen) WarnVersion() string        { return "0.0.0" }
func (commandLLen) Warning() string            { return "" }
func (commandLLen) P(p Pipeliner) commandLLenP { return commandLLenP{p} }
func (b commandLLenP) Cmd(key string)          { b.Pipeliner.Cmd(b.builder().LLenCompleted(key)) }

var CommandLMove commandLMove

type commandLMove string
type commandLMoveP struct{ Pipeliner }

func (commandLMove) String() string              { return "LMOVE" }
func (commandLMove) Class() string               { return "List" }
func (commandLMove) RequireVersion() string      { return "6.2.0" }
func (commandLMove) Forbid() bool                { return false }
func (commandLMove) WarnVersion() string         { return "0.0.0" }
func (commandLMove) Warning() string             { return "" }
func (commandLMove) P(p Pipeliner) commandLMoveP { return commandLMoveP{p} }
func (b commandLMoveP) Cmd(source, destination, srcpos, destpos string) {
	b.Pipeliner.Cmd(b.builder().LMoveCompleted(source, destination, srcpos, destpos))
}

var CommandLPop commandLPop

type commandLPop string
type commandLPopP struct{ Pipeliner }

func (commandLPop) String() string             { return "LPOP" }
func (commandLPop) Class() string              { return "List" }
func (commandLPop) RequireVersion() string     { return "1.0.0" }
func (commandLPop) Forbid() bool               { return false }
func (commandLPop) WarnVersion() string        { return "0.0.0" }
func (commandLPop) Warning() string            { return "" }
func (commandLPop) P(p Pipeliner) commandLPopP { return commandLPopP{p} }
func (b commandLPopP) Cmd(key string)          { b.Pipeliner.Cmd(b.builder().LPopCompleted(key)) }

var CommandLPopCount commandLPopCount

type commandLPopCount string
type commandLPopCountP struct{ Pipeliner }

func (commandLPopCount) String() string                  { return "LPOP COUNT" }
func (commandLPopCount) Class() string                   { return "List" }
func (commandLPopCount) RequireVersion() string          { return "6.2.0" }
func (commandLPopCount) Forbid() bool                    { return false }
func (commandLPopCount) WarnVersion() string             { return "0.0.0" }
func (commandLPopCount) Warning() string                 { return "" }
func (commandLPopCount) P(p Pipeliner) commandLPopCountP { return commandLPopCountP{p} }
func (b commandLPopCountP) Cmd(key string, count int64) {
	b.Pipeliner.Cmd(b.builder().LPopCountCompleted(key, count))
}

var CommandLMPop commandLMPop

type commandLMPop string
type commandLMPopP struct{ Pipeliner }

func (commandLMPop) String() string              { return "LMPOP" }
func (commandLMPop) Class() string               { return "List" }
func (commandLMPop) RequireVersion() string      { return "7.0.0" }
func (commandLMPop) Forbid() bool                { return false }
func (commandLMPop) WarnVersion() string         { return "0.0.0" }
func (commandLMPop) Warning() string             { return "" }
func (commandLMPop) P(p Pipeliner) commandLMPopP { return commandLMPopP{p} }
func (b commandLMPopP) Cmd(direction string, count int64, keys ...string) {
	b.Pipeliner.Cmd(b.builder().LMPopCompleted(direction, count, keys...))
}

var CommandLPos commandLPos

type commandLPos string
type commandLPosP struct{ Pipeliner }

func (commandLPos) String() string             { return "LPOS" }
func (commandLPos) Class() string              { return "List" }
func (commandLPos) RequireVersion() string     { return "6.0.6" }
func (commandLPos) Forbid() bool               { return false }
func (commandLPos) WarnVersion() string        { return "0.0.0" }
func (commandLPos) Warning() string            { return "" }
func (commandLPos) P(p Pipeliner) commandLPosP { return commandLPosP{p} }
func (b commandLPosP) Cmd(key string, element string, a LPosArgs) {
	b.Pipeliner.Cmd(b.builder().LPosCompleted(key, element, a))
}

var CommandLPosCount commandLPosCount

type commandLPosCount string
type commandLPosCountP struct{ Pipeliner }

func (commandLPosCount) String() string                  { return "LPOS" }
func (commandLPosCount) Class() string                   { return "List" }
func (commandLPosCount) RequireVersion() string          { return "6.0.6" }
func (commandLPosCount) Forbid() bool                    { return false }
func (commandLPosCount) WarnVersion() string             { return "0.0.0" }
func (commandLPosCount) Warning() string                 { return "" }
func (commandLPosCount) P(p Pipeliner) commandLPosCountP { return commandLPosCountP{p} }
func (b commandLPosCountP) Cmd(key string, element string, count int64, a LPosArgs) {
	b.Pipeliner.Cmd(b.builder().LPosCountCompleted(key, element, count, a))
}

var CommandLPush commandLPush

type commandLPush string
type commandLPushP struct{ Pipeliner }

func (commandLPush) String() string              { return "LPUSH" }
func (commandLPush) Class() string               { return "List" }
func (commandLPush) RequireVersion() string      { return "1.0.0" }
func (commandLPush) Forbid() bool                { return false }
func (commandLPush) WarnVersion() string         { return "0.0.0" }
func (commandLPush) Warning() string             { return "" }
func (commandLPush) P(p Pipeliner) commandLPushP { return commandLPushP{p} }
func (b commandLPushP) Cmd(key string, element any) {
	b.Pipeliner.Cmd(b.builder().LPushCompleted(key, element))
}

var CommandLMPush commandLMPush

type commandLMPush string
type commandLMPushP struct{ Pipeliner }

func (commandLMPush) String() string               { return "LPUSH" }
func (commandLMPush) Class() string                { return "List" }
func (commandLMPush) RequireVersion() string       { return "2.4.0" }
func (commandLMPush) Forbid() bool                 { return false }
func (commandLMPush) WarnVersion() string          { return "0.0.0" }
func (commandLMPush) Warning() string              { return "" }
func (commandLMPush) P(p Pipeliner) commandLMPushP { return commandLMPushP{p} }
func (b commandLMPushP) Cmd(key string, elements ...any) {
	b.Pipeliner.Cmd(b.builder().LMPushCompleted(key, elements...))
}

var CommandLPushX commandLPushX

type commandLPushX string
type commandLPushXP struct{ Pipeliner }

func (commandLPushX) String() string               { return "LPUSHX" }
func (commandLPushX) Class() string                { return "List" }
func (commandLPushX) RequireVersion() string       { return "2.2.0" }
func (commandLPushX) Forbid() bool                 { return false }
func (commandLPushX) WarnVersion() string          { return "0.0.0" }
func (commandLPushX) Warning() string              { return "" }
func (commandLPushX) P(p Pipeliner) commandLPushXP { return commandLPushXP{p} }
func (b commandLPushXP) Cmd(key string, element any) {
	b.Pipeliner.Cmd(b.builder().LPushXCompleted(key, element))
}

var CommandLMPushX commandLMPushX

type commandLMPushX string
type commandLMPushXP struct{ Pipeliner }

func (commandLMPushX) String() string                { return "LPUSHX" }
func (commandLMPushX) Class() string                 { return "List" }
func (commandLMPushX) RequireVersion() string        { return "4.0.0" }
func (commandLMPushX) Forbid() bool                  { return false }
func (commandLMPushX) WarnVersion() string           { return "0.0.0" }
func (commandLMPushX) Warning() string               { return "" }
func (commandLMPushX) P(p Pipeliner) commandLMPushXP { return commandLMPushXP{p} }
func (b commandLMPushXP) Cmd(key string, elements ...any) {
	b.Pipeliner.Cmd(b.builder().LMPushXCompleted(key, elements...))
}

var CommandLRange commandLRange

type commandLRange string
type commandLRangeP struct{ Pipeliner }

func (commandLRange) String() string               { return "LRANGE" }
func (commandLRange) Class() string                { return "List" }
func (commandLRange) RequireVersion() string       { return "1.0.0" }
func (commandLRange) Forbid() bool                 { return false }
func (commandLRange) WarnVersion() string          { return "0.0.0" }
func (commandLRange) Warning() string              { return "" }
func (commandLRange) P(p Pipeliner) commandLRangeP { return commandLRangeP{p} }
func (b commandLRangeP) Cmd(key string, start, stop int64) {
	b.Pipeliner.Cmd(b.builder().LRangeCompleted(key, start, stop))
}

var CommandLRem commandLRem

type commandLRem string
type commandLRemP struct{ Pipeliner }

func (commandLRem) String() string             { return "LREM" }
func (commandLRem) Class() string              { return "List" }
func (commandLRem) RequireVersion() string     { return "1.0.0" }
func (commandLRem) Forbid() bool               { return false }
func (commandLRem) WarnVersion() string        { return "0.0.0" }
func (commandLRem) Warning() string            { return "" }
func (commandLRem) P(p Pipeliner) commandLRemP { return commandLRemP{p} }
func (b commandLRemP) Cmd(key string, count int64, element any) {
	b.Pipeliner.Cmd(b.builder().LRemCompleted(key, count, element))
}

var CommandLSet commandLSet

type commandLSet string
type commandLSetP struct{ Pipeliner }

func (commandLSet) String() string             { return "LSET" }
func (commandLSet) Class() string              { return "List" }
func (commandLSet) RequireVersion() string     { return "1.0.0" }
func (commandLSet) Forbid() bool               { return false }
func (commandLSet) WarnVersion() string        { return "0.0.0" }
func (commandLSet) Warning() string            { return "" }
func (commandLSet) P(p Pipeliner) commandLSetP { return commandLSetP{p} }
func (b commandLSetP) Cmd(key string, index int64, element any) {
	b.Pipeliner.Cmd(b.builder().LSetCompleted(key, index, element))
}

var CommandLTrim commandLTrim

type commandLTrim string
type commandLTrimP struct{ Pipeliner }

func (commandLTrim) String() string              { return "LTRIM" }
func (commandLTrim) Class() string               { return "List" }
func (commandLTrim) RequireVersion() string      { return "1.0.0" }
func (commandLTrim) Forbid() bool                { return false }
func (commandLTrim) WarnVersion() string         { return "0.0.0" }
func (commandLTrim) Warning() string             { return "" }
func (commandLTrim) P(p Pipeliner) commandLTrimP { return commandLTrimP{p} }
func (b commandLTrimP) Cmd(key string, start, stop int64) {
	b.Pipeliner.Cmd(b.builder().LTrimCompleted(key, start, stop))
}

var CommandRPop commandRPop

type commandRPop string
type commandRPopP struct{ Pipeliner }

func (commandRPop) String() string             { return "RPOP" }
func (commandRPop) Class() string              { return "List" }
func (commandRPop) RequireVersion() string     { return "1.0.0" }
func (commandRPop) Forbid() bool               { return false }
func (commandRPop) WarnVersion() string        { return "0.0.0" }
func (commandRPop) Warning() string            { return "" }
func (commandRPop) P(p Pipeliner) commandRPopP { return commandRPopP{p} }
func (b commandRPopP) Cmd(key string)          { b.Pipeliner.Cmd(b.builder().RPopCompleted(key)) }

var CommandRPopCount commandRPopCount

type commandRPopCount string
type commandRPopCountP struct{ Pipeliner }

func (commandRPopCount) String() string                  { return "RPOP" }
func (commandRPopCount) Class() string                   { return "List" }
func (commandRPopCount) RequireVersion() string          { return "6.2.0" }
func (commandRPopCount) Forbid() bool                    { return false }
func (commandRPopCount) WarnVersion() string             { return "0.0.0" }
func (commandRPopCount) Warning() string                 { return "" }
func (commandRPopCount) P(p Pipeliner) commandRPopCountP { return commandRPopCountP{p} }
func (b commandRPopCountP) Cmd(key string, count int64) {
	b.Pipeliner.Cmd(b.builder().RPopCountCompleted(key, count))
}

var CommandRPopLPush commandRPopLPush

type commandRPopLPush string
type commandRPopLPushP struct{ Pipeliner }

func (commandRPopLPush) String() string                  { return "RPOPLPUSH" }
func (commandRPopLPush) Class() string                   { return "List" }
func (commandRPopLPush) RequireVersion() string          { return "1.2.0" }
func (commandRPopLPush) Forbid() bool                    { return false }
func (commandRPopLPush) WarnVersion() string             { return "6.2.0" }
func (commandRPopLPush) Warning() string                 { return commandRPopLPushWarning }
func (commandRPopLPush) P(p Pipeliner) commandRPopLPushP { return commandRPopLPushP{p} }
func (b commandRPopLPushP) Cmd(source, destination string) {
	b.Pipeliner.Cmd(b.builder().RPopLPushCompleted(source, destination))
}

var CommandRPush commandRPush

type commandRPush string
type commandRPushP struct{ Pipeliner }

func (commandRPush) String() string              { return "RPUSH" }
func (commandRPush) Class() string               { return "List" }
func (commandRPush) RequireVersion() string      { return "1.0.0" }
func (commandRPush) Forbid() bool                { return false }
func (commandRPush) WarnVersion() string         { return "0.0.0" }
func (commandRPush) Warning() string             { return "" }
func (commandRPush) P(p Pipeliner) commandRPushP { return commandRPushP{p} }
func (b commandRPushP) Cmd(key string, element any) {
	b.Pipeliner.Cmd(b.builder().RPushCompleted(key, element))
}

var CommandRMPush commandRMPush

type commandRMPush string
type commandRMPushP struct{ Pipeliner }

func (commandRMPush) String() string               { return "RPUSH" }
func (commandRMPush) Class() string                { return "List" }
func (commandRMPush) RequireVersion() string       { return "2.4.0" }
func (commandRMPush) Forbid() bool                 { return false }
func (commandRMPush) WarnVersion() string          { return "0.0.0" }
func (commandRMPush) Warning() string              { return "" }
func (commandRMPush) P(p Pipeliner) commandRMPushP { return commandRMPushP{p} }
func (b commandRMPushP) Cmd(key string, elements ...any) {
	b.Pipeliner.Cmd(b.builder().RMPushCompleted(key, elements...))
}

var CommandRPushX commandRPushX

type commandRPushX string
type commandRPushXP struct{ Pipeliner }

func (commandRPushX) String() string               { return "RPUSHX" }
func (commandRPushX) Class() string                { return "List" }
func (commandRPushX) RequireVersion() string       { return "6.2.0" }
func (commandRPushX) Forbid() bool                 { return false }
func (commandRPushX) WarnVersion() string          { return "0.0.0" }
func (commandRPushX) Warning() string              { return "" }
func (commandRPushX) P(p Pipeliner) commandRPushXP { return commandRPushXP{p} }
func (b commandRPushXP) Cmd(key string, element any) {
	b.Pipeliner.Cmd(b.builder().RPushXCompleted(key, element))
}

var CommandRMPushX commandRMPushX

type commandRMPushX string
type commandRMPushXP struct{ Pipeliner }

func (commandRMPushX) String() string                { return "RPUSHX" }
func (commandRMPushX) Class() string                 { return "List" }
func (commandRMPushX) RequireVersion() string        { return "6.2.0" }
func (commandRMPushX) Forbid() bool                  { return false }
func (commandRMPushX) WarnVersion() string           { return "0.0.0" }
func (commandRMPushX) Warning() string               { return "" }
func (commandRMPushX) P(p Pipeliner) commandRMPushXP { return commandRMPushXP{p} }
func (b commandRMPushXP) Cmd(key string, elements ...any) {
	b.Pipeliner.Cmd(b.builder().RMPushXCompleted(key, elements...))
}

var CommandPSubscribe commandPSubscribe

type commandPSubscribe string

func (commandPSubscribe) String() string         { return "PSUBSCRIBE" }
func (commandPSubscribe) Class() string          { return "PubSub" }
func (commandPSubscribe) RequireVersion() string { return "2.0.0" }
func (commandPSubscribe) Forbid() bool           { return false }
func (commandPSubscribe) WarnVersion() string    { return "0.0.0" }
func (commandPSubscribe) Warning() string        { return "" }

var CommandPublish commandPublish

type commandPublish string

func (commandPublish) String() string         { return "PUBLISH" }
func (commandPublish) Class() string          { return "PubSub" }
func (commandPublish) RequireVersion() string { return "2.0.0" }
func (commandPublish) Forbid() bool           { return false }
func (commandPublish) WarnVersion() string    { return "0.0.0" }
func (commandPublish) Warning() string        { return "" }

var CommandPubSubChannels commandPubSubChannels

type commandPubSubChannels string

func (commandPubSubChannels) String() string         { return "PUBSUB CHANNELS" }
func (commandPubSubChannels) Class() string          { return "PubSub" }
func (commandPubSubChannels) RequireVersion() string { return "2.8.0" }
func (commandPubSubChannels) Forbid() bool           { return false }
func (commandPubSubChannels) WarnVersion() string    { return "0.0.0" }
func (commandPubSubChannels) Warning() string        { return "" }

var CommandPubSubNumPat commandPubSubNumPat

type commandPubSubNumPat string

func (commandPubSubNumPat) String() string         { return "PUBSUB NUMPAT" }
func (commandPubSubNumPat) Class() string          { return "PubSub" }
func (commandPubSubNumPat) RequireVersion() string { return "2.8.0" }
func (commandPubSubNumPat) Forbid() bool           { return false }
func (commandPubSubNumPat) WarnVersion() string    { return "0.0.0" }
func (commandPubSubNumPat) Warning() string        { return "" }

var CommandPubSubNumSub commandPubSubNumSub

type commandPubSubNumSub string

func (commandPubSubNumSub) String() string         { return "PUBSUB NUMSUB" }
func (commandPubSubNumSub) Class() string          { return "PubSub" }
func (commandPubSubNumSub) RequireVersion() string { return "2.8.0" }
func (commandPubSubNumSub) Forbid() bool           { return false }
func (commandPubSubNumSub) WarnVersion() string    { return "0.0.0" }
func (commandPubSubNumSub) Warning() string        { return "" }

var CommandPubSubShardChannels commandPubSubShardChannels

type commandPubSubShardChannels string

func (commandPubSubShardChannels) String() string         { return "PUBSUB SHARDCHANNELS" }
func (commandPubSubShardChannels) Class() string          { return "PubSub" }
func (commandPubSubShardChannels) RequireVersion() string { return "7.0.0" }
func (commandPubSubShardChannels) Forbid() bool           { return false }
func (commandPubSubShardChannels) WarnVersion() string    { return "0.0.0" }
func (commandPubSubShardChannels) Warning() string        { return "" }

var CommandPubSubShardNumSub commandPubSubShardNumSub

type commandPubSubShardNumSub string

func (commandPubSubShardNumSub) String() string         { return "PUBSUB SHARDNUMSUB" }
func (commandPubSubShardNumSub) Class() string          { return "PubSub" }
func (commandPubSubShardNumSub) RequireVersion() string { return "7.0.0" }
func (commandPubSubShardNumSub) Forbid() bool           { return false }
func (commandPubSubShardNumSub) WarnVersion() string    { return "0.0.0" }
func (commandPubSubShardNumSub) Warning() string        { return "" }

var CommandSPublish commandSPublish

type commandSPublish string

func (commandSPublish) String() string         { return "SPUBLISH" }
func (commandSPublish) Class() string          { return "PubSub" }
func (commandSPublish) RequireVersion() string { return "7.0.0" }
func (commandSPublish) Forbid() bool           { return false }
func (commandSPublish) WarnVersion() string    { return "0.0.0" }
func (commandSPublish) Warning() string        { return "" }

var CommandSubscribe commandSubscribe

type commandSubscribe string

func (commandSubscribe) String() string         { return "SUBSCRIBE" }
func (commandSubscribe) Class() string          { return "PubSub" }
func (commandSubscribe) RequireVersion() string { return "2.0.0" }
func (commandSubscribe) Forbid() bool           { return false }
func (commandSubscribe) WarnVersion() string    { return "0.0.0" }
func (commandSubscribe) Warning() string        { return "" }

var CommandUnsubscribe commandUnsubscribe

type commandUnsubscribe string

func (commandUnsubscribe) String() string         { return "UNSUBSCRIBE" }
func (commandUnsubscribe) Class() string          { return "PubSub" }
func (commandUnsubscribe) RequireVersion() string { return "2.0.0" }
func (commandUnsubscribe) Forbid() bool           { return false }
func (commandUnsubscribe) WarnVersion() string    { return "0.0.0" }
func (commandUnsubscribe) Warning() string        { return "" }

var CommandPUnsubscribe commandPUnsubscribe

type commandPUnsubscribe string

func (commandPUnsubscribe) String() string         { return "PUNSUBSCRIBE" }
func (commandPUnsubscribe) Class() string          { return "PubSub" }
func (commandPUnsubscribe) RequireVersion() string { return "2.0.0" }
func (commandPUnsubscribe) Forbid() bool           { return false }
func (commandPUnsubscribe) WarnVersion() string    { return "0.0.0" }
func (commandPUnsubscribe) Warning() string        { return "" }

var CommandEval commandEval

type commandEval string

func (commandEval) String() string         { return "EVAL" }
func (commandEval) Class() string          { return "Scripting" }
func (commandEval) RequireVersion() string { return "2.6.0" }
func (commandEval) Forbid() bool           { return false }
func (commandEval) WarnVersion() string    { return "0.0.0" }
func (commandEval) Warning() string        { return "" }

var CommandEvalRO commandEvalRO

type commandEvalRO string

func (commandEvalRO) String() string         { return "EVAL_RO" }
func (commandEvalRO) Class() string          { return "Scripting" }
func (commandEvalRO) RequireVersion() string { return "7.0.0" }
func (commandEvalRO) Forbid() bool           { return false }
func (commandEvalRO) WarnVersion() string    { return "0.0.0" }
func (commandEvalRO) Warning() string        { return "" }

var CommandEvalSha commandEvalSha

type commandEvalSha string

func (commandEvalSha) String() string         { return "EVALSHA" }
func (commandEvalSha) Class() string          { return "Scripting" }
func (commandEvalSha) RequireVersion() string { return "2.6.0" }
func (commandEvalSha) Forbid() bool           { return false }
func (commandEvalSha) WarnVersion() string    { return "0.0.0" }
func (commandEvalSha) Warning() string        { return "" }

var CommandEvalShaRO commandEvalShaRO

type commandEvalShaRO string

func (commandEvalShaRO) String() string         { return "EVALSHA_RO" }
func (commandEvalShaRO) Class() string          { return "Scripting" }
func (commandEvalShaRO) RequireVersion() string { return "7.0.0" }
func (commandEvalShaRO) Forbid() bool           { return false }
func (commandEvalShaRO) WarnVersion() string    { return "0.0.0" }
func (commandEvalShaRO) Warning() string        { return "" }

var CommandFCall commandFCall

type commandFCall string

func (commandFCall) String() string         { return "FCALL" }
func (commandFCall) Class() string          { return "Scripting" }
func (commandFCall) RequireVersion() string { return "7.0.0" }
func (commandFCall) Forbid() bool           { return false }
func (commandFCall) WarnVersion() string    { return "0.0.0" }
func (commandFCall) Warning() string        { return "" }

var CommandFCallRO commandFCallRO

type commandFCallRO string

func (commandFCallRO) String() string         { return "FCALL_RO" }
func (commandFCallRO) Class() string          { return "Scripting" }
func (commandFCallRO) RequireVersion() string { return "7.0.0" }
func (commandFCallRO) Forbid() bool           { return false }
func (commandFCallRO) WarnVersion() string    { return "0.0.0" }
func (commandFCallRO) Warning() string        { return "" }

var CommandFunctionDelete commandFunctionDelete

type commandFunctionDelete string

func (commandFunctionDelete) String() string         { return "FUNCTION DELETE" }
func (commandFunctionDelete) Class() string          { return "Scripting" }
func (commandFunctionDelete) RequireVersion() string { return "7.0.0" }
func (commandFunctionDelete) Forbid() bool           { return false }
func (commandFunctionDelete) WarnVersion() string    { return "0.0.0" }
func (commandFunctionDelete) Warning() string        { return "" }

var CommandFunctionDump commandFunctionDump

type commandFunctionDump string

func (commandFunctionDump) String() string         { return "FUNCTION DUMP" }
func (commandFunctionDump) Class() string          { return "Scripting" }
func (commandFunctionDump) RequireVersion() string { return "7.0.0" }
func (commandFunctionDump) Forbid() bool           { return false }
func (commandFunctionDump) WarnVersion() string    { return "0.0.0" }
func (commandFunctionDump) Warning() string        { return "" }

var CommandFunctionFlush commandFunctionFlush

type commandFunctionFlush string

func (commandFunctionFlush) String() string         { return "FUNCTION FLUSH" }
func (commandFunctionFlush) Class() string          { return "Scripting" }
func (commandFunctionFlush) RequireVersion() string { return "7.0.0" }
func (commandFunctionFlush) Forbid() bool           { return false }
func (commandFunctionFlush) WarnVersion() string    { return "0.0.0" }
func (commandFunctionFlush) Warning() string        { return "" }

var CommandFunctionFlushAsync commandFunctionFlushAsync

type commandFunctionFlushAsync string

func (commandFunctionFlushAsync) String() string         { return "FUNCTION FLUSH ASYNC" }
func (commandFunctionFlushAsync) Class() string          { return "Scripting" }
func (commandFunctionFlushAsync) RequireVersion() string { return "7.0.0" }
func (commandFunctionFlushAsync) Forbid() bool           { return false }
func (commandFunctionFlushAsync) WarnVersion() string    { return "0.0.0" }
func (commandFunctionFlushAsync) Warning() string        { return "" }

var CommandFunctionKill commandFunctionKill

type commandFunctionKill string

func (commandFunctionKill) String() string         { return "FUNCTION KILL" }
func (commandFunctionKill) Class() string          { return "Scripting" }
func (commandFunctionKill) RequireVersion() string { return "7.0.0" }
func (commandFunctionKill) Forbid() bool           { return false }
func (commandFunctionKill) WarnVersion() string    { return "0.0.0" }
func (commandFunctionKill) Warning() string        { return "" }

var CommandFunctionList commandFunctionList

type commandFunctionList string

func (commandFunctionList) String() string         { return "FUNCTION LIST" }
func (commandFunctionList) Class() string          { return "Scripting" }
func (commandFunctionList) RequireVersion() string { return "7.0.0" }
func (commandFunctionList) Forbid() bool           { return false }
func (commandFunctionList) WarnVersion() string    { return "0.0.0" }
func (commandFunctionList) Warning() string        { return "" }

var CommandFunctionLoad commandFunctionLoad

type commandFunctionLoad string

func (commandFunctionLoad) String() string         { return "FUNCTION LOAD" }
func (commandFunctionLoad) Class() string          { return "Scripting" }
func (commandFunctionLoad) RequireVersion() string { return "7.0.0" }
func (commandFunctionLoad) Forbid() bool           { return false }
func (commandFunctionLoad) WarnVersion() string    { return "0.0.0" }
func (commandFunctionLoad) Warning() string        { return "" }

var CommandFunctionLoadReplace commandFunctionLoadReplace

type commandFunctionLoadReplace string

func (commandFunctionLoadReplace) String() string         { return "FUNCTION LOAD REPLACE" }
func (commandFunctionLoadReplace) Class() string          { return "Scripting" }
func (commandFunctionLoadReplace) RequireVersion() string { return "7.0.0" }
func (commandFunctionLoadReplace) Forbid() bool           { return false }
func (commandFunctionLoadReplace) WarnVersion() string    { return "0.0.0" }
func (commandFunctionLoadReplace) Warning() string        { return "" }

var CommandFunctionRestore commandFunctionRestore

type commandFunctionRestore string

func (commandFunctionRestore) String() string         { return "FUNCTION RESTORE" }
func (commandFunctionRestore) Class() string          { return "Scripting" }
func (commandFunctionRestore) RequireVersion() string { return "7.0.0" }
func (commandFunctionRestore) Forbid() bool           { return false }
func (commandFunctionRestore) WarnVersion() string    { return "0.0.0" }
func (commandFunctionRestore) Warning() string        { return "" }

var CommandScriptExists commandScriptExists

type commandScriptExists string

func (commandScriptExists) String() string         { return "SCRIPT EXISTS" }
func (commandScriptExists) Class() string          { return "Scripting" }
func (commandScriptExists) RequireVersion() string { return "2.6.0" }
func (commandScriptExists) Forbid() bool           { return false }
func (commandScriptExists) WarnVersion() string    { return "0.0.0" }
func (commandScriptExists) Warning() string        { return "" }

var CommandScriptFlush commandScriptFlush

type commandScriptFlush string

func (commandScriptFlush) String() string         { return "SCRIPT FLUSH" }
func (commandScriptFlush) Class() string          { return "Scripting" }
func (commandScriptFlush) RequireVersion() string { return "2.6.0" }
func (commandScriptFlush) Forbid() bool           { return false }
func (commandScriptFlush) WarnVersion() string    { return "0.0.0" }
func (commandScriptFlush) Warning() string        { return "" }

var CommandScriptKill commandScriptKill

type commandScriptKill string

func (commandScriptKill) String() string         { return "SCRIPT KILL" }
func (commandScriptKill) Class() string          { return "Scripting" }
func (commandScriptKill) RequireVersion() string { return "2.6.0" }
func (commandScriptKill) Forbid() bool           { return false }
func (commandScriptKill) WarnVersion() string    { return "0.0.0" }
func (commandScriptKill) Warning() string        { return "" }

var CommandScriptLoad commandScriptLoad

type commandScriptLoad string

func (commandScriptLoad) String() string         { return "SCRIPT LOAD" }
func (commandScriptLoad) Class() string          { return "Scripting" }
func (commandScriptLoad) RequireVersion() string { return "2.6.0" }
func (commandScriptLoad) Forbid() bool           { return false }
func (commandScriptLoad) WarnVersion() string    { return "0.0.0" }
func (commandScriptLoad) Warning() string        { return "" }

var CommandACLDryRun commandACLDryRun

type commandACLDryRun string

func (commandACLDryRun) String() string         { return "ACL DRYRUN" }
func (commandACLDryRun) Class() string          { return "Server" }
func (commandACLDryRun) RequireVersion() string { return "7.0.0" }
func (commandACLDryRun) Forbid() bool           { return true }
func (commandACLDryRun) WarnVersion() string    { return "0.0.0" }
func (commandACLDryRun) Warning() string        { return "" }

var CommandBgRewriteAOF commandBgRewriteAOF

type commandBgRewriteAOF string

func (commandBgRewriteAOF) String() string         { return "BGREWRITEAOF" }
func (commandBgRewriteAOF) Class() string          { return "Server" }
func (commandBgRewriteAOF) RequireVersion() string { return "1.0.0" }
func (commandBgRewriteAOF) Forbid() bool           { return true }
func (commandBgRewriteAOF) WarnVersion() string    { return "0.0.0" }
func (commandBgRewriteAOF) Warning() string        { return "" }

var CommandBgSave commandBgSave

type commandBgSave string

func (commandBgSave) String() string         { return "BGSAVE" }
func (commandBgSave) Class() string          { return "Server" }
func (commandBgSave) RequireVersion() string { return "1.0.0" }
func (commandBgSave) Forbid() bool           { return true }
func (commandBgSave) WarnVersion() string    { return "0.0.0" }
func (commandBgSave) Warning() string        { return "" }

var CommandCommand commandCommand

type commandCommand string

func (commandCommand) String() string         { return "COMMAND" }
func (commandCommand) Class() string          { return "Server" }
func (commandCommand) RequireVersion() string { return "2.8.13" }
func (commandCommand) Forbid() bool           { return false }
func (commandCommand) WarnVersion() string    { return "0.0.0" }
func (commandCommand) Warning() string        { return "" }

var CommandCommandList commandCommandList

type commandCommandList string

func (commandCommandList) String() string         { return "COMMAND LIST" }
func (commandCommandList) Class() string          { return "Server" }
func (commandCommandList) RequireVersion() string { return "7.0.0" }
func (commandCommandList) Forbid() bool           { return false }
func (commandCommandList) WarnVersion() string    { return "0.0.0" }
func (commandCommandList) Warning() string        { return "" }

var CommandCommandGetKeys commandCommandGetKeys

type commandCommandGetKeys string

func (commandCommandGetKeys) String() string         { return "COMMAND GETKEYS" }
func (commandCommandGetKeys) Class() string          { return "Server" }
func (commandCommandGetKeys) RequireVersion() string { return "2.8.13" }
func (commandCommandGetKeys) Forbid() bool           { return false }
func (commandCommandGetKeys) WarnVersion() string    { return "0.0.0" }
func (commandCommandGetKeys) Warning() string        { return "" }

var CommandCommandGetKeysAndFlags commandCommandGetKeysAndFlags

type commandCommandGetKeysAndFlags string

func (commandCommandGetKeysAndFlags) String() string         { return "COMMAND GETKEYSANDFLAGS" }
func (commandCommandGetKeysAndFlags) Class() string          { return "Server" }
func (commandCommandGetKeysAndFlags) RequireVersion() string { return "7.0.0" }
func (commandCommandGetKeysAndFlags) Forbid() bool           { return false }
func (commandCommandGetKeysAndFlags) WarnVersion() string    { return "0.0.0" }
func (commandCommandGetKeysAndFlags) Warning() string        { return "" }

var CommandConfigGet commandConfigGet

type commandConfigGet string

func (commandConfigGet) String() string         { return "CONFIG GET" }
func (commandConfigGet) Class() string          { return "Server" }
func (commandConfigGet) RequireVersion() string { return "2.0.0" }
func (commandConfigGet) Forbid() bool           { return true }
func (commandConfigGet) WarnVersion() string    { return "0.0.0" }
func (commandConfigGet) Warning() string        { return "" }

var CommandConfigResetStat commandConfigResetStat

type commandConfigResetStat string

func (commandConfigResetStat) String() string         { return "CONFIG RESETSTAT" }
func (commandConfigResetStat) Class() string          { return "Server" }
func (commandConfigResetStat) RequireVersion() string { return "2.0.0" }
func (commandConfigResetStat) Forbid() bool           { return true }
func (commandConfigResetStat) WarnVersion() string    { return "0.0.0" }
func (commandConfigResetStat) Warning() string        { return "" }

var CommandConfigRewrite commandConfigRewrite

type commandConfigRewrite string

func (commandConfigRewrite) String() string         { return "CONFIG REWRITE" }
func (commandConfigRewrite) Class() string          { return "Server" }
func (commandConfigRewrite) RequireVersion() string { return "2.8.0" }
func (commandConfigRewrite) Forbid() bool           { return true }
func (commandConfigRewrite) WarnVersion() string    { return "0.0.0" }
func (commandConfigRewrite) Warning() string        { return "" }

var CommandConfigSet commandConfigSet

type commandConfigSet string

func (commandConfigSet) String() string         { return "CONFIG SET" }
func (commandConfigSet) Class() string          { return "Server" }
func (commandConfigSet) RequireVersion() string { return "2.0.0" }
func (commandConfigSet) Forbid() bool           { return true }
func (commandConfigSet) WarnVersion() string    { return "0.0.0" }
func (commandConfigSet) Warning() string        { return "" }

var CommandDBSize commandDBSize

type commandDBSize string

func (commandDBSize) String() string         { return "DBSIZE" }
func (commandDBSize) Class() string          { return "Server" }
func (commandDBSize) RequireVersion() string { return "1.0.0" }
func (commandDBSize) Forbid() bool           { return false }
func (commandDBSize) WarnVersion() string    { return "0.0.0" }
func (commandDBSize) Warning() string        { return "" }

var CommandFlushAll commandFlushAll

type commandFlushAll string

func (commandFlushAll) String() string         { return "FLUSHALL" }
func (commandFlushAll) Class() string          { return "Server" }
func (commandFlushAll) RequireVersion() string { return "1.0.0" }
func (commandFlushAll) Forbid() bool           { return true }
func (commandFlushAll) WarnVersion() string    { return "0.0.0" }
func (commandFlushAll) Warning() string        { return "" }

var CommandFlushAllAsync commandFlushAllAsync

type commandFlushAllAsync string

func (commandFlushAllAsync) String() string         { return "FLUSHALL ASYNC" }
func (commandFlushAllAsync) Class() string          { return "Server" }
func (commandFlushAllAsync) RequireVersion() string { return "4.0.0" }
func (commandFlushAllAsync) Forbid() bool           { return true }
func (commandFlushAllAsync) WarnVersion() string    { return "0.0.0" }
func (commandFlushAllAsync) Warning() string        { return "" }

var CommandFlushDB commandFlushDB

type commandFlushDB string

func (commandFlushDB) String() string         { return "FLUSHDB" }
func (commandFlushDB) Class() string          { return "Server" }
func (commandFlushDB) RequireVersion() string { return "1.0.0" }
func (commandFlushDB) Forbid() bool           { return true }
func (commandFlushDB) WarnVersion() string    { return "0.0.0" }
func (commandFlushDB) Warning() string        { return "" }

var CommandFlushDBAsync commandFlushDBAsync

type commandFlushDBAsync string

func (commandFlushDBAsync) String() string         { return "FLUSHDB ASYNC" }
func (commandFlushDBAsync) Class() string          { return "Server" }
func (commandFlushDBAsync) RequireVersion() string { return "4.0.0" }
func (commandFlushDBAsync) Forbid() bool           { return true }
func (commandFlushDBAsync) WarnVersion() string    { return "0.0.0" }
func (commandFlushDBAsync) Warning() string        { return "" }

var CommandServerInfo commandServerInfo

type commandServerInfo string

func (commandServerInfo) String() string         { return "SERVERINFO" }
func (commandServerInfo) Class() string          { return "Server" }
func (commandServerInfo) RequireVersion() string { return "1.0.0" }
func (commandServerInfo) Forbid() bool           { return false }
func (commandServerInfo) WarnVersion() string    { return "0.0.0" }
func (commandServerInfo) Warning() string        { return "" }

var CommandMServerInfo commandMServerInfo

type commandMServerInfo string

func (commandMServerInfo) String() string         { return "INFO" }
func (commandMServerInfo) Class() string          { return "Server" }
func (commandMServerInfo) RequireVersion() string { return "7.0.0" }
func (commandMServerInfo) Forbid() bool           { return false }
func (commandMServerInfo) WarnVersion() string    { return "0.0.0" }
func (commandMServerInfo) Warning() string        { return "" }

var CommandLastSave commandLastSave

type commandLastSave string

func (commandLastSave) String() string         { return "LASTSAVE" }
func (commandLastSave) Class() string          { return "Server" }
func (commandLastSave) RequireVersion() string { return "1.0.0" }
func (commandLastSave) Forbid() bool           { return false }
func (commandLastSave) WarnVersion() string    { return "0.0.0" }
func (commandLastSave) Warning() string        { return "" }

var CommandMemoryUsage commandMemoryUsage

type commandMemoryUsage string

func (commandMemoryUsage) String() string         { return "MEMORY USAGE" }
func (commandMemoryUsage) Class() string          { return "Server" }
func (commandMemoryUsage) RequireVersion() string { return "4.0.0" }
func (commandMemoryUsage) Forbid() bool           { return false }
func (commandMemoryUsage) WarnVersion() string    { return "0.0.0" }
func (commandMemoryUsage) Warning() string        { return "" }

var CommandSave commandSave

type commandSave string

func (commandSave) String() string         { return "SAVE" }
func (commandSave) Class() string          { return "Server" }
func (commandSave) RequireVersion() string { return "1.0.0" }
func (commandSave) Forbid() bool           { return true }
func (commandSave) WarnVersion() string    { return "0.0.0" }
func (commandSave) Warning() string        { return "" }

var CommandShutdown commandShutdown

type commandShutdown string

func (commandShutdown) String() string         { return "SHUTDOWN" }
func (commandShutdown) Class() string          { return "Server" }
func (commandShutdown) RequireVersion() string { return "1.0.0" }
func (commandShutdown) Forbid() bool           { return true }
func (commandShutdown) WarnVersion() string    { return "0.0.0" }
func (commandShutdown) Warning() string        { return "" }

var CommandShutdownSave commandShutdownSave

type commandShutdownSave string

func (commandShutdownSave) String() string         { return "SHUTDOWN SAVE" }
func (commandShutdownSave) Class() string          { return "Server" }
func (commandShutdownSave) RequireVersion() string { return "1.0.0" }
func (commandShutdownSave) Forbid() bool           { return true }
func (commandShutdownSave) WarnVersion() string    { return "0.0.0" }
func (commandShutdownSave) Warning() string        { return "" }

var CommandShutdownNoSave commandShutdownNoSave

type commandShutdownNoSave string

func (commandShutdownNoSave) String() string         { return "SHUTDOWN NOSAVE" }
func (commandShutdownNoSave) Class() string          { return "Server" }
func (commandShutdownNoSave) RequireVersion() string { return "1.0.0" }
func (commandShutdownNoSave) Forbid() bool           { return true }
func (commandShutdownNoSave) WarnVersion() string    { return "0.0.0" }
func (commandShutdownNoSave) Warning() string        { return "" }

var CommandDebugObject commandDebugObject

type commandDebugObject string

func (commandDebugObject) String() string         { return "DEBUG OBJECT" }
func (commandDebugObject) Class() string          { return "Server" }
func (commandDebugObject) RequireVersion() string { return "1.0.0" }
func (commandDebugObject) Forbid() bool           { return false }
func (commandDebugObject) WarnVersion() string    { return "0.0.0" }
func (commandDebugObject) Warning() string        { return "" }

var CommandTime commandTime

type commandTime string
type commandTimeP struct{ Pipeliner }

func (commandTime) String() string             { return "TIME" }
func (commandTime) Class() string              { return "Server" }
func (commandTime) RequireVersion() string     { return "2.6.0" }
func (commandTime) Forbid() bool               { return false }
func (commandTime) WarnVersion() string        { return "0.0.0" }
func (commandTime) Warning() string            { return "" }
func (commandTime) P(p Pipeliner) commandTimeP { return commandTimeP{p} }
func (b commandTimeP) Cmd()                    { b.Pipeliner.Cmd(b.builder().TimeCompleted()) }

var CommandSAdd commandSAdd

type commandSAdd string
type commandSAddP struct{ Pipeliner }

func (commandSAdd) String() string             { return "SADD" }
func (commandSAdd) Class() string              { return "Set" }
func (commandSAdd) RequireVersion() string     { return "1.0.0" }
func (commandSAdd) Forbid() bool               { return false }
func (commandSAdd) WarnVersion() string        { return "0.0.0" }
func (commandSAdd) Warning() string            { return "" }
func (commandSAdd) P(p Pipeliner) commandSAddP { return commandSAddP{p} }
func (b commandSAddP) Cmd(key string, member any) {
	b.Pipeliner.Cmd(b.builder().SAddCompleted(key, member))
}

var CommandSMAdd commandSMAdd

type commandSMAdd string
type commandSMAddP struct{ Pipeliner }

func (commandSMAdd) String() string              { return "SADD" }
func (commandSMAdd) Class() string               { return "Set" }
func (commandSMAdd) RequireVersion() string      { return "2.4.0" }
func (commandSMAdd) Forbid() bool                { return false }
func (commandSMAdd) WarnVersion() string         { return "0.0.0" }
func (commandSMAdd) Warning() string             { return "" }
func (commandSMAdd) P(p Pipeliner) commandSMAddP { return commandSMAddP{p} }
func (b commandSMAddP) Cmd(key string, members ...any) {
	b.Pipeliner.Cmd(b.builder().SMAddCompleted(key, members...))
}

var CommandSCard commandSCard

type commandSCard string
type commandSCardP struct{ Pipeliner }

func (commandSCard) String() string              { return "SCARD" }
func (commandSCard) Class() string               { return "Set" }
func (commandSCard) RequireVersion() string      { return "1.0.0" }
func (commandSCard) Forbid() bool                { return false }
func (commandSCard) WarnVersion() string         { return "0.0.0" }
func (commandSCard) Warning() string             { return "" }
func (commandSCard) P(p Pipeliner) commandSCardP { return commandSCardP{p} }
func (b commandSCardP) Cmd(key string)           { b.Pipeliner.Cmd(b.builder().SCardCompleted(key)) }

var CommandSDiff commandSDiff

type commandSDiff string
type commandSDiffP struct{ Pipeliner }

func (commandSDiff) String() string              { return "SDIFF" }
func (commandSDiff) Class() string               { return "Set" }
func (commandSDiff) RequireVersion() string      { return "1.0.0" }
func (commandSDiff) Forbid() bool                { return false }
func (commandSDiff) WarnVersion() string         { return "0.0.0" }
func (commandSDiff) Warning() string             { return "" }
func (commandSDiff) P(p Pipeliner) commandSDiffP { return commandSDiffP{p} }
func (b commandSDiffP) Cmd(keys ...string)       { b.Pipeliner.Cmd(b.builder().SDiffCompleted(keys...)) }

var CommandSDiffStore commandSDiffStore

type commandSDiffStore string
type commandSDiffStoreP struct{ Pipeliner }

func (commandSDiffStore) String() string                   { return "SDIFFSTORE" }
func (commandSDiffStore) Class() string                    { return "Set" }
func (commandSDiffStore) RequireVersion() string           { return "1.0.0" }
func (commandSDiffStore) Forbid() bool                     { return false }
func (commandSDiffStore) WarnVersion() string              { return "0.0.0" }
func (commandSDiffStore) Warning() string                  { return "" }
func (commandSDiffStore) P(p Pipeliner) commandSDiffStoreP { return commandSDiffStoreP{p} }
func (b commandSDiffStoreP) Cmd(destination string, keys ...string) {
	b.Pipeliner.Cmd(b.builder().SDiffStoreCompleted(destination, keys...))
}

var CommandSInter commandSInter

type commandSInter string
type commandSInterP struct{ Pipeliner }

func (commandSInter) String() string               { return "SINTER" }
func (commandSInter) Class() string                { return "Set" }
func (commandSInter) RequireVersion() string       { return "1.0.0" }
func (commandSInter) Forbid() bool                 { return false }
func (commandSInter) WarnVersion() string          { return "0.0.0" }
func (commandSInter) Warning() string              { return "" }
func (commandSInter) P(p Pipeliner) commandSInterP { return commandSInterP{p} }
func (b commandSInterP) Cmd(keys ...string)        { b.Pipeliner.Cmd(b.builder().SInterCompleted(keys...)) }

var CommandSInterStore commandSInterStore

type commandSInterStore string
type commandSInterStoreP struct{ Pipeliner }

func (commandSInterStore) String() string                    { return "SINTERSTORE" }
func (commandSInterStore) Class() string                     { return "Set" }
func (commandSInterStore) RequireVersion() string            { return "1.0.0" }
func (commandSInterStore) Forbid() bool                      { return false }
func (commandSInterStore) WarnVersion() string               { return "0.0.0" }
func (commandSInterStore) Warning() string                   { return "" }
func (commandSInterStore) P(p Pipeliner) commandSInterStoreP { return commandSInterStoreP{p} }
func (b commandSInterStoreP) Cmd(destination string, keys ...string) {
	b.Pipeliner.Cmd(b.builder().SInterStoreCompleted(destination, keys...))
}

var CommandSInterCard commandSInterCard

type commandSInterCard string
type commandSInterCardP struct{ Pipeliner }

func (commandSInterCard) String() string                   { return "SINTERCARD" }
func (commandSInterCard) Class() string                    { return "Set" }
func (commandSInterCard) RequireVersion() string           { return "7.0.0" }
func (commandSInterCard) Forbid() bool                     { return false }
func (commandSInterCard) WarnVersion() string              { return "0.0.0" }
func (commandSInterCard) Warning() string                  { return "" }
func (commandSInterCard) P(p Pipeliner) commandSInterCardP { return commandSInterCardP{p} }
func (b commandSInterCardP) Cmd(limit int64, keys ...string) {
	b.Pipeliner.Cmd(b.builder().SInterCardCompleted(limit, keys...))
}

var CommandSIsMember commandSIsMember

type commandSIsMember string
type commandSIsMemberP struct{ Pipeliner }

func (commandSIsMember) String() string                  { return "SISMEMBER" }
func (commandSIsMember) Class() string                   { return "Set" }
func (commandSIsMember) RequireVersion() string          { return "1.0.0" }
func (commandSIsMember) Forbid() bool                    { return false }
func (commandSIsMember) WarnVersion() string             { return "0.0.0" }
func (commandSIsMember) Warning() string                 { return "" }
func (commandSIsMember) P(p Pipeliner) commandSIsMemberP { return commandSIsMemberP{p} }
func (b commandSIsMemberP) Cmd(key string, member any) {
	b.Pipeliner.Cmd(b.builder().SIsMemberCompleted(key, member))
}

var CommandSMIsMember commandSMIsMember

type commandSMIsMember string
type commandSMIsMemberP struct{ Pipeliner }

func (commandSMIsMember) String() string                   { return "SMISMEMBER" }
func (commandSMIsMember) Class() string                    { return "Set" }
func (commandSMIsMember) RequireVersion() string           { return "6.2.0" }
func (commandSMIsMember) Forbid() bool                     { return false }
func (commandSMIsMember) WarnVersion() string              { return "0.0.0" }
func (commandSMIsMember) Warning() string                  { return "" }
func (commandSMIsMember) P(p Pipeliner) commandSMIsMemberP { return commandSMIsMemberP{p} }
func (b commandSMIsMemberP) Cmd(key string, members ...any) {
	b.Pipeliner.Cmd(b.builder().SMIsMemberCompleted(key, members...))
}

var CommandSMembers commandSMembers

type commandSMembers string
type commandSMembersP struct{ Pipeliner }

func (commandSMembers) String() string                 { return "SMEMBERS" }
func (commandSMembers) Class() string                  { return "Set" }
func (commandSMembers) RequireVersion() string         { return "1.0.0" }
func (commandSMembers) Forbid() bool                   { return false }
func (commandSMembers) WarnVersion() string            { return "0.0.0" }
func (commandSMembers) Warning() string                { return "" }
func (commandSMembers) P(p Pipeliner) commandSMembersP { return commandSMembersP{p} }
func (b commandSMembersP) Cmd(key string)              { b.Pipeliner.Cmd(b.builder().SMembersCompleted(key)) }

var CommandSMove commandSMove

type commandSMove string
type commandSMoveP struct{ Pipeliner }

func (commandSMove) String() string              { return "SMOVE" }
func (commandSMove) Class() string               { return "Set" }
func (commandSMove) RequireVersion() string      { return "1.0.0" }
func (commandSMove) Forbid() bool                { return false }
func (commandSMove) WarnVersion() string         { return "0.0.0" }
func (commandSMove) Warning() string             { return "" }
func (commandSMove) P(p Pipeliner) commandSMoveP { return commandSMoveP{p} }
func (b commandSMoveP) Cmd(source, destination string, member any) {
	b.Pipeliner.Cmd(b.builder().SMoveCompleted(source, destination, member))
}

var CommandSPop commandSPop

type commandSPop string
type commandSPopP struct{ Pipeliner }

func (commandSPop) String() string             { return "SPOP" }
func (commandSPop) Class() string              { return "Set" }
func (commandSPop) RequireVersion() string     { return "1.0.0" }
func (commandSPop) Forbid() bool               { return false }
func (commandSPop) WarnVersion() string        { return "0.0.0" }
func (commandSPop) Warning() string            { return "" }
func (commandSPop) P(p Pipeliner) commandSPopP { return commandSPopP{p} }
func (b commandSPopP) Cmd(key string)          { b.Pipeliner.Cmd(b.builder().SPopCompleted(key)) }

var CommandSPopN commandSPopN

type commandSPopN string
type commandSPopNP struct{ Pipeliner }

func (commandSPopN) String() string              { return "SPOPN" }
func (commandSPopN) Class() string               { return "Set" }
func (commandSPopN) RequireVersion() string      { return "3.2.0" }
func (commandSPopN) Forbid() bool                { return false }
func (commandSPopN) WarnVersion() string         { return "0.0.0" }
func (commandSPopN) Warning() string             { return "" }
func (commandSPopN) P(p Pipeliner) commandSPopNP { return commandSPopNP{p} }
func (b commandSPopNP) Cmd(key string, count int64) {
	b.Pipeliner.Cmd(b.builder().SPopNCompleted(key, count))
}

var CommandSRandMember commandSRandMember

type commandSRandMember string
type commandSRandMemberP struct{ Pipeliner }

func (commandSRandMember) String() string                    { return "SRANDMEMBER" }
func (commandSRandMember) Class() string                     { return "Set" }
func (commandSRandMember) RequireVersion() string            { return "1.0.0" }
func (commandSRandMember) Forbid() bool                      { return false }
func (commandSRandMember) WarnVersion() string               { return "0.0.0" }
func (commandSRandMember) Warning() string                   { return "" }
func (commandSRandMember) P(p Pipeliner) commandSRandMemberP { return commandSRandMemberP{p} }
func (b commandSRandMemberP) Cmd(key string)                 { b.Pipeliner.Cmd(b.builder().SRandMemberCompleted(key)) }

var CommandSRandMemberN commandSRandMemberN

type commandSRandMemberN string
type commandSRandMemberNP struct{ Pipeliner }

func (commandSRandMemberN) String() string                     { return "SRANDMEMBERN" }
func (commandSRandMemberN) Class() string                      { return "Set" }
func (commandSRandMemberN) RequireVersion() string             { return "2.6.0" }
func (commandSRandMemberN) Forbid() bool                       { return false }
func (commandSRandMemberN) WarnVersion() string                { return "0.0.0" }
func (commandSRandMemberN) Warning() string                    { return "" }
func (commandSRandMemberN) P(p Pipeliner) commandSRandMemberNP { return commandSRandMemberNP{p} }
func (b commandSRandMemberNP) Cmd(key string, count int64) {
	b.Pipeliner.Cmd(b.builder().SRandMemberNCompleted(key, count))
}

var CommandSRem commandSRem

type commandSRem string
type commandSRemP struct{ Pipeliner }

func (commandSRem) String() string             { return "SREM" }
func (commandSRem) Class() string              { return "Set" }
func (commandSRem) RequireVersion() string     { return "1.0.0" }
func (commandSRem) Forbid() bool               { return false }
func (commandSRem) WarnVersion() string        { return "0.0.0" }
func (commandSRem) Warning() string            { return "" }
func (commandSRem) P(p Pipeliner) commandSRemP { return commandSRemP{p} }
func (b commandSRemP) Cmd(key string, member any) {
	b.Pipeliner.Cmd(b.builder().SRemCompleted(key, member))
}

var CommandSMRem commandSMRem

type commandSMRem string
type commandSMRemP struct{ Pipeliner }

func (commandSMRem) String() string              { return "SMREM" }
func (commandSMRem) Class() string               { return "Set" }
func (commandSMRem) RequireVersion() string      { return "2.4.0" }
func (commandSMRem) Forbid() bool                { return false }
func (commandSMRem) WarnVersion() string         { return "0.0.0" }
func (commandSMRem) Warning() string             { return "" }
func (commandSMRem) P(p Pipeliner) commandSMRemP { return commandSMRemP{p} }
func (b commandSMRemP) Cmd(key string, members ...any) {
	b.Pipeliner.Cmd(b.builder().SMRemCompleted(key, members...))
}

var CommandSScan commandSScan

type commandSScan string
type commandSScanP struct{ Pipeliner }

func (commandSScan) String() string              { return "SSCAN" }
func (commandSScan) Class() string               { return "Set" }
func (commandSScan) RequireVersion() string      { return "2.8.0" }
func (commandSScan) Forbid() bool                { return false }
func (commandSScan) WarnVersion() string         { return "0.0.0" }
func (commandSScan) Warning() string             { return "" }
func (commandSScan) P(p Pipeliner) commandSScanP { return commandSScanP{p} }
func (b commandSScanP) Cmd(key string, cursor uint64, match string, count int64) {
	b.Pipeliner.Cmd(b.builder().SScanCompleted(key, cursor, match, count))
}

var CommandSUnion commandSUnion

type commandSUnion string
type commandSUnionP struct{ Pipeliner }

func (commandSUnion) String() string               { return "SUNION" }
func (commandSUnion) Class() string                { return "Set" }
func (commandSUnion) RequireVersion() string       { return "1.0.0" }
func (commandSUnion) Forbid() bool                 { return false }
func (commandSUnion) WarnVersion() string          { return "0.0.0" }
func (commandSUnion) Warning() string              { return "" }
func (commandSUnion) P(p Pipeliner) commandSUnionP { return commandSUnionP{p} }
func (b commandSUnionP) Cmd(keys ...string)        { b.Pipeliner.Cmd(b.builder().SUnionCompleted(keys...)) }

var CommandSUnionStore commandSUnionStore

type commandSUnionStore string
type commandSUnionStoreP struct{ Pipeliner }

func (commandSUnionStore) String() string                    { return "SUNIONSTORE" }
func (commandSUnionStore) Class() string                     { return "Set" }
func (commandSUnionStore) RequireVersion() string            { return "1.0.0" }
func (commandSUnionStore) Forbid() bool                      { return false }
func (commandSUnionStore) WarnVersion() string               { return "0.0.0" }
func (commandSUnionStore) Warning() string                   { return "" }
func (commandSUnionStore) P(p Pipeliner) commandSUnionStoreP { return commandSUnionStoreP{p} }
func (b commandSUnionStoreP) Cmd(destination string, keys ...string) {
	b.Pipeliner.Cmd(b.builder().SUnionStoreCompleted(destination, keys...))
}

var CommandBZMPop commandBZMPop

type commandBZMPop string

func (commandBZMPop) String() string         { return "BZMPOP" }
func (commandBZMPop) Class() string          { return "SortedSet" }
func (commandBZMPop) RequireVersion() string { return "7.0.0" }
func (commandBZMPop) Forbid() bool           { return false }
func (commandBZMPop) WarnVersion() string    { return "0.0.0" }
func (commandBZMPop) Warning() string        { return "" }

var CommandBZPopMax commandBZPopMax

type commandBZPopMax string

func (commandBZPopMax) String() string         { return "BZPOPMAX" }
func (commandBZPopMax) Class() string          { return "SortedSet" }
func (commandBZPopMax) RequireVersion() string { return "5.0.0" }
func (commandBZPopMax) Forbid() bool           { return false }
func (commandBZPopMax) WarnVersion() string    { return "0.0.0" }
func (commandBZPopMax) Warning() string        { return "" }

var CommandBZPopMin commandBZPopMin

type commandBZPopMin string

func (commandBZPopMin) String() string         { return "BZPOPMIN" }
func (commandBZPopMin) Class() string          { return "SortedSet" }
func (commandBZPopMin) RequireVersion() string { return "5.0.0" }
func (commandBZPopMin) Forbid() bool           { return false }
func (commandBZPopMin) WarnVersion() string    { return "0.0.0" }
func (commandBZPopMin) Warning() string        { return "" }

var CommandZAdd commandZAdd

type commandZAdd string
type commandZAddP struct{ Pipeliner }

func (commandZAdd) String() string             { return "ZADD" }
func (commandZAdd) Class() string              { return "SortedSet" }
func (commandZAdd) RequireVersion() string     { return "1.2.0" }
func (commandZAdd) Forbid() bool               { return false }
func (commandZAdd) WarnVersion() string        { return "0.0.0" }
func (commandZAdd) Warning() string            { return "" }
func (commandZAdd) P(p Pipeliner) commandZAddP { return commandZAddP{p} }
func (b commandZAddP) Cmd(key string, member Z) {
	b.Pipeliner.Cmd(b.builder().ZAddCompleted(key, member))
}

var CommandZAddArgs commandZAddArgs

type commandZAddArgs string
type commandZAddArgsP struct{ Pipeliner }

func (commandZAddArgs) String() string                 { return "ZAddArgs" }
func (commandZAddArgs) Class() string                  { return "SortedSet" }
func (commandZAddArgs) RequireVersion() string         { return "6.2.0" }
func (commandZAddArgs) Forbid() bool                   { return false }
func (commandZAddArgs) WarnVersion() string            { return "0.0.0" }
func (commandZAddArgs) Warning() string                { return "" }
func (commandZAddArgs) P(p Pipeliner) commandZAddArgsP { return commandZAddArgsP{p} }
func (b commandZAddArgsP) Cmd(key string, args ZAddArgs) {
	b.Pipeliner.Cmd(b.builder().ZAddArgsCompleted(key, args))
}

var CommandZMAdd commandZMAdd

type commandZMAdd string
type commandZMAddP struct{ Pipeliner }

func (commandZMAdd) String() string              { return "ZADD" }
func (commandZMAdd) Class() string               { return "SortedSet" }
func (commandZMAdd) RequireVersion() string      { return "2.4.0" }
func (commandZMAdd) Forbid() bool                { return false }
func (commandZMAdd) WarnVersion() string         { return "0.0.0" }
func (commandZMAdd) Warning() string             { return "" }
func (commandZMAdd) P(p Pipeliner) commandZMAddP { return commandZMAddP{p} }
func (b commandZMAddP) Cmd(key string, members ...Z) {
	b.Pipeliner.Cmd(b.builder().ZAddCompleted(key, members...))
}

var CommandZAddCh commandZAddCh

type commandZAddCh string
type commandZAddChP struct{ Pipeliner }

func (commandZAddCh) String() string               { return "ZADD CH" }
func (commandZAddCh) Class() string                { return "SortedSet" }
func (commandZAddCh) RequireVersion() string       { return "3.0.2" }
func (commandZAddCh) Forbid() bool                 { return false }
func (commandZAddCh) WarnVersion() string          { return "0.0.0" }
func (commandZAddCh) Warning() string              { return "" }
func (commandZAddCh) P(p Pipeliner) commandZAddChP { return commandZAddChP{p} }
func (b commandZAddChP) Cmd(key string, members ...Z) {
	b.Pipeliner.Cmd(b.builder().ZAddChCompleted(key, members...))
}

var CommandZAddLT commandZAddLT

type commandZAddLT string
type commandZAddLTP struct{ Pipeliner }

func (commandZAddLT) String() string               { return "ZADD LT" }
func (commandZAddLT) Class() string                { return "SortedSet" }
func (commandZAddLT) RequireVersion() string       { return "6.2.0" }
func (commandZAddLT) Forbid() bool                 { return false }
func (commandZAddLT) WarnVersion() string          { return "0.0.0" }
func (commandZAddLT) Warning() string              { return "" }
func (commandZAddLT) P(p Pipeliner) commandZAddLTP { return commandZAddLTP{p} }
func (b commandZAddLTP) Cmd(key string, members ...Z) {
	b.Pipeliner.Cmd(b.builder().ZAddLTCompleted(key, members...))
}

var CommandZAddGT commandZAddGT

type commandZAddGT string
type commandZAddGTP struct{ Pipeliner }

func (commandZAddGT) String() string               { return "ZADD GT" }
func (commandZAddGT) Class() string                { return "SortedSet" }
func (commandZAddGT) RequireVersion() string       { return "6.2.0" }
func (commandZAddGT) Forbid() bool                 { return false }
func (commandZAddGT) WarnVersion() string          { return "0.0.0" }
func (commandZAddGT) Warning() string              { return "" }
func (commandZAddGT) P(p Pipeliner) commandZAddGTP { return commandZAddGTP{p} }
func (b commandZAddGTP) Cmd(key string, members ...Z) {
	b.Pipeliner.Cmd(b.builder().ZAddGTCompleted(key, members...))
}

var CommandZAddNX commandZAddNX

type commandZAddNX string
type commandZAddNXP struct{ Pipeliner }

func (commandZAddNX) String() string               { return "ZADD NX" }
func (commandZAddNX) Class() string                { return "SortedSet" }
func (commandZAddNX) RequireVersion() string       { return "3.0.2" }
func (commandZAddNX) Forbid() bool                 { return false }
func (commandZAddNX) WarnVersion() string          { return "0.0.0" }
func (commandZAddNX) Warning() string              { return "" }
func (commandZAddNX) P(p Pipeliner) commandZAddNXP { return commandZAddNXP{p} }
func (b commandZAddNXP) Cmd(key string, members ...Z) {
	b.Pipeliner.Cmd(b.builder().ZAddNXCompleted(key, members...))
}

var CommandZAddXX commandZAddXX

type commandZAddXX string
type commandZAddXXP struct{ Pipeliner }

func (commandZAddXX) String() string               { return "ZADD XX" }
func (commandZAddXX) Class() string                { return "SortedSet" }
func (commandZAddXX) RequireVersion() string       { return "3.0.2" }
func (commandZAddXX) Forbid() bool                 { return false }
func (commandZAddXX) WarnVersion() string          { return "0.0.0" }
func (commandZAddXX) Warning() string              { return "" }
func (commandZAddXX) P(p Pipeliner) commandZAddXXP { return commandZAddXXP{p} }
func (b commandZAddXXP) Cmd(key string, members ...Z) {
	b.Pipeliner.Cmd(b.builder().ZAddXXCompleted(key, members...))
}

var CommandZAddINCR commandZAddINCR

type commandZAddINCR string
type commandZAddINCRP struct{ Pipeliner }

func (commandZAddINCR) String() string                 { return "ZADD INCR" }
func (commandZAddINCR) Class() string                  { return "SortedSet" }
func (commandZAddINCR) RequireVersion() string         { return "3.0.2" }
func (commandZAddINCR) Forbid() bool                   { return false }
func (commandZAddINCR) WarnVersion() string            { return "0.0.0" }
func (commandZAddINCR) Warning() string                { return "" }
func (commandZAddINCR) P(p Pipeliner) commandZAddINCRP { return commandZAddINCRP{p} }
func (b commandZAddINCRP) Cmd(key string, args ZAddArgs) {
	b.Pipeliner.Cmd(b.builder().ZAddArgsIncrCompleted(key, args))
}

var CommandZCard commandZCard

type commandZCard string
type commandZCardP struct{ Pipeliner }

func (commandZCard) String() string              { return "ZCARD" }
func (commandZCard) Class() string               { return "SortedSet" }
func (commandZCard) RequireVersion() string      { return "1.2.0" }
func (commandZCard) Forbid() bool                { return false }
func (commandZCard) WarnVersion() string         { return "0.0.0" }
func (commandZCard) Warning() string             { return "" }
func (commandZCard) P(p Pipeliner) commandZCardP { return commandZCardP{p} }
func (b commandZCardP) Cmd(key string)           { b.Pipeliner.Cmd(b.builder().ZCardCompleted(key)) }

var CommandZCount commandZCount

type commandZCount string
type commandZCountP struct{ Pipeliner }

func (commandZCount) String() string               { return "ZCOUNT" }
func (commandZCount) Class() string                { return "SortedSet" }
func (commandZCount) RequireVersion() string       { return "2.0.0" }
func (commandZCount) Forbid() bool                 { return false }
func (commandZCount) WarnVersion() string          { return "0.0.0" }
func (commandZCount) Warning() string              { return "" }
func (commandZCount) P(p Pipeliner) commandZCountP { return commandZCountP{p} }
func (b commandZCountP) Cmd(key, min, max string) {
	b.Pipeliner.Cmd(b.builder().ZCountCompleted(key, min, max))
}

var CommandZDiff commandZDiff

type commandZDiff string
type commandZDiffP struct{ Pipeliner }

func (commandZDiff) String() string              { return "ZDIFF" }
func (commandZDiff) Class() string               { return "SortedSet" }
func (commandZDiff) RequireVersion() string      { return "6.2.0" }
func (commandZDiff) Forbid() bool                { return false }
func (commandZDiff) WarnVersion() string         { return "0.0.0" }
func (commandZDiff) Warning() string             { return "" }
func (commandZDiff) P(p Pipeliner) commandZDiffP { return commandZDiffP{p} }
func (b commandZDiffP) Cmd(keys ...string)       { b.Pipeliner.Cmd(b.builder().ZDiffCompleted(keys...)) }

var CommandZDiffWithScores commandZDiffWithScores

type commandZDiffWithScores string
type commandZDiffWithScoresP struct{ Pipeliner }

func (commandZDiffWithScores) String() string         { return "ZDIFF WITHSCORES" }
func (commandZDiffWithScores) Class() string          { return "SortedSet" }
func (commandZDiffWithScores) RequireVersion() string { return "6.2.0" }
func (commandZDiffWithScores) Forbid() bool           { return false }
func (commandZDiffWithScores) WarnVersion() string    { return "0.0.0" }
func (commandZDiffWithScores) Warning() string        { return "" }
func (commandZDiffWithScores) P(p Pipeliner) commandZDiffWithScoresP {
	return commandZDiffWithScoresP{p}
}
func (b commandZDiffWithScoresP) Cmd(keys ...string) {
	b.Pipeliner.Cmd(b.builder().ZDiffWithScoresCompleted(keys...))
}

var CommandZDiffStore commandZDiffStore

type commandZDiffStore string
type commandZDiffStoreP struct{ Pipeliner }

func (commandZDiffStore) String() string                   { return "ZDIFFSTORE" }
func (commandZDiffStore) Class() string                    { return "SortedSet" }
func (commandZDiffStore) RequireVersion() string           { return "6.2.0" }
func (commandZDiffStore) Forbid() bool                     { return false }
func (commandZDiffStore) WarnVersion() string              { return "0.0.0" }
func (commandZDiffStore) Warning() string                  { return "" }
func (commandZDiffStore) P(p Pipeliner) commandZDiffStoreP { return commandZDiffStoreP{p} }
func (b commandZDiffStoreP) Cmd(destination string, keys ...string) {
	b.Pipeliner.Cmd(b.builder().ZDiffStoreCompleted(destination, keys...))
}

var CommandZIncrBy commandZIncrBy

type commandZIncrBy string
type commandZIncrByP struct{ Pipeliner }

func (commandZIncrBy) String() string                { return "ZINCRBY" }
func (commandZIncrBy) Class() string                 { return "SortedSet" }
func (commandZIncrBy) RequireVersion() string        { return "1.2.0" }
func (commandZIncrBy) Forbid() bool                  { return false }
func (commandZIncrBy) WarnVersion() string           { return "0.0.0" }
func (commandZIncrBy) Warning() string               { return "" }
func (commandZIncrBy) P(p Pipeliner) commandZIncrByP { return commandZIncrByP{p} }
func (b commandZIncrByP) Cmd(key string, increment float64, member string) {
	b.Pipeliner.Cmd(b.builder().ZIncrByCompleted(key, increment, member))
}

var CommandZInter commandZInter

type commandZInter string
type commandZInterP struct{ Pipeliner }

func (commandZInter) String() string               { return "ZINTER" }
func (commandZInter) Class() string                { return "SortedSet" }
func (commandZInter) RequireVersion() string       { return "6.2.0" }
func (commandZInter) Forbid() bool                 { return false }
func (commandZInter) WarnVersion() string          { return "0.0.0" }
func (commandZInter) Warning() string              { return "" }
func (commandZInter) P(p Pipeliner) commandZInterP { return commandZInterP{p} }
func (b commandZInterP) Cmd(store ZStore)          { b.Pipeliner.Cmd(b.builder().ZInterCompleted(store)) }

var CommandZInterWithScores commandZInterWithScores

type commandZInterWithScores string
type commandZInterWithScoresP struct{ Pipeliner }

func (commandZInterWithScores) String() string         { return "ZINTER WITHSCORES" }
func (commandZInterWithScores) Class() string          { return "SortedSet" }
func (commandZInterWithScores) RequireVersion() string { return "6.2.0" }
func (commandZInterWithScores) Forbid() bool           { return false }
func (commandZInterWithScores) WarnVersion() string    { return "0.0.0" }
func (commandZInterWithScores) Warning() string        { return "" }
func (commandZInterWithScores) P(p Pipeliner) commandZInterWithScoresP {
	return commandZInterWithScoresP{p}
}
func (b commandZInterWithScoresP) Cmd(store ZStore) {
	b.Pipeliner.Cmd(b.builder().ZInterWithScoresCompleted(store))
}

var CommandZInterStore commandZInterStore

type commandZInterStore string
type commandZInterStoreP struct{ Pipeliner }

func (commandZInterStore) String() string                    { return "ZINTERSTORE" }
func (commandZInterStore) Class() string                     { return "SortedSet" }
func (commandZInterStore) RequireVersion() string            { return "6.2.0" }
func (commandZInterStore) Forbid() bool                      { return false }
func (commandZInterStore) WarnVersion() string               { return "0.0.0" }
func (commandZInterStore) Warning() string                   { return "" }
func (commandZInterStore) P(p Pipeliner) commandZInterStoreP { return commandZInterStoreP{p} }
func (b commandZInterStoreP) Cmd(destination string, store ZStore) {
	b.Pipeliner.Cmd(b.builder().ZInterStoreCompleted(destination, store))
}

var CommandZInterCard commandZInterCard

type commandZInterCard string
type commandZInterCardP struct{ Pipeliner }

func (commandZInterCard) String() string                   { return "ZINTERCARD" }
func (commandZInterCard) Class() string                    { return "SortedSet" }
func (commandZInterCard) RequireVersion() string           { return "7.0.0" }
func (commandZInterCard) Forbid() bool                     { return false }
func (commandZInterCard) WarnVersion() string              { return "0.0.0" }
func (commandZInterCard) Warning() string                  { return "" }
func (commandZInterCard) P(p Pipeliner) commandZInterCardP { return commandZInterCardP{p} }
func (b commandZInterCardP) Cmd(limit int64, keys ...string) {
	b.Pipeliner.Cmd(b.builder().ZInterCardCompleted(limit, keys...))
}

var CommandZLexCount commandZLexCount

type commandZLexCount string
type commandZLexCountP struct{ Pipeliner }

func (commandZLexCount) String() string                  { return "ZLEXCOUNT" }
func (commandZLexCount) Class() string                   { return "SortedSet" }
func (commandZLexCount) RequireVersion() string          { return "2.8.9" }
func (commandZLexCount) Forbid() bool                    { return false }
func (commandZLexCount) WarnVersion() string             { return "0.0.0" }
func (commandZLexCount) Warning() string                 { return "" }
func (commandZLexCount) P(p Pipeliner) commandZLexCountP { return commandZLexCountP{p} }
func (b commandZLexCountP) Cmd(key, min, max string) {
	b.Pipeliner.Cmd(b.builder().ZLexCountCompleted(key, min, max))
}

var CommandZMPop commandZMPop

type commandZMPop string
type commandZMPopP struct{ Pipeliner }

func (commandZMPop) String() string              { return "ZMPOP" }
func (commandZMPop) Class() string               { return "SortedSet" }
func (commandZMPop) RequireVersion() string      { return "7.0.0" }
func (commandZMPop) Forbid() bool                { return false }
func (commandZMPop) WarnVersion() string         { return "0.0.0" }
func (commandZMPop) Warning() string             { return "" }
func (commandZMPop) P(p Pipeliner) commandZMPopP { return commandZMPopP{p} }
func (b commandZMPopP) Cmd(order string, count int64, keys ...string) {
	b.Pipeliner.Cmd(b.builder().ZMPopCompleted(order, count, keys...))
}

var CommandZMScore commandZMScore

type commandZMScore string
type commandZMScoreP struct{ Pipeliner }

func (commandZMScore) String() string                { return "ZMSCORE" }
func (commandZMScore) Class() string                 { return "SortedSet" }
func (commandZMScore) RequireVersion() string        { return "6.2.0" }
func (commandZMScore) Forbid() bool                  { return false }
func (commandZMScore) WarnVersion() string           { return "0.0.0" }
func (commandZMScore) Warning() string               { return "" }
func (commandZMScore) P(p Pipeliner) commandZMScoreP { return commandZMScoreP{p} }
func (b commandZMScoreP) Cmd(key string, members ...string) {
	b.Pipeliner.Cmd(b.builder().ZMScoreCompleted(key, members...))
}

var CommandZPopMax commandZPopMax

type commandZPopMax string
type commandZPopMaxP struct{ Pipeliner }

func (commandZPopMax) String() string                { return "ZPOPMAX" }
func (commandZPopMax) Class() string                 { return "SortedSet" }
func (commandZPopMax) RequireVersion() string        { return "5.0.0" }
func (commandZPopMax) Forbid() bool                  { return false }
func (commandZPopMax) WarnVersion() string           { return "0.0.0" }
func (commandZPopMax) Warning() string               { return "" }
func (commandZPopMax) P(p Pipeliner) commandZPopMaxP { return commandZPopMaxP{p} }
func (b commandZPopMaxP) Cmd(key string, count ...int64) {
	b.Pipeliner.Cmd(b.builder().ZPopMaxCompleted(key, count...))
}

var CommandZPopMin commandZPopMin

type commandZPopMin string
type commandZPopMinP struct{ Pipeliner }

func (commandZPopMin) String() string                { return "ZPOPMIN" }
func (commandZPopMin) Class() string                 { return "SortedSet" }
func (commandZPopMin) RequireVersion() string        { return "5.0.0" }
func (commandZPopMin) Forbid() bool                  { return false }
func (commandZPopMin) WarnVersion() string           { return "0.0.0" }
func (commandZPopMin) Warning() string               { return "" }
func (commandZPopMin) P(p Pipeliner) commandZPopMinP { return commandZPopMinP{p} }
func (b commandZPopMinP) Cmd(key string, count ...int64) {
	b.Pipeliner.Cmd(b.builder().ZPopMinCompleted(key, count...))
}

var CommandZRandMember commandZRandMember

type commandZRandMember string
type commandZRandMemberP struct{ Pipeliner }

func (commandZRandMember) String() string                    { return "ZRANDMEMBER" }
func (commandZRandMember) Class() string                     { return "SortedSet" }
func (commandZRandMember) RequireVersion() string            { return "6.2.0" }
func (commandZRandMember) Forbid() bool                      { return false }
func (commandZRandMember) WarnVersion() string               { return "0.0.0" }
func (commandZRandMember) Warning() string                   { return "" }
func (commandZRandMember) P(p Pipeliner) commandZRandMemberP { return commandZRandMemberP{p} }
func (b commandZRandMemberP) Cmd(key string, count int64) {
	b.Pipeliner.Cmd(b.builder().ZRandMemberCompleted(key, count))
}

var CommandZRandMemberWithScores commandZRandMemberWithScores

type commandZRandMemberWithScores string
type commandZRandMemberWithScoresP struct{ Pipeliner }

func (commandZRandMemberWithScores) String() string         { return "ZRANDMEMBERWITHSCORES" }
func (commandZRandMemberWithScores) Class() string          { return "SortedSet" }
func (commandZRandMemberWithScores) RequireVersion() string { return "6.2.0" }
func (commandZRandMemberWithScores) Forbid() bool           { return false }
func (commandZRandMemberWithScores) WarnVersion() string    { return "0.0.0" }
func (commandZRandMemberWithScores) Warning() string        { return "" }
func (commandZRandMemberWithScores) P(p Pipeliner) commandZRandMemberWithScoresP {
	return commandZRandMemberWithScoresP{p}
}
func (b commandZRandMemberWithScoresP) Cmd(key string, count int64) {
	b.Pipeliner.Cmd(b.builder().ZRandMemberWithScoresCompleted(key, count))
}

var CommandZUnion commandZUnion

type commandZUnion string
type commandZUnionP struct{ Pipeliner }

func (commandZUnion) String() string               { return "ZUNION" }
func (commandZUnion) Class() string                { return "SortedSet" }
func (commandZUnion) RequireVersion() string       { return "6.2.0" }
func (commandZUnion) Forbid() bool                 { return false }
func (commandZUnion) WarnVersion() string          { return "0.0.0" }
func (commandZUnion) Warning() string              { return "" }
func (commandZUnion) P(p Pipeliner) commandZUnionP { return commandZUnionP{p} }
func (b commandZUnionP) Cmd(store ZStore)          { b.Pipeliner.Cmd(b.builder().ZUnionCompleted(store)) }

var CommandZUnionWithScores commandZUnionWithScores

type commandZUnionWithScores string
type commandZUnionWithScoresP struct{ Pipeliner }

func (commandZUnionWithScores) String() string         { return "ZUNIONWITHSCORES" }
func (commandZUnionWithScores) Class() string          { return "SortedSet" }
func (commandZUnionWithScores) RequireVersion() string { return "6.2.0" }
func (commandZUnionWithScores) Forbid() bool           { return false }
func (commandZUnionWithScores) WarnVersion() string    { return "0.0.0" }
func (commandZUnionWithScores) Warning() string        { return "" }
func (commandZUnionWithScores) P(p Pipeliner) commandZUnionWithScoresP {
	return commandZUnionWithScoresP{p}
}
func (b commandZUnionWithScoresP) Cmd(store ZStore) {
	b.Pipeliner.Cmd(b.builder().ZUnionWithScoresCompleted(store))
}

var CommandZUnionStore commandZUnionStore

type commandZUnionStore string
type commandZUnionStoreP struct{ Pipeliner }

func (commandZUnionStore) String() string                    { return "ZUNIONSTORE" }
func (commandZUnionStore) Class() string                     { return "SortedSet" }
func (commandZUnionStore) RequireVersion() string            { return "2.0.0" }
func (commandZUnionStore) Forbid() bool                      { return false }
func (commandZUnionStore) WarnVersion() string               { return "0.0.0" }
func (commandZUnionStore) Warning() string                   { return "" }
func (commandZUnionStore) P(p Pipeliner) commandZUnionStoreP { return commandZUnionStoreP{p} }
func (b commandZUnionStoreP) Cmd(dest string, store ZStore) {
	b.Pipeliner.Cmd(b.builder().ZUnionStoreCompleted(dest, store))
}

var CommandZScore commandZScore

type commandZScore string
type commandZScoreP struct{ Pipeliner }

func (commandZScore) String() string               { return "ZSCORE" }
func (commandZScore) Class() string                { return "SortedSet" }
func (commandZScore) RequireVersion() string       { return "1.2.0" }
func (commandZScore) Forbid() bool                 { return false }
func (commandZScore) WarnVersion() string          { return "0.0.0" }
func (commandZScore) Warning() string              { return "" }
func (commandZScore) P(p Pipeliner) commandZScoreP { return commandZScoreP{p} }
func (b commandZScoreP) Cmd(key, member string) {
	b.Pipeliner.Cmd(b.builder().ZScoreCompleted(key, member))
}

var CommandZScan commandZScan

type commandZScan string
type commandZScanP struct{ Pipeliner }

func (commandZScan) String() string              { return "ZSCAN" }
func (commandZScan) Class() string               { return "SortedSet" }
func (commandZScan) RequireVersion() string      { return "2.8.0" }
func (commandZScan) Forbid() bool                { return false }
func (commandZScan) WarnVersion() string         { return "0.0.0" }
func (commandZScan) Warning() string             { return "" }
func (commandZScan) P(p Pipeliner) commandZScanP { return commandZScanP{p} }
func (b commandZScanP) Cmd(key string, cursor uint64, match string, count int64) {
	b.Pipeliner.Cmd(b.builder().ZScanCompleted(key, cursor, match, count))
}

var CommandZRem commandZRem

type commandZRem string
type commandZRemP struct{ Pipeliner }

func (commandZRem) String() string             { return "ZREM" }
func (commandZRem) Class() string              { return "SortedSet" }
func (commandZRem) RequireVersion() string     { return "1.2.0" }
func (commandZRem) Forbid() bool               { return false }
func (commandZRem) WarnVersion() string        { return "0.0.0" }
func (commandZRem) Warning() string            { return "" }
func (commandZRem) P(p Pipeliner) commandZRemP { return commandZRemP{p} }
func (b commandZRemP) Cmd(key string, member any) {
	b.Pipeliner.Cmd(b.builder().ZRemCompleted(key, member))
}

var CommandZMRem commandZMRem

type commandZMRem string
type commandZMRemP struct{ Pipeliner }

func (commandZMRem) String() string              { return "ZREM" }
func (commandZMRem) Class() string               { return "SortedSet" }
func (commandZMRem) RequireVersion() string      { return "2.4.0" }
func (commandZMRem) Forbid() bool                { return false }
func (commandZMRem) WarnVersion() string         { return "0.0.0" }
func (commandZMRem) Warning() string             { return "" }
func (commandZMRem) P(p Pipeliner) commandZMRemP { return commandZMRemP{p} }
func (b commandZMRemP) Cmd(key string, members ...any) {
	b.Pipeliner.Cmd(b.builder().ZRemCompleted(key, members...))
}

var CommandZRemRangeByLex commandZRemRangeByLex

type commandZRemRangeByLex string
type commandZRemRangeByLexP struct{ Pipeliner }

func (commandZRemRangeByLex) String() string                       { return "ZREMRANGEBYLEX" }
func (commandZRemRangeByLex) Class() string                        { return "SortedSet" }
func (commandZRemRangeByLex) RequireVersion() string               { return "2.8.9" }
func (commandZRemRangeByLex) Forbid() bool                         { return false }
func (commandZRemRangeByLex) WarnVersion() string                  { return "0.0.0" }
func (commandZRemRangeByLex) Warning() string                      { return "" }
func (commandZRemRangeByLex) P(p Pipeliner) commandZRemRangeByLexP { return commandZRemRangeByLexP{p} }
func (b commandZRemRangeByLexP) Cmd(key, min, max string) {
	b.Pipeliner.Cmd(b.builder().ZRemRangeByLexCompleted(key, min, max))
}

var CommandZRemRangeByRank commandZRemRangeByRank

type commandZRemRangeByRank string
type commandZRemRangeByRankP struct{ Pipeliner }

func (commandZRemRangeByRank) String() string         { return "ZREMRANGEBYRANK" }
func (commandZRemRangeByRank) Class() string          { return "SortedSet" }
func (commandZRemRangeByRank) RequireVersion() string { return "2.0.0" }
func (commandZRemRangeByRank) Forbid() bool           { return false }
func (commandZRemRangeByRank) WarnVersion() string    { return "0.0.0" }
func (commandZRemRangeByRank) Warning() string        { return "" }
func (commandZRemRangeByRank) P(p Pipeliner) commandZRemRangeByRankP {
	return commandZRemRangeByRankP{p}
}
func (b commandZRemRangeByRankP) Cmd(key string, start, stop int64) {
	b.Pipeliner.Cmd(b.builder().ZRemRangeByRankCompleted(key, start, stop))
}

var CommandZRemRangeByScore commandZRemRangeByScore

type commandZRemRangeByScore string
type commandZRemRangeByScoreP struct{ Pipeliner }

func (commandZRemRangeByScore) String() string         { return "ZREMRANGEBYSCORE" }
func (commandZRemRangeByScore) Class() string          { return "SortedSet" }
func (commandZRemRangeByScore) RequireVersion() string { return "1.2.0" }
func (commandZRemRangeByScore) Forbid() bool           { return false }
func (commandZRemRangeByScore) WarnVersion() string    { return "0.0.0" }
func (commandZRemRangeByScore) Warning() string        { return "" }
func (commandZRemRangeByScore) P(p Pipeliner) commandZRemRangeByScoreP {
	return commandZRemRangeByScoreP{p}
}
func (b commandZRemRangeByScoreP) Cmd(key, min, max string) {
	b.Pipeliner.Cmd(b.builder().ZRemRangeByScoreCompleted(key, min, max))
}

var CommandZRank commandZRank

type commandZRank string
type commandZRankP struct{ Pipeliner }

func (commandZRank) String() string              { return "ZRANK" }
func (commandZRank) Class() string               { return "SortedSet" }
func (commandZRank) RequireVersion() string      { return "2.0.0" }
func (commandZRank) Forbid() bool                { return false }
func (commandZRank) WarnVersion() string         { return "0.0.0" }
func (commandZRank) Warning() string             { return "" }
func (commandZRank) P(p Pipeliner) commandZRankP { return commandZRankP{p} }
func (b commandZRankP) Cmd(key, member string) {
	b.Pipeliner.Cmd(b.builder().ZRankCompleted(key, member))
}

var CommandZRankWithScore commandZRankWithScore

type commandZRankWithScore string
type commandZRankWithScoreP struct{ Pipeliner }

func (commandZRankWithScore) String() string                       { return "ZRANK WITHSCORE" }
func (commandZRankWithScore) Class() string                        { return "SortedSet" }
func (commandZRankWithScore) RequireVersion() string               { return "7.2.0" }
func (commandZRankWithScore) Forbid() bool                         { return false }
func (commandZRankWithScore) WarnVersion() string                  { return "0.0.0" }
func (commandZRankWithScore) Warning() string                      { return "" }
func (commandZRankWithScore) P(p Pipeliner) commandZRankWithScoreP { return commandZRankWithScoreP{p} }
func (b commandZRankWithScoreP) Cmd(key, member string) {
	b.Pipeliner.Cmd(b.builder().ZRankWithScoreCompleted(key, member))
}

var CommandZRevRank commandZRevRank

type commandZRevRank string
type commandZRevRankP struct{ Pipeliner }

func (commandZRevRank) String() string                 { return "ZREVRANK" }
func (commandZRevRank) Class() string                  { return "SortedSet" }
func (commandZRevRank) RequireVersion() string         { return "2.0.0" }
func (commandZRevRank) Forbid() bool                   { return false }
func (commandZRevRank) WarnVersion() string            { return "0.0.0" }
func (commandZRevRank) Warning() string                { return "" }
func (commandZRevRank) P(p Pipeliner) commandZRevRankP { return commandZRevRankP{p} }
func (b commandZRevRankP) Cmd(key, member string) {
	b.Pipeliner.Cmd(b.builder().ZRevRankCompleted(key, member))
}

var CommandZRevRankWithScore commandZRevRankWithScore

type commandZRevRankWithScore string
type commandZRevRankWithScoreP struct{ Pipeliner }

func (commandZRevRankWithScore) String() string         { return "ZREVRANK WITHSCORE" }
func (commandZRevRankWithScore) Class() string          { return "SortedSet" }
func (commandZRevRankWithScore) RequireVersion() string { return "7.2.0" }
func (commandZRevRankWithScore) Forbid() bool           { return false }
func (commandZRevRankWithScore) WarnVersion() string    { return "0.0.0" }
func (commandZRevRankWithScore) Warning() string        { return "" }
func (commandZRevRankWithScore) P(p Pipeliner) commandZRevRankWithScoreP {
	return commandZRevRankWithScoreP{p}
}
func (b commandZRevRankWithScoreP) Cmd(key, member string) {
	b.Pipeliner.Cmd(b.builder().ZRevRankWithScoreCompleted(key, member))
}

var CommandZRange commandZRange

type commandZRange string
type commandZRangeP struct{ Pipeliner }

func (commandZRange) String() string               { return "ZRANGE" }
func (commandZRange) Class() string                { return "SortedSet" }
func (commandZRange) RequireVersion() string       { return "1.2.0" }
func (commandZRange) Forbid() bool                 { return false }
func (commandZRange) WarnVersion() string          { return "0.0.0" }
func (commandZRange) Warning() string              { return "" }
func (commandZRange) P(p Pipeliner) commandZRangeP { return commandZRangeP{p} }
func (b commandZRangeP) Cmd(key string, start, stop int64) {
	b.Pipeliner.Cmd(b.builder().ZRangeCompleted(key, start, stop))
}

var CommandZRevRange commandZRevRange

type commandZRevRange string
type commandZRevRangeP struct{ Pipeliner }

func (commandZRevRange) String() string                  { return "ZREVRANGE" }
func (commandZRevRange) Class() string                   { return "SortedSet" }
func (commandZRevRange) RequireVersion() string          { return "1.2.0" }
func (commandZRevRange) Forbid() bool                    { return false }
func (commandZRevRange) WarnVersion() string             { return "6.2.0" }
func (commandZRevRange) Warning() string                 { return commandZRevRangeWarning }
func (commandZRevRange) P(p Pipeliner) commandZRevRangeP { return commandZRevRangeP{p} }
func (b commandZRevRangeP) Cmd(key string, start, stop int64) {
	b.Pipeliner.Cmd(b.builder().ZRevRangeCompleted(key, start, stop))
}

var CommandZRangeWithScores commandZRangeWithScores

type commandZRangeWithScores string
type commandZRangeWithScoresP struct{ Pipeliner }

func (commandZRangeWithScores) String() string         { return "ZRANGEWITHSCORES" }
func (commandZRangeWithScores) Class() string          { return "SortedSet" }
func (commandZRangeWithScores) RequireVersion() string { return "1.2.0" }
func (commandZRangeWithScores) Forbid() bool           { return false }
func (commandZRangeWithScores) WarnVersion() string    { return "0.0.0" }
func (commandZRangeWithScores) Warning() string        { return "" }
func (commandZRangeWithScores) P(p Pipeliner) commandZRangeWithScoresP {
	return commandZRangeWithScoresP{p}
}
func (b commandZRangeWithScoresP) Cmd(key string, start, stop int64) {
	b.Pipeliner.Cmd(b.builder().ZRangeWithScoresCompleted(key, start, stop))
}

var CommandZRevRangeWithScores commandZRevRangeWithScores

type commandZRevRangeWithScores string
type commandZRevRangeWithScoresP struct{ Pipeliner }

func (commandZRevRangeWithScores) String() string         { return "ZREVRANGEWITHSCORES" }
func (commandZRevRangeWithScores) Class() string          { return "SortedSet" }
func (commandZRevRangeWithScores) RequireVersion() string { return "1.2.0" }
func (commandZRevRangeWithScores) Forbid() bool           { return false }
func (commandZRevRangeWithScores) WarnVersion() string    { return "6.2.0" }
func (commandZRevRangeWithScores) Warning() string        { return commandZRevRangeWithScoresWarning }
func (commandZRevRangeWithScores) P(p Pipeliner) commandZRevRangeWithScoresP {
	return commandZRevRangeWithScoresP{p}
}
func (b commandZRevRangeWithScoresP) Cmd(key string, start, stop int64) {
	b.Pipeliner.Cmd(b.builder().ZRevRangeWithScoresCompleted(key, start, stop))
}

var CommandZRangeByLex commandZRangeByLex

type commandZRangeByLex string
type commandZRangeByLexP struct{ Pipeliner }

func (commandZRangeByLex) String() string                    { return "ZRANGEBYLEX" }
func (commandZRangeByLex) Class() string                     { return "SortedSet" }
func (commandZRangeByLex) RequireVersion() string            { return "2.8.9" }
func (commandZRangeByLex) Forbid() bool                      { return false }
func (commandZRangeByLex) WarnVersion() string               { return "6.2.0" }
func (commandZRangeByLex) Warning() string                   { return commandZRangeByLexWarning }
func (commandZRangeByLex) P(p Pipeliner) commandZRangeByLexP { return commandZRangeByLexP{p} }
func (b commandZRangeByLexP) Cmd(key string, opt ZRangeBy) {
	b.Pipeliner.Cmd(b.builder().ZRangeByLexCompleted(key, opt))
}

var CommandZRevRangeByLex commandZRevRangeByLex

type commandZRevRangeByLex string
type commandZRevRangeByLexP struct{ Pipeliner }

func (commandZRevRangeByLex) String() string                       { return "ZREVRANGEBYLEX" }
func (commandZRevRangeByLex) Class() string                        { return "SortedSet" }
func (commandZRevRangeByLex) RequireVersion() string               { return "2.8.9" }
func (commandZRevRangeByLex) Forbid() bool                         { return false }
func (commandZRevRangeByLex) WarnVersion() string                  { return "6.2.0" }
func (commandZRevRangeByLex) Warning() string                      { return commandZRevRangeByLexWarning }
func (commandZRevRangeByLex) P(p Pipeliner) commandZRevRangeByLexP { return commandZRevRangeByLexP{p} }
func (b commandZRevRangeByLexP) Cmd(key string, opt ZRangeBy) {
	b.Pipeliner.Cmd(b.builder().ZRevRangeByLexCompleted(key, opt))
}

var CommandZRangeByScore commandZRangeByScore

type commandZRangeByScore string
type commandZRangeByScoreP struct{ Pipeliner }

func (commandZRangeByScore) String() string                      { return "ZRANGEBYSCORE" }
func (commandZRangeByScore) Class() string                       { return "SortedSet" }
func (commandZRangeByScore) RequireVersion() string              { return "1.0.5" }
func (commandZRangeByScore) Forbid() bool                        { return false }
func (commandZRangeByScore) WarnVersion() string                 { return "6.2.0" }
func (commandZRangeByScore) Warning() string                     { return commandZRangeByScoreWarning }
func (commandZRangeByScore) P(p Pipeliner) commandZRangeByScoreP { return commandZRangeByScoreP{p} }
func (b commandZRangeByScoreP) Cmd(key string, opt ZRangeBy) {
	b.Pipeliner.Cmd(b.builder().ZRangeByScoreCompleted(key, opt))
}

var CommandZRevRangeByScore commandZRevRangeByScore

type commandZRevRangeByScore string
type commandZRevRangeByScoreP struct{ Pipeliner }

func (commandZRevRangeByScore) String() string         { return "ZREVRANGEBYSCORE" }
func (commandZRevRangeByScore) Class() string          { return "SortedSet" }
func (commandZRevRangeByScore) RequireVersion() string { return "2.2.0" }
func (commandZRevRangeByScore) Forbid() bool           { return false }
func (commandZRevRangeByScore) WarnVersion() string    { return "6.2.0" }
func (commandZRevRangeByScore) Warning() string        { return commandZRevRangeByScoreWarning }
func (commandZRevRangeByScore) P(p Pipeliner) commandZRevRangeByScoreP {
	return commandZRevRangeByScoreP{p}
}
func (b commandZRevRangeByScoreP) Cmd(key string, opt ZRangeBy) {
	b.Pipeliner.Cmd(b.builder().ZRevRangeByScoreCompleted(key, opt))
}

var CommandZRangeByScoreWithScores commandZRangeByScoreWithScores

type commandZRangeByScoreWithScores string
type commandZRangeByScoreWithScoresP struct{ Pipeliner }

func (commandZRangeByScoreWithScores) String() string         { return "ZRANGEBYSCOREWITHSCORES" }
func (commandZRangeByScoreWithScores) Class() string          { return "SortedSet" }
func (commandZRangeByScoreWithScores) RequireVersion() string { return "2.0.0" }
func (commandZRangeByScoreWithScores) Forbid() bool           { return false }
func (commandZRangeByScoreWithScores) WarnVersion() string    { return "6.2.0" }
func (commandZRangeByScoreWithScores) Warning() string        { return commandZRangeByScoreWithScoresWarning }
func (commandZRangeByScoreWithScores) P(p Pipeliner) commandZRangeByScoreWithScoresP {
	return commandZRangeByScoreWithScoresP{p}
}
func (b commandZRangeByScoreWithScoresP) Cmd(key string, opt ZRangeBy) {
	b.Pipeliner.Cmd(b.builder().ZRangeByScoreWithScoresCompleted(key, opt))
}

var CommandZRevRangeByScoreWithScores commandZRevRangeByScoreWithScores

type commandZRevRangeByScoreWithScores string
type commandZRevRangeByScoreWithScoresP struct{ Pipeliner }

func (commandZRevRangeByScoreWithScores) String() string         { return "ZREVRANGEBYSCOREWITHSCORES" }
func (commandZRevRangeByScoreWithScores) Class() string          { return "SortedSet" }
func (commandZRevRangeByScoreWithScores) RequireVersion() string { return "2.2.0" }
func (commandZRevRangeByScoreWithScores) Forbid() bool           { return false }
func (commandZRevRangeByScoreWithScores) WarnVersion() string    { return "6.2.0" }
func (commandZRevRangeByScoreWithScores) Warning() string {
	return commandZRevRangeByScoreWithScoresWarning
}
func (commandZRevRangeByScoreWithScores) P(p Pipeliner) commandZRevRangeByScoreWithScoresP {
	return commandZRevRangeByScoreWithScoresP{p}
}
func (b commandZRevRangeByScoreWithScoresP) Cmd(key string, opt ZRangeBy) {
	b.Pipeliner.Cmd(b.builder().ZRevRangeByScoreWithScoresCompleted(key, opt))
}

var CommandZRangeStore commandZRangeStore

type commandZRangeStore string
type commandZRangeStoreP struct{ Pipeliner }

func (commandZRangeStore) String() string                    { return "ZRANGESTORE" }
func (commandZRangeStore) Class() string                     { return "SortedSet" }
func (commandZRangeStore) RequireVersion() string            { return "6.2.0" }
func (commandZRangeStore) Forbid() bool                      { return false }
func (commandZRangeStore) WarnVersion() string               { return "0.0.0" }
func (commandZRangeStore) Warning() string                   { return "" }
func (commandZRangeStore) P(p Pipeliner) commandZRangeStoreP { return commandZRangeStoreP{p} }
func (b commandZRangeStoreP) Cmd(dst string, z ZRangeArgs) {
	b.Pipeliner.Cmd(b.builder().ZRangeStoreCompleted(dst, z))
}

var CommandZRangeArgsWithOption commandZRangeArgsWithOption

type commandZRangeArgsWithOption string
type commandZRangeArgsWithOptionP struct{ Pipeliner }

func (commandZRangeArgsWithOption) String() string         { return "ZRANGE" }
func (commandZRangeArgsWithOption) Class() string          { return "SortedSet" }
func (commandZRangeArgsWithOption) RequireVersion() string { return "6.2.0" }
func (commandZRangeArgsWithOption) Forbid() bool           { return false }
func (commandZRangeArgsWithOption) WarnVersion() string    { return "0.0.0" }
func (commandZRangeArgsWithOption) Warning() string        { return "" }
func (commandZRangeArgsWithOption) P(p Pipeliner) commandZRangeArgsWithOptionP {
	return commandZRangeArgsWithOptionP{p}
}
func (b commandZRangeArgsWithOptionP) Cmd(z ZRangeArgs) {
	b.Pipeliner.Cmd(b.builder().ZRangeArgsCompleted(z))
}

var CommandZRangeArgs commandZRangeArgs

type commandZRangeArgs string
type commandZRangeArgsP struct{ Pipeliner }

func (commandZRangeArgs) String() string                   { return "ZRANGE" }
func (commandZRangeArgs) Class() string                    { return "SortedSet" }
func (commandZRangeArgs) RequireVersion() string           { return "1.2.0" }
func (commandZRangeArgs) Forbid() bool                     { return false }
func (commandZRangeArgs) WarnVersion() string              { return "0.0.0" }
func (commandZRangeArgs) Warning() string                  { return "" }
func (commandZRangeArgs) P(p Pipeliner) commandZRangeArgsP { return commandZRangeArgsP{p} }
func (b commandZRangeArgsP) Cmd(z ZRangeArgs)              { b.Pipeliner.Cmd(b.builder().ZRangeArgsCompleted(z)) }

var CommandZRangeArgsWithScoresWithOption commandZRangeArgsWithScoresWithOption

type commandZRangeArgsWithScoresWithOption string
type commandZRangeArgsWithScoresWithOptionP struct{ Pipeliner }

func (commandZRangeArgsWithScoresWithOption) String() string         { return "ZRANGE WITHSCORES" }
func (commandZRangeArgsWithScoresWithOption) Class() string          { return "SortedSet" }
func (commandZRangeArgsWithScoresWithOption) RequireVersion() string { return "6.2.0" }
func (commandZRangeArgsWithScoresWithOption) Forbid() bool           { return false }
func (commandZRangeArgsWithScoresWithOption) WarnVersion() string    { return "0.0.0" }
func (commandZRangeArgsWithScoresWithOption) Warning() string        { return "" }
func (commandZRangeArgsWithScoresWithOption) P(p Pipeliner) commandZRangeArgsWithScoresWithOptionP {
	return commandZRangeArgsWithScoresWithOptionP{p}
}
func (b commandZRangeArgsWithScoresWithOptionP) Cmd(z ZRangeArgs) {
	b.Pipeliner.Cmd(b.builder().ZRangeArgsCompleted(z))
}

var CommandZRangeArgsWithScores commandZRangeArgsWithScores

type commandZRangeArgsWithScores string
type commandZRangeArgsWithScoresP struct{ Pipeliner }

func (commandZRangeArgsWithScores) String() string         { return "ZRANGE WITHSCORES" }
func (commandZRangeArgsWithScores) Class() string          { return "SortedSet" }
func (commandZRangeArgsWithScores) RequireVersion() string { return "1.2.0" }
func (commandZRangeArgsWithScores) Forbid() bool           { return false }
func (commandZRangeArgsWithScores) WarnVersion() string    { return "0.0.0" }
func (commandZRangeArgsWithScores) Warning() string        { return "" }
func (commandZRangeArgsWithScores) P(p Pipeliner) commandZRangeArgsWithScoresP {
	return commandZRangeArgsWithScoresP{p}
}
func (b commandZRangeArgsWithScoresP) Cmd(z ZRangeArgs) {
	b.Pipeliner.Cmd(b.builder().ZRangeArgsCompleted(z))
}

var CommandXAck commandXAck

type commandXAck string
type commandXAckP struct{ Pipeliner }

func (commandXAck) String() string             { return "XACK" }
func (commandXAck) Class() string              { return "Stream" }
func (commandXAck) RequireVersion() string     { return "5.0.0" }
func (commandXAck) Forbid() bool               { return false }
func (commandXAck) WarnVersion() string        { return "0.0.0" }
func (commandXAck) Warning() string            { return "" }
func (commandXAck) P(p Pipeliner) commandXAckP { return commandXAckP{p} }
func (b commandXAckP) Cmd(stream, group string, ids ...string) {
	b.Pipeliner.Cmd(b.builder().XAckCompleted(stream, group, ids...))
}

var CommandXAdd commandXAdd

type commandXAdd string
type commandXAddP struct{ Pipeliner }

func (commandXAdd) String() string             { return "XADD" }
func (commandXAdd) Class() string              { return "Stream" }
func (commandXAdd) RequireVersion() string     { return "5.0.0" }
func (commandXAdd) Forbid() bool               { return false }
func (commandXAdd) WarnVersion() string        { return "0.0.0" }
func (commandXAdd) Warning() string            { return "" }
func (commandXAdd) P(p Pipeliner) commandXAddP { return commandXAddP{p} }
func (b commandXAddP) Cmd(a XAddArgs)          { b.Pipeliner.Cmd(b.builder().XAddCompleted(a)) }

var CommandXAddNoMKStream commandXAddNoMKStream

type commandXAddNoMKStream string

func (commandXAddNoMKStream) String() string         { return "XADD NOMKSTREAM" }
func (commandXAddNoMKStream) Class() string          { return "Stream" }
func (commandXAddNoMKStream) RequireVersion() string { return "6.2.0" }
func (commandXAddNoMKStream) Forbid() bool           { return false }
func (commandXAddNoMKStream) WarnVersion() string    { return "0.0.0" }
func (commandXAddNoMKStream) Warning() string        { return "" }

var CommandXAddMaxLen commandXAddMaxLen

type commandXAddMaxLen string

func (commandXAddMaxLen) String() string         { return "XADD MAXLEN" }
func (commandXAddMaxLen) Class() string          { return "Stream" }
func (commandXAddMaxLen) RequireVersion() string { return "6.2.0" }
func (commandXAddMaxLen) Forbid() bool           { return false }
func (commandXAddMaxLen) WarnVersion() string    { return "0.0.0" }
func (commandXAddMaxLen) Warning() string        { return "" }

var CommandXAddMinID commandXAddMinID

type commandXAddMinID string

func (commandXAddMinID) String() string         { return "XADD MINID" }
func (commandXAddMinID) Class() string          { return "Stream" }
func (commandXAddMinID) RequireVersion() string { return "6.2.0" }
func (commandXAddMinID) Forbid() bool           { return false }
func (commandXAddMinID) WarnVersion() string    { return "0.0.0" }
func (commandXAddMinID) Warning() string        { return "" }

var CommandXAddLimit commandXAddLimit

type commandXAddLimit string

func (commandXAddLimit) String() string         { return "XADD LIMIT" }
func (commandXAddLimit) Class() string          { return "Stream" }
func (commandXAddLimit) RequireVersion() string { return "6.2.0" }
func (commandXAddLimit) Forbid() bool           { return false }
func (commandXAddLimit) WarnVersion() string    { return "0.0.0" }
func (commandXAddLimit) Warning() string        { return "" }

var CommandXAutoClaim commandXAutoClaim

type commandXAutoClaim string
type commandXAutoClaimP struct{ Pipeliner }

func (commandXAutoClaim) String() string                   { return "XAUTOCLAIM" }
func (commandXAutoClaim) Class() string                    { return "Stream" }
func (commandXAutoClaim) RequireVersion() string           { return "6.2.0" }
func (commandXAutoClaim) Forbid() bool                     { return false }
func (commandXAutoClaim) WarnVersion() string              { return "0.0.0" }
func (commandXAutoClaim) Warning() string                  { return "" }
func (commandXAutoClaim) P(p Pipeliner) commandXAutoClaimP { return commandXAutoClaimP{p} }
func (b commandXAutoClaimP) Cmd(a XAutoClaimArgs) {
	b.Pipeliner.Cmd(b.builder().XAutoClaimCompleted(a))
}

var CommandXAutoClaimJustID commandXAutoClaimJustID

type commandXAutoClaimJustID string
type commandXAutoClaimJustIDP struct{ Pipeliner }

func (commandXAutoClaimJustID) String() string         { return "XAUTOCLAIM JUSTID" }
func (commandXAutoClaimJustID) Class() string          { return "Stream" }
func (commandXAutoClaimJustID) RequireVersion() string { return "6.2.0" }
func (commandXAutoClaimJustID) Forbid() bool           { return false }
func (commandXAutoClaimJustID) WarnVersion() string    { return "0.0.0" }
func (commandXAutoClaimJustID) Warning() string        { return "" }
func (commandXAutoClaimJustID) P(p Pipeliner) commandXAutoClaimJustIDP {
	return commandXAutoClaimJustIDP{p}
}
func (b commandXAutoClaimJustIDP) Cmd(a XAutoClaimArgs) {
	b.Pipeliner.Cmd(b.builder().XAutoClaimJustIDCompleted(a))
}

var CommandXClaim commandXClaim

type commandXClaim string
type commandXClaimP struct{ Pipeliner }

func (commandXClaim) String() string               { return "XCLAIM" }
func (commandXClaim) Class() string                { return "Stream" }
func (commandXClaim) RequireVersion() string       { return "5.0.0" }
func (commandXClaim) Forbid() bool                 { return false }
func (commandXClaim) WarnVersion() string          { return "0.0.0" }
func (commandXClaim) Warning() string              { return "" }
func (commandXClaim) P(p Pipeliner) commandXClaimP { return commandXClaimP{p} }
func (b commandXClaimP) Cmd(a XClaimArgs)          { b.Pipeliner.Cmd(b.builder().XClaimCompleted(a)) }

var CommandXClaimJustID commandXClaimJustID

type commandXClaimJustID string
type commandXClaimJustIDP struct{ Pipeliner }

func (commandXClaimJustID) String() string                     { return "XCLAIM JUSTID" }
func (commandXClaimJustID) Class() string                      { return "Stream" }
func (commandXClaimJustID) RequireVersion() string             { return "5.0.0" }
func (commandXClaimJustID) Forbid() bool                       { return false }
func (commandXClaimJustID) WarnVersion() string                { return "0.0.0" }
func (commandXClaimJustID) Warning() string                    { return "" }
func (commandXClaimJustID) P(p Pipeliner) commandXClaimJustIDP { return commandXClaimJustIDP{p} }
func (b commandXClaimJustIDP) Cmd(a XClaimArgs) {
	b.Pipeliner.Cmd(b.builder().XClaimJustIDCompleted(a))
}

var CommandXDel commandXDel

type commandXDel string
type commandXDelP struct{ Pipeliner }

func (commandXDel) String() string             { return "XDEL" }
func (commandXDel) Class() string              { return "Stream" }
func (commandXDel) RequireVersion() string     { return "5.0.0" }
func (commandXDel) Forbid() bool               { return false }
func (commandXDel) WarnVersion() string        { return "0.0.0" }
func (commandXDel) Warning() string            { return "" }
func (commandXDel) P(p Pipeliner) commandXDelP { return commandXDelP{p} }
func (b commandXDelP) Cmd(stream string, ids ...string) {
	b.Pipeliner.Cmd(b.builder().XDelCompleted(stream, ids...))
}

var CommandXGroupCreate commandXGroupCreate

type commandXGroupCreate string
type commandXGroupCreateP struct{ Pipeliner }

func (commandXGroupCreate) String() string                     { return "XGROUP CREATE" }
func (commandXGroupCreate) Class() string                      { return "Stream" }
func (commandXGroupCreate) RequireVersion() string             { return "5.0.0" }
func (commandXGroupCreate) Forbid() bool                       { return false }
func (commandXGroupCreate) WarnVersion() string                { return "0.0.0" }
func (commandXGroupCreate) Warning() string                    { return "" }
func (commandXGroupCreate) P(p Pipeliner) commandXGroupCreateP { return commandXGroupCreateP{p} }
func (b commandXGroupCreateP) Cmd(stream, group, start string) {
	b.Pipeliner.Cmd(b.builder().XGroupCreateCompleted(stream, group, start))
}

var CommandXGroupCreateMkStream commandXGroupCreateMkStream

type commandXGroupCreateMkStream string
type commandXGroupCreateMkStreamP struct{ Pipeliner }

func (commandXGroupCreateMkStream) String() string         { return "XGROUP CREATE MKSTREAM" }
func (commandXGroupCreateMkStream) Class() string          { return "Stream" }
func (commandXGroupCreateMkStream) RequireVersion() string { return "5.0.0" }
func (commandXGroupCreateMkStream) Forbid() bool           { return false }
func (commandXGroupCreateMkStream) WarnVersion() string    { return "0.0.0" }
func (commandXGroupCreateMkStream) Warning() string        { return "" }
func (commandXGroupCreateMkStream) P(p Pipeliner) commandXGroupCreateMkStreamP {
	return commandXGroupCreateMkStreamP{p}
}
func (b commandXGroupCreateMkStreamP) Cmd(stream, group, start string) {
	b.Pipeliner.Cmd(b.builder().XGroupCreateMkStreamCompleted(stream, group, start))
}

var CommandXGroupCreateConsumer commandXGroupCreateConsumer

type commandXGroupCreateConsumer string
type commandXGroupCreateConsumerP struct{ Pipeliner }

func (commandXGroupCreateConsumer) String() string         { return "XGROUP CREATECONSUMER" }
func (commandXGroupCreateConsumer) Class() string          { return "Stream" }
func (commandXGroupCreateConsumer) RequireVersion() string { return "6.2.0" }
func (commandXGroupCreateConsumer) Forbid() bool           { return false }
func (commandXGroupCreateConsumer) WarnVersion() string    { return "0.0.0" }
func (commandXGroupCreateConsumer) Warning() string        { return "" }
func (commandXGroupCreateConsumer) P(p Pipeliner) commandXGroupCreateConsumerP {
	return commandXGroupCreateConsumerP{p}
}
func (b commandXGroupCreateConsumerP) Cmd(stream, group, consumer string) {
	b.Pipeliner.Cmd(b.builder().XGroupCreateConsumerCompleted(stream, group, consumer))
}

var CommandXGroupDelConsumer commandXGroupDelConsumer

type commandXGroupDelConsumer string
type commandXGroupDelConsumerP struct{ Pipeliner }

func (commandXGroupDelConsumer) String() string         { return "XGROUP DELCONSUMER" }
func (commandXGroupDelConsumer) Class() string          { return "Stream" }
func (commandXGroupDelConsumer) RequireVersion() string { return "5.0.0" }
func (commandXGroupDelConsumer) Forbid() bool           { return false }
func (commandXGroupDelConsumer) WarnVersion() string    { return "0.0.0" }
func (commandXGroupDelConsumer) Warning() string        { return "" }
func (commandXGroupDelConsumer) P(p Pipeliner) commandXGroupDelConsumerP {
	return commandXGroupDelConsumerP{p}
}
func (b commandXGroupDelConsumerP) Cmd(stream, group, consumer string) {
	b.Pipeliner.Cmd(b.builder().XGroupDelConsumerCompleted(stream, group, consumer))
}

var CommandXGroupDestroy commandXGroupDestroy

type commandXGroupDestroy string
type commandXGroupDestroyP struct{ Pipeliner }

func (commandXGroupDestroy) String() string                      { return "XGROUP DESTROY" }
func (commandXGroupDestroy) Class() string                       { return "Stream" }
func (commandXGroupDestroy) RequireVersion() string              { return "5.0.0" }
func (commandXGroupDestroy) Forbid() bool                        { return false }
func (commandXGroupDestroy) WarnVersion() string                 { return "0.0.0" }
func (commandXGroupDestroy) Warning() string                     { return "" }
func (commandXGroupDestroy) P(p Pipeliner) commandXGroupDestroyP { return commandXGroupDestroyP{p} }
func (b commandXGroupDestroyP) Cmd(stream, group string) {
	b.Pipeliner.Cmd(b.builder().XGroupDestroyCompleted(stream, group))
}

var CommandXGroupSetID commandXGroupSetID

type commandXGroupSetID string
type commandXGroupSetIDP struct{ Pipeliner }

func (commandXGroupSetID) String() string                    { return "XGROUP SETID" }
func (commandXGroupSetID) Class() string                     { return "Stream" }
func (commandXGroupSetID) RequireVersion() string            { return "5.0.0" }
func (commandXGroupSetID) Forbid() bool                      { return false }
func (commandXGroupSetID) WarnVersion() string               { return "0.0.0" }
func (commandXGroupSetID) Warning() string                   { return "" }
func (commandXGroupSetID) P(p Pipeliner) commandXGroupSetIDP { return commandXGroupSetIDP{p} }
func (b commandXGroupSetIDP) Cmd(stream, group, start string) {
	b.Pipeliner.Cmd(b.builder().XGroupSetIDCompleted(stream, group, start))
}

var CommandXInfoConsumers commandXInfoConsumers

type commandXInfoConsumers string
type commandXInfoConsumersP struct{ Pipeliner }

func (commandXInfoConsumers) String() string                       { return "XINFO CONSUMERS" }
func (commandXInfoConsumers) Class() string                        { return "Stream" }
func (commandXInfoConsumers) RequireVersion() string               { return "5.0.0" }
func (commandXInfoConsumers) Forbid() bool                         { return false }
func (commandXInfoConsumers) WarnVersion() string                  { return "0.0.0" }
func (commandXInfoConsumers) Warning() string                      { return "" }
func (commandXInfoConsumers) P(p Pipeliner) commandXInfoConsumersP { return commandXInfoConsumersP{p} }
func (b commandXInfoConsumersP) Cmd(key, group string) {
	b.Pipeliner.Cmd(b.builder().XInfoConsumersCompleted(key, group))
}

var CommandXInfoGroups commandXInfoGroups

type commandXInfoGroups string
type commandXInfoGroupsP struct{ Pipeliner }

func (commandXInfoGroups) String() string                    { return "XINFO GROUPS" }
func (commandXInfoGroups) Class() string                     { return "Stream" }
func (commandXInfoGroups) RequireVersion() string            { return "5.0.0" }
func (commandXInfoGroups) Forbid() bool                      { return false }
func (commandXInfoGroups) WarnVersion() string               { return "0.0.0" }
func (commandXInfoGroups) Warning() string                   { return "" }
func (commandXInfoGroups) P(p Pipeliner) commandXInfoGroupsP { return commandXInfoGroupsP{p} }
func (b commandXInfoGroupsP) Cmd(key string)                 { b.Pipeliner.Cmd(b.builder().XInfoGroupsCompleted(key)) }

var CommandXInfoStream commandXInfoStream

type commandXInfoStream string
type commandXInfoStreamP struct{ Pipeliner }

func (commandXInfoStream) String() string                    { return "XINFO STREAM" }
func (commandXInfoStream) Class() string                     { return "Stream" }
func (commandXInfoStream) RequireVersion() string            { return "5.0.0" }
func (commandXInfoStream) Forbid() bool                      { return false }
func (commandXInfoStream) WarnVersion() string               { return "0.0.0" }
func (commandXInfoStream) Warning() string                   { return "" }
func (commandXInfoStream) P(p Pipeliner) commandXInfoStreamP { return commandXInfoStreamP{p} }
func (b commandXInfoStreamP) Cmd(key string)                 { b.Pipeliner.Cmd(b.builder().XInfoStreamCompleted(key)) }

var CommandXInfoStreamFull commandXInfoStreamFull

type commandXInfoStreamFull string
type commandXInfoStreamFullP struct{ Pipeliner }

func (commandXInfoStreamFull) String() string         { return "XINFO STREAM FULL" }
func (commandXInfoStreamFull) Class() string          { return "Stream" }
func (commandXInfoStreamFull) RequireVersion() string { return "6.0.0" }
func (commandXInfoStreamFull) Forbid() bool           { return false }
func (commandXInfoStreamFull) WarnVersion() string    { return "0.0.0" }
func (commandXInfoStreamFull) Warning() string        { return "" }
func (commandXInfoStreamFull) P(p Pipeliner) commandXInfoStreamFullP {
	return commandXInfoStreamFullP{p}
}
func (b commandXInfoStreamFullP) Cmd(key string, count int64) {
	b.Pipeliner.Cmd(b.builder().XInfoStreamFullCompleted(key, count))
}

var CommandXLen commandXLen

type commandXLen string
type commandXLenP struct{ Pipeliner }

func (commandXLen) String() string             { return "XLEN" }
func (commandXLen) Class() string              { return "Stream" }
func (commandXLen) RequireVersion() string     { return "5.0.0" }
func (commandXLen) Forbid() bool               { return false }
func (commandXLen) WarnVersion() string        { return "0.0.0" }
func (commandXLen) Warning() string            { return "" }
func (commandXLen) P(p Pipeliner) commandXLenP { return commandXLenP{p} }
func (b commandXLenP) Cmd(stream string)       { b.Pipeliner.Cmd(b.builder().XLenCompleted(stream)) }

var CommandXPending commandXPending

type commandXPending string
type commandXPendingP struct{ Pipeliner }

func (commandXPending) String() string                 { return "XPENDING" }
func (commandXPending) Class() string                  { return "Stream" }
func (commandXPending) RequireVersion() string         { return "5.0.0" }
func (commandXPending) Forbid() bool                   { return false }
func (commandXPending) WarnVersion() string            { return "0.0.0" }
func (commandXPending) Warning() string                { return "" }
func (commandXPending) P(p Pipeliner) commandXPendingP { return commandXPendingP{p} }
func (b commandXPendingP) Cmd(stream, group string) {
	b.Pipeliner.Cmd(b.builder().XPendingCompleted(stream, group))
}

var CommandXPendingExt commandXPendingExt

type commandXPendingExt string
type commandXPendingExtP struct{ Pipeliner }

func (commandXPendingExt) String() string                    { return "XPENDING" }
func (commandXPendingExt) Class() string                     { return "Stream" }
func (commandXPendingExt) RequireVersion() string            { return "6.2.0" }
func (commandXPendingExt) Forbid() bool                      { return false }
func (commandXPendingExt) WarnVersion() string               { return "0.0.0" }
func (commandXPendingExt) Warning() string                   { return "" }
func (commandXPendingExt) P(p Pipeliner) commandXPendingExtP { return commandXPendingExtP{p} }
func (b commandXPendingExtP) Cmd(a XPendingExtArgs) {
	b.Pipeliner.Cmd(b.builder().XPendingExtCompleted(a))
}

var CommandXRange commandXRange

type commandXRange string
type commandXRangeP struct{ Pipeliner }

func (commandXRange) String() string               { return "XRANGE" }
func (commandXRange) Class() string                { return "Stream" }
func (commandXRange) RequireVersion() string       { return "5.0.0" }
func (commandXRange) Forbid() bool                 { return false }
func (commandXRange) WarnVersion() string          { return "0.0.0" }
func (commandXRange) Warning() string              { return "" }
func (commandXRange) P(p Pipeliner) commandXRangeP { return commandXRangeP{p} }
func (b commandXRangeP) Cmd(stream, start, stop string) {
	b.Pipeliner.Cmd(b.builder().XRangeCompleted(stream, start, stop))
}

var CommandXRangeN commandXRangeN

type commandXRangeN string
type commandXRangeNP struct{ Pipeliner }

func (commandXRangeN) String() string                { return "XRANGE COUNT" }
func (commandXRangeN) Class() string                 { return "Stream" }
func (commandXRangeN) RequireVersion() string        { return "6.2.0" }
func (commandXRangeN) Forbid() bool                  { return false }
func (commandXRangeN) WarnVersion() string           { return "0.0.0" }
func (commandXRangeN) Warning() string               { return "" }
func (commandXRangeN) P(p Pipeliner) commandXRangeNP { return commandXRangeNP{p} }
func (b commandXRangeNP) Cmd(stream, start, stop string, count int64) {
	b.Pipeliner.Cmd(b.builder().XRangeNCompleted(stream, start, stop, count))
}

var CommandXRevRange commandXRevRange

type commandXRevRange string
type commandXRevRangeP struct{ Pipeliner }

func (commandXRevRange) String() string                  { return "XREVRANGE" }
func (commandXRevRange) Class() string                   { return "Stream" }
func (commandXRevRange) RequireVersion() string          { return "5.0.0" }
func (commandXRevRange) Forbid() bool                    { return false }
func (commandXRevRange) WarnVersion() string             { return "0.0.0" }
func (commandXRevRange) Warning() string                 { return "" }
func (commandXRevRange) P(p Pipeliner) commandXRevRangeP { return commandXRevRangeP{p} }
func (b commandXRevRangeP) Cmd(stream, stop, start string) {
	b.Pipeliner.Cmd(b.builder().XRevRangeCompleted(stream, start, stop))
}

var CommandXRevRangeN commandXRevRangeN

type commandXRevRangeN string
type commandXRevRangeNP struct{ Pipeliner }

func (commandXRevRangeN) String() string                   { return "XREVRANGE COUNT" }
func (commandXRevRangeN) Class() string                    { return "Stream" }
func (commandXRevRangeN) RequireVersion() string           { return "6.2.0" }
func (commandXRevRangeN) Forbid() bool                     { return false }
func (commandXRevRangeN) WarnVersion() string              { return "0.0.0" }
func (commandXRevRangeN) Warning() string                  { return "" }
func (commandXRevRangeN) P(p Pipeliner) commandXRevRangeNP { return commandXRevRangeNP{p} }
func (b commandXRevRangeNP) Cmd(stream, stop, start string, count int64) {
	b.Pipeliner.Cmd(b.builder().XRevRangeNCompleted(stream, start, stop, count))
}

var CommandXTrim commandXTrim

type commandXTrim string
type commandXTrimP struct{ Pipeliner }

func (commandXTrim) String() string              { return "XTRIM" }
func (commandXTrim) Class() string               { return "Stream" }
func (commandXTrim) RequireVersion() string      { return "5.0.0" }
func (commandXTrim) Forbid() bool                { return false }
func (commandXTrim) WarnVersion() string         { return "0.0.0" }
func (commandXTrim) Warning() string             { return "" }
func (commandXTrim) P(p Pipeliner) commandXTrimP { return commandXTrimP{p} }
func (b commandXTrimP) Cmd(key string, maxLen int64) {
	b.Pipeliner.Cmd(b.builder().XTrimCompleted(key, maxLen))
}

var CommandXTrimMaxLenApprox commandXTrimMaxLenApprox

type commandXTrimMaxLenApprox string
type commandXTrimMaxLenApproxP struct{ Pipeliner }

func (commandXTrimMaxLenApprox) String() string         { return "XTRIM LIMIT" }
func (commandXTrimMaxLenApprox) Class() string          { return "Stream" }
func (commandXTrimMaxLenApprox) RequireVersion() string { return "6.2.0" }
func (commandXTrimMaxLenApprox) Forbid() bool           { return false }
func (commandXTrimMaxLenApprox) WarnVersion() string    { return "0.0.0" }
func (commandXTrimMaxLenApprox) Warning() string        { return "" }
func (commandXTrimMaxLenApprox) P(p Pipeliner) commandXTrimMaxLenApproxP {
	return commandXTrimMaxLenApproxP{p}
}
func (b commandXTrimMaxLenApproxP) Cmd(key string, maxLen, limit int64) {
	b.Pipeliner.Cmd(b.builder().XTrimMaxLenApproxCompleted(key, maxLen, limit))
}

var CommandXTrimMinID commandXTrimMinID

type commandXTrimMinID string
type commandXTrimMinIDP struct{ Pipeliner }

func (commandXTrimMinID) String() string                   { return "XTRIM MINID" }
func (commandXTrimMinID) Class() string                    { return "Stream" }
func (commandXTrimMinID) RequireVersion() string           { return "6.2.0" }
func (commandXTrimMinID) Forbid() bool                     { return false }
func (commandXTrimMinID) WarnVersion() string              { return "0.0.0" }
func (commandXTrimMinID) Warning() string                  { return "" }
func (commandXTrimMinID) P(p Pipeliner) commandXTrimMinIDP { return commandXTrimMinIDP{p} }
func (b commandXTrimMinIDP) Cmd(key string, minID string) {
	b.Pipeliner.Cmd(b.builder().XTrimMinIDCompleted(key, minID))
}

var CommandXTrimMinIDApprox commandXTrimMinIDApprox

type commandXTrimMinIDApprox string
type commandXTrimMinIDApproxP struct{ Pipeliner }

func (commandXTrimMinIDApprox) String() string         { return "XTRIM MINID LIMIT" }
func (commandXTrimMinIDApprox) Class() string          { return "Stream" }
func (commandXTrimMinIDApprox) RequireVersion() string { return "6.2.0" }
func (commandXTrimMinIDApprox) Forbid() bool           { return false }
func (commandXTrimMinIDApprox) WarnVersion() string    { return "0.0.0" }
func (commandXTrimMinIDApprox) Warning() string        { return "" }
func (commandXTrimMinIDApprox) P(p Pipeliner) commandXTrimMinIDApproxP {
	return commandXTrimMinIDApproxP{p}
}
func (b commandXTrimMinIDApproxP) Cmd(key string, minID string, limit int64) {
	b.Pipeliner.Cmd(b.builder().XTrimMinIDApproxCompleted(key, minID, limit))
}

var CommandXRead commandXRead

type commandXRead string

func (commandXRead) String() string         { return "XREAD STREAMS" }
func (commandXRead) Class() string          { return "Stream" }
func (commandXRead) RequireVersion() string { return "5.0.0" }
func (commandXRead) Forbid() bool           { return false }
func (commandXRead) WarnVersion() string    { return "0.0.0" }
func (commandXRead) Warning() string        { return "" }

var CommandXReadGroup commandXReadGroup

type commandXReadGroup string

func (commandXReadGroup) String() string         { return "XREADGROUP GROUP" }
func (commandXReadGroup) Class() string          { return "Stream" }
func (commandXReadGroup) RequireVersion() string { return "5.0.0" }
func (commandXReadGroup) Forbid() bool           { return false }
func (commandXReadGroup) WarnVersion() string    { return "0.0.0" }
func (commandXReadGroup) Warning() string        { return "" }

var CommandAppend commandAppend

type commandAppend string
type commandAppendP struct{ Pipeliner }

func (commandAppend) String() string               { return "APPEND" }
func (commandAppend) Class() string                { return "String" }
func (commandAppend) RequireVersion() string       { return "2.0.0" }
func (commandAppend) Forbid() bool                 { return false }
func (commandAppend) WarnVersion() string          { return "0.0.0" }
func (commandAppend) Warning() string              { return "" }
func (commandAppend) P(p Pipeliner) commandAppendP { return commandAppendP{p} }
func (b commandAppendP) Cmd(key, value string) {
	b.Pipeliner.Cmd(b.builder().AppendCompleted(key, value))
}

var CommandDecr commandDecr

type commandDecr string
type commandDecrP struct{ Pipeliner }

func (commandDecr) String() string             { return "DECR" }
func (commandDecr) Class() string              { return "String" }
func (commandDecr) RequireVersion() string     { return "1.0.0" }
func (commandDecr) Forbid() bool               { return false }
func (commandDecr) WarnVersion() string        { return "0.0.0" }
func (commandDecr) Warning() string            { return "" }
func (commandDecr) P(p Pipeliner) commandDecrP { return commandDecrP{p} }
func (b commandDecrP) Cmd(key, value string)   { b.Pipeliner.Cmd(b.builder().DecrCompleted(key)) }

var CommandDecrBy commandDecrBy

type commandDecrBy string
type commandDecrByP struct{ Pipeliner }

func (commandDecrBy) String() string               { return "DECRBY" }
func (commandDecrBy) Class() string                { return "String" }
func (commandDecrBy) RequireVersion() string       { return "1.0.0" }
func (commandDecrBy) Forbid() bool                 { return false }
func (commandDecrBy) WarnVersion() string          { return "0.0.0" }
func (commandDecrBy) Warning() string              { return "" }
func (commandDecrBy) P(p Pipeliner) commandDecrByP { return commandDecrByP{p} }
func (b commandDecrByP) Cmd(key string, decrement int64) {
	b.Pipeliner.Cmd(b.builder().DecrByCompleted(key, decrement))
}

var CommandGet commandGet

type commandGet string
type commandGetP struct{ Pipeliner }

func (commandGet) String() string            { return "GET" }
func (commandGet) Class() string             { return "String" }
func (commandGet) RequireVersion() string    { return "1.0.0" }
func (commandGet) Forbid() bool              { return false }
func (commandGet) WarnVersion() string       { return "0.0.0" }
func (commandGet) Warning() string           { return "" }
func (commandGet) P(p Pipeliner) commandGetP { return commandGetP{p} }
func (b commandGetP) Cmd(key string)         { b.Pipeliner.Cmd(b.builder().GetCompleted(key)) }

var CommandGetDel commandGetDel

type commandGetDel string
type commandGetDelP struct{ Pipeliner }

func (commandGetDel) String() string               { return "GETDEL" }
func (commandGetDel) Class() string                { return "String" }
func (commandGetDel) RequireVersion() string       { return "6.2.0" }
func (commandGetDel) Forbid() bool                 { return false }
func (commandGetDel) WarnVersion() string          { return "0.0.0" }
func (commandGetDel) Warning() string              { return "" }
func (commandGetDel) P(p Pipeliner) commandGetDelP { return commandGetDelP{p} }
func (b commandGetDelP) Cmd(key string)            { b.Pipeliner.Cmd(b.builder().GetDelCompleted(key)) }

var CommandGetEx commandGetEx

type commandGetEx string
type commandGetExP struct{ Pipeliner }

func (commandGetEx) String() string              { return "GETEX" }
func (commandGetEx) Class() string               { return "String" }
func (commandGetEx) RequireVersion() string      { return "6.2.0" }
func (commandGetEx) Forbid() bool                { return false }
func (commandGetEx) WarnVersion() string         { return "0.0.0" }
func (commandGetEx) Warning() string             { return "" }
func (commandGetEx) P(p Pipeliner) commandGetExP { return commandGetExP{p} }
func (b commandGetExP) Cmd(key string, expiration time.Duration) {
	b.Pipeliner.Cmd(b.builder().GetExCompleted(key, expiration))
}

var CommandGetRange commandGetRange

type commandGetRange string
type commandGetRangeP struct{ Pipeliner }

func (commandGetRange) String() string                 { return "GETRANGE" }
func (commandGetRange) Class() string                  { return "String" }
func (commandGetRange) RequireVersion() string         { return "2.4.0" }
func (commandGetRange) Forbid() bool                   { return false }
func (commandGetRange) WarnVersion() string            { return "0.0.0" }
func (commandGetRange) Warning() string                { return "" }
func (commandGetRange) P(p Pipeliner) commandGetRangeP { return commandGetRangeP{p} }
func (b commandGetRangeP) Cmd(key string, start, end int64) {
	b.Pipeliner.Cmd(b.builder().GetRangeCompleted(key, start, end))
}

var CommandGetSet commandGetSet

type commandGetSet string
type commandGetSetP struct{ Pipeliner }

func (commandGetSet) String() string               { return "GETSET" }
func (commandGetSet) Class() string                { return "String" }
func (commandGetSet) RequireVersion() string       { return "1.0.0" }
func (commandGetSet) Forbid() bool                 { return false }
func (commandGetSet) WarnVersion() string          { return "6.2.0" }
func (commandGetSet) Warning() string              { return commandGetSetWarning }
func (commandGetSet) P(p Pipeliner) commandGetSetP { return commandGetSetP{p} }
func (b commandGetSetP) Cmd(key string, value any) {
	b.Pipeliner.Cmd(b.builder().GetSetCompleted(key, value))
}

var CommandIncr commandIncr

type commandIncr string
type commandIncrP struct{ Pipeliner }

func (commandIncr) String() string             { return "INCR" }
func (commandIncr) Class() string              { return "String" }
func (commandIncr) RequireVersion() string     { return "1.0.0" }
func (commandIncr) Forbid() bool               { return false }
func (commandIncr) WarnVersion() string        { return "0.0.0" }
func (commandIncr) Warning() string            { return "" }
func (commandIncr) P(p Pipeliner) commandIncrP { return commandIncrP{p} }
func (b commandIncrP) Cmd(key string)          { b.Pipeliner.Cmd(b.builder().IncrCompleted(key)) }

var CommandIncrBy commandIncrBy

type commandIncrBy string
type commandIncrByP struct{ Pipeliner }

func (commandIncrBy) String() string               { return "INCRBY" }
func (commandIncrBy) Class() string                { return "String" }
func (commandIncrBy) RequireVersion() string       { return "1.0.0" }
func (commandIncrBy) Forbid() bool                 { return false }
func (commandIncrBy) WarnVersion() string          { return "0.0.0" }
func (commandIncrBy) Warning() string              { return "" }
func (commandIncrBy) P(p Pipeliner) commandIncrByP { return commandIncrByP{p} }
func (b commandIncrByP) Cmd(key string, value int64) {
	b.Pipeliner.Cmd(b.builder().IncrByCompleted(key, value))
}

var CommandIncrByFloat commandIncrByFloat

type commandIncrByFloat string
type commandIncrByFloatP struct{ Pipeliner }

func (commandIncrByFloat) String() string                    { return "INCRBYFLOAT" }
func (commandIncrByFloat) Class() string                     { return "String" }
func (commandIncrByFloat) RequireVersion() string            { return "2.6.0" }
func (commandIncrByFloat) Forbid() bool                      { return false }
func (commandIncrByFloat) WarnVersion() string               { return "0.0.0" }
func (commandIncrByFloat) Warning() string                   { return "" }
func (commandIncrByFloat) P(p Pipeliner) commandIncrByFloatP { return commandIncrByFloatP{p} }
func (b commandIncrByFloatP) Cmd(key string, value float64) {
	b.Pipeliner.Cmd(b.builder().IncrByFloatCompleted(key, value))
}

var CommandMGet commandMGet

type commandMGet string
type commandMGetP struct{ Pipeliner }

func (commandMGet) String() string             { return "MGET" }
func (commandMGet) Class() string              { return "String" }
func (commandMGet) RequireVersion() string     { return "1.0.0" }
func (commandMGet) Forbid() bool               { return false }
func (commandMGet) WarnVersion() string        { return "0.0.0" }
func (commandMGet) Warning() string            { return "" }
func (commandMGet) P(p Pipeliner) commandMGetP { return commandMGetP{p} }
func (b commandMGetP) Cmd(keys ...string)      { b.Pipeliner.Cmd(b.builder().MGetCompleted(keys...)) }

var CommandMSet commandMSet

type commandMSet string
type commandMSetP struct{ Pipeliner }

func (commandMSet) String() string             { return "MSET" }
func (commandMSet) Class() string              { return "String" }
func (commandMSet) RequireVersion() string     { return "1.0.1" }
func (commandMSet) Forbid() bool               { return false }
func (commandMSet) WarnVersion() string        { return "0.0.0" }
func (commandMSet) Warning() string            { return "" }
func (commandMSet) P(p Pipeliner) commandMSetP { return commandMSetP{p} }
func (b commandMSetP) Cmd(values ...any)       { b.Pipeliner.Cmd(b.builder().MSetCompleted(values...)) }

var CommandMSetNX commandMSetNX

type commandMSetNX string
type commandMSetNXP struct{ Pipeliner }

func (commandMSetNX) String() string               { return "MSETNX" }
func (commandMSetNX) Class() string                { return "String" }
func (commandMSetNX) RequireVersion() string       { return "1.0.1" }
func (commandMSetNX) Forbid() bool                 { return false }
func (commandMSetNX) WarnVersion() string          { return "0.0.0" }
func (commandMSetNX) Warning() string              { return "" }
func (commandMSetNX) P(p Pipeliner) commandMSetNXP { return commandMSetNXP{p} }
func (b commandMSetNXP) Cmd(values ...any)         { b.Pipeliner.Cmd(b.builder().MSetNXCompleted(values...)) }

var CommandSet commandSet

type commandSet string
type commandSetP struct{ Pipeliner }

func (commandSet) String() string            { return "SET" }
func (commandSet) Class() string             { return "String" }
func (commandSet) RequireVersion() string    { return "1.0.0" }
func (commandSet) Forbid() bool              { return false }
func (commandSet) WarnVersion() string       { return "0.0.0" }
func (commandSet) Warning() string           { return "" }
func (commandSet) P(p Pipeliner) commandSetP { return commandSetP{p} }
func (b commandSetP) Cmd(key string, value any, expiration time.Duration) {
	b.Pipeliner.Cmd(b.builder().SetCompleted(key, value, expiration))
}

var CommandSetKeepTTL commandSetKeepTTL

type commandSetKeepTTL string
type commandSetKeepTTLP struct{ Pipeliner }

func (commandSetKeepTTL) String() string                   { return "SETKEEPTTL" }
func (commandSetKeepTTL) Class() string                    { return "String" }
func (commandSetKeepTTL) RequireVersion() string           { return "6.0.0" }
func (commandSetKeepTTL) Forbid() bool                     { return false }
func (commandSetKeepTTL) WarnVersion() string              { return "0.0.0" }
func (commandSetKeepTTL) Warning() string                  { return "" }
func (commandSetKeepTTL) P(p Pipeliner) commandSetKeepTTLP { return commandSetKeepTTLP{p} }
func (b commandSetKeepTTLP) Cmd(key string, value any) {
	b.Pipeliner.Cmd(b.builder().SetKeepTTLCompleted(key, value))
}

var CommandSetEX commandSetEX

type commandSetEX string
type commandSetEXP struct{ Pipeliner }

func (commandSetEX) String() string              { return "SETEX" }
func (commandSetEX) Class() string               { return "String" }
func (commandSetEX) RequireVersion() string      { return "2.0.0" }
func (commandSetEX) Forbid() bool                { return false }
func (commandSetEX) WarnVersion() string         { return "2.6.12" }
func (commandSetEX) Warning() string             { return commandSetEXWarning }
func (commandSetEX) P(p Pipeliner) commandSetEXP { return commandSetEXP{p} }
func (b commandSetEXP) Cmd(key string, value any, expiration time.Duration) {
	b.Pipeliner.Cmd(b.builder().SetEXCompleted(key, value, expiration))
}

var CommandSetArgsEX commandSetArgsEX

type commandSetArgsEX string
type commandSetArgsEXP struct{ Pipeliner }

func (commandSetArgsEX) String() string                  { return "SETARGSEX" }
func (commandSetArgsEX) Class() string                   { return "String" }
func (commandSetArgsEX) RequireVersion() string          { return "2.0.0" }
func (commandSetArgsEX) Forbid() bool                    { return false }
func (commandSetArgsEX) WarnVersion() string             { return "0.0.0" }
func (commandSetArgsEX) Warning() string                 { return "" }
func (commandSetArgsEX) P(p Pipeliner) commandSetArgsEXP { return commandSetArgsEXP{p} }
func (b commandSetArgsEXP) Cmd(key string, value any, a SetArgs) {
	b.Pipeliner.Cmd(b.builder().SetArgsCompleted(key, value, a))
}

var CommandSetNX commandSetNX

type commandSetNX string
type commandSetNXP struct{ Pipeliner }

func (commandSetNX) String() string              { return "SETNX" }
func (commandSetNX) Class() string               { return "String" }
func (commandSetNX) RequireVersion() string      { return "1.0.0" }
func (commandSetNX) Forbid() bool                { return false }
func (commandSetNX) WarnVersion() string         { return "2.6.12" }
func (commandSetNX) Warning() string             { return commandSetNXWarning }
func (commandSetNX) P(p Pipeliner) commandSetNXP { return commandSetNXP{p} }
func (b commandSetNXP) Cmd(key string, value any, expiration time.Duration) {
	b.Pipeliner.Cmd(b.builder().SetNXCompleted(key, value, expiration))
}

var CommandSetArgsNX commandSetArgsNX

type commandSetArgsNX string
type commandSetArgsNXP struct{ Pipeliner }

func (commandSetArgsNX) String() string                  { return "SETARGSNX" }
func (commandSetArgsNX) Class() string                   { return "String" }
func (commandSetArgsNX) RequireVersion() string          { return "1.0.0" }
func (commandSetArgsNX) Forbid() bool                    { return false }
func (commandSetArgsNX) WarnVersion() string             { return "0.0.0" }
func (commandSetArgsNX) Warning() string                 { return "" }
func (commandSetArgsNX) P(p Pipeliner) commandSetArgsNXP { return commandSetArgsNXP{p} }
func (b commandSetArgsNXP) Cmd(key string, value any, a SetArgs) {
	b.Pipeliner.Cmd(b.builder().SetArgsCompleted(key, value, a))
}

var CommandSetXX commandSetXX

type commandSetXX string
type commandSetXXP struct{ Pipeliner }

func (commandSetXX) String() string              { return "SETXX" }
func (commandSetXX) Class() string               { return "String" }
func (commandSetXX) RequireVersion() string      { return "2.6.12" }
func (commandSetXX) Forbid() bool                { return false }
func (commandSetXX) WarnVersion() string         { return "0.0.0" }
func (commandSetXX) Warning() string             { return "" }
func (commandSetXX) P(p Pipeliner) commandSetXXP { return commandSetXXP{p} }
func (b commandSetXXP) Cmd(key string, value any, expiration time.Duration) {
	b.Pipeliner.Cmd(b.builder().SetXXCompleted(key, value, expiration))
}

var CommandSetNXGet commandSetNXGet

type commandSetNXGet string
type commandSetNXGetP struct{ Pipeliner }

func (commandSetNXGet) String() string                 { return "SETNXGET" }
func (commandSetNXGet) Class() string                  { return "String" }
func (commandSetNXGet) RequireVersion() string         { return "7.0.0" }
func (commandSetNXGet) Forbid() bool                   { return false }
func (commandSetNXGet) WarnVersion() string            { return "0.0.0" }
func (commandSetNXGet) Warning() string                { return "" }
func (commandSetNXGet) P(p Pipeliner) commandSetNXGetP { return commandSetNXGetP{p} }
func (b commandSetNXGetP) Cmd(key string, value any, a SetArgs) {
	b.Pipeliner.Cmd(b.builder().SetArgsCompleted(key, value, a))
}

var CommandSetGet commandSetGet

type commandSetGet string
type commandSetGetP struct{ Pipeliner }

func (commandSetGet) String() string               { return "SETGET" }
func (commandSetGet) Class() string                { return "String" }
func (commandSetGet) RequireVersion() string       { return "6.2.0" }
func (commandSetGet) Forbid() bool                 { return false }
func (commandSetGet) WarnVersion() string          { return "0.0.0" }
func (commandSetGet) Warning() string              { return "" }
func (commandSetGet) P(p Pipeliner) commandSetGetP { return commandSetGetP{p} }
func (b commandSetGetP) Cmd(key string, value any, a SetArgs) {
	b.Pipeliner.Cmd(b.builder().SetArgsCompleted(key, value, a))
}

var CommandSetRange commandSetRange

type commandSetRange string
type commandSetRangeP struct{ Pipeliner }

func (commandSetRange) String() string                 { return "SETRANGE" }
func (commandSetRange) Class() string                  { return "String" }
func (commandSetRange) RequireVersion() string         { return "2.2.0" }
func (commandSetRange) Forbid() bool                   { return false }
func (commandSetRange) WarnVersion() string            { return "0.0.0" }
func (commandSetRange) Warning() string                { return "" }
func (commandSetRange) P(p Pipeliner) commandSetRangeP { return commandSetRangeP{p} }
func (b commandSetRangeP) Cmd(key string, offset int64, value string) {
	b.Pipeliner.Cmd(b.builder().SetRangeCompleted(key, offset, value))
}

var CommandStrLen commandStrLen

type commandStrLen string
type commandStrLenP struct{ Pipeliner }

func (commandStrLen) String() string               { return "STRLEN" }
func (commandStrLen) Class() string                { return "String" }
func (commandStrLen) RequireVersion() string       { return "2.2.0" }
func (commandStrLen) Forbid() bool                 { return false }
func (commandStrLen) WarnVersion() string          { return "0.0.0" }
func (commandStrLen) Warning() string              { return "" }
func (commandStrLen) P(p Pipeliner) commandStrLenP { return commandStrLenP{p} }
func (b commandStrLenP) Cmd(key string)            { b.Pipeliner.Cmd(b.builder().StrLenCompleted(key)) }
