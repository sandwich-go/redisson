// Code generated by tools. DO NOT EDIT.
package sandwich_redis

const (
	commandBitOpAndWarning                = "BITOP is a potentially slow command as it runs in O(N) time. Care should be taken when running it against long input strings."
	commandBitOpOrWarning                 = "BITOP is a potentially slow command as it runs in O(N) time. Care should be taken when running it against long input strings."
	commandBitOpXorWarning                = "BITOP is a potentially slow command as it runs in O(N) time. Care should be taken when running it against long input strings."
	commandBitOpNotWarning                = "BITOP is a potentially slow command as it runs in O(N) time. Care should be taken when running it against long input strings."
	commandSetBitWarning                  = "When setting the last possible bit (offset equal to 2^32 -1) and the string value stored at key does not yet hold a string value, or holds a small string value, Redis needs to allocate all intermediate memory which can block the server for some time. On a 2010 MacBook Pro, setting bit number 2^32 -1 (512MB allocation) takes ~300ms, setting bit number 2^30 -1 (128MB allocation) takes ~80ms, setting bit number 2^28 -1 (32MB allocation) takes ~30ms and setting bit number 2^26 -1 (8MB allocation) takes ~8ms. Note that once this first allocation is done, subsequent calls to SETBIT for the same key will not have the allocation overhead."
	commandKeysWarning                    = "consider KEYS as a command that should only be used in production environments with extreme care. It may ruin performance when it is executed against large databases. This command is intended for debugging and special operations, such as changing your keyspace layout. Don't use KEYS in your regular application code. If you're looking for a way to find keys in a subset of your keyspace, consider using SCAN or sets."
	commandGeoRadiusROWarning             = "As of Redis version 6.2.0, this command is regarded as deprecated.\nIt can be replaced by GEOSEARCH with the BYRADIUS argument when migrating or writing new code."
	commandGeoRadiusROCountWarning        = "As of Redis version 6.2.0, this command is regarded as deprecated.\nIt can be replaced by GEOSEARCH with the BYRADIUS argument when migrating or writing new code."
	commandGeoRadiusStoreWarning          = "As of Redis version 6.2.0, this command is regarded as deprecated.\nIt can be replaced by GEOSEARCH and GEOSEARCHSTORE with the BYRADIUS argument when migrating or writing new code."
	commandGeoRadiusStoreCountWarning     = "As of Redis version 6.2.0, this command is regarded as deprecated.\nIt can be replaced by GEOSEARCH and GEOSEARCHSTORE with the BYRADIUS argument when migrating or writing new code."
	commandGeoRadiusByMemberROWarning     = "As of Redis version 6.2.0, this command is regarded as deprecated.\nIt can be replaced by GEOSEARCH with the BYRADIUS and FROMMEMBER arguments when migrating or writing new code."
	commandGeoRadiusByMemberStoreWarning  = "As of Redis version 6.2.0, this command is regarded as deprecated.\nIt can be replaced by GEOSEARCH and GEOSEARCHSTORE with the BYRADIUS and FROMMEMBER arguments when migrating or writing new code."
	commandHMSetWarning                   = "As of Redis version 4.0.0, this command is regarded as deprecated.\nIt can be replaced by HSET with multiple field-value pairs when migrating or writing new code."
	commandBRPopLPushWarning              = "As of Redis version 6.2.0, this command is regarded as deprecated.\nIt can be replaced by BLMOVE with the RIGHT and LEFT arguments when migrating or writing new code."
	commandRPopLPushWarning               = "As of Redis version 6.2.0, this command is regarded as deprecated.\nIt can be replaced by LMOVE with the RIGHT and LEFT arguments when migrating or writing new code."
	commandZRangebylexWarning             = "As of Redis version 6.2.0, this command is regarded as deprecated.\nIt can be replaced by ZRANGE with the BYLEX argument when migrating or writing new code."
	commandZrangebyscoreWarning           = "As of Redis version 6.2.0, this command is regarded as deprecated.\nIt can be replaced by ZRANGE with the BYSCORE argument when migrating or writing new code."
	commandZrangebyscoreWithScoresWarning = "As of Redis version 6.2.0, this command is regarded as deprecated.\nIt can be replaced by ZRANGE with the BYSCORE argument when migrating or writing new code."
	commandZRevRangeWarning               = "As of Redis version 6.2.0, this command is regarded as deprecated.\nIt can be replaced by ZRANGE with the REV argument when migrating or writing new code."
	commandZRevRangeByLexWarning          = "As of Redis version 6.2.0, this command is regarded as deprecated.\nIt can be replaced by ZRANGE with the REV and BYLEX arguments when migrating or writing new code."
	commandZRevRangeByScoreWarning        = "As of Redis version 6.2.0, this command is regarded as deprecated.\nIt can be replaced by ZRANGE with the REV and BYSCORE arguments when migrating or writing new code."
	commandGetSetWarning                  = "As of Redis version 6.2.0, this command is regarded as deprecated.\nIt can be replaced by SET with the GET argument when migrating or writing new code."
)

type Command interface {
	String() string
	Class() string
	RequireVersion() string
	Forbid() bool
	WarnVersion() string
	Warning() string
	Cmd() []string
}

var CommandBitCount = new(commandBitCount)

type commandBitCount string

func (commandBitCount) String() string         { return "BITCOUNT" }
func (commandBitCount) Class() string          { return "Bitmap" }
func (commandBitCount) RequireVersion() string { return "2.6.0" }
func (commandBitCount) Forbid() bool           { return false }
func (commandBitCount) WarnVersion() string    { return "" }
func (commandBitCount) Warning() string        { return "" }
func (commandBitCount) Cmd() []string          { return []string{"BITCOUNT"} }

var CommandBitField = new(commandBitField)

type commandBitField string

func (commandBitField) String() string         { return "BITFIELD" }
func (commandBitField) Class() string          { return "Bitmap" }
func (commandBitField) RequireVersion() string { return "3.2.0" }
func (commandBitField) Forbid() bool           { return false }
func (commandBitField) WarnVersion() string    { return "" }
func (commandBitField) Warning() string        { return "" }
func (commandBitField) Cmd() []string          { return []string{"BITFIELD"} }

var CommandBitOpAnd = new(commandBitOpAnd)

type commandBitOpAnd string

func (commandBitOpAnd) String() string         { return "BITOP AND" }
func (commandBitOpAnd) Class() string          { return "Bitmap" }
func (commandBitOpAnd) RequireVersion() string { return "2.6.0" }
func (commandBitOpAnd) Forbid() bool           { return false }
func (commandBitOpAnd) WarnVersion() string    { return "0.0.0" }
func (commandBitOpAnd) Warning() string        { return commandBitOpAndWarning }
func (commandBitOpAnd) Cmd() []string          { return []string{"BITOP", "AND"} }

var CommandBitOpOr = new(commandBitOpOr)

type commandBitOpOr string

func (commandBitOpOr) String() string         { return "BITOP OR" }
func (commandBitOpOr) Class() string          { return "Bitmap" }
func (commandBitOpOr) RequireVersion() string { return "2.6.0" }
func (commandBitOpOr) Forbid() bool           { return false }
func (commandBitOpOr) WarnVersion() string    { return "0.0.0" }
func (commandBitOpOr) Warning() string        { return commandBitOpOrWarning }
func (commandBitOpOr) Cmd() []string          { return []string{"BITOP", "OR"} }

var CommandBitOpXor = new(commandBitOpXor)

type commandBitOpXor string

func (commandBitOpXor) String() string         { return "BITOP XOR" }
func (commandBitOpXor) Class() string          { return "Bitmap" }
func (commandBitOpXor) RequireVersion() string { return "2.6.0" }
func (commandBitOpXor) Forbid() bool           { return false }
func (commandBitOpXor) WarnVersion() string    { return "0.0.0" }
func (commandBitOpXor) Warning() string        { return commandBitOpXorWarning }
func (commandBitOpXor) Cmd() []string          { return []string{"BITOP", "XOR"} }

var CommandBitOpNot = new(commandBitOpNot)

type commandBitOpNot string

func (commandBitOpNot) String() string         { return "BITOP NOT" }
func (commandBitOpNot) Class() string          { return "Bitmap" }
func (commandBitOpNot) RequireVersion() string { return "2.6.0" }
func (commandBitOpNot) Forbid() bool           { return false }
func (commandBitOpNot) WarnVersion() string    { return "0.0.0" }
func (commandBitOpNot) Warning() string        { return commandBitOpNotWarning }
func (commandBitOpNot) Cmd() []string          { return []string{"BITOP", "NOT"} }

var CommandBitPos = new(commandBitPos)

type commandBitPos string

func (commandBitPos) String() string         { return "BITPOS" }
func (commandBitPos) Class() string          { return "Bitmap" }
func (commandBitPos) RequireVersion() string { return "2.8.7" }
func (commandBitPos) Forbid() bool           { return false }
func (commandBitPos) WarnVersion() string    { return "" }
func (commandBitPos) Warning() string        { return "" }
func (commandBitPos) Cmd() []string          { return []string{"BITPOS"} }

var CommandGetBit = new(commandGetBit)

type commandGetBit string

func (commandGetBit) String() string         { return "GETBIT" }
func (commandGetBit) Class() string          { return "Bitmap" }
func (commandGetBit) RequireVersion() string { return "2.2.0" }
func (commandGetBit) Forbid() bool           { return false }
func (commandGetBit) WarnVersion() string    { return "" }
func (commandGetBit) Warning() string        { return "" }
func (commandGetBit) Cmd() []string          { return []string{"GETBIT"} }

var CommandSetBit = new(commandSetBit)

type commandSetBit string

func (commandSetBit) String() string         { return "SETBIT" }
func (commandSetBit) Class() string          { return "Bitmap" }
func (commandSetBit) RequireVersion() string { return "2.2.0" }
func (commandSetBit) Forbid() bool           { return false }
func (commandSetBit) WarnVersion() string    { return "0.0.0" }
func (commandSetBit) Warning() string        { return commandSetBitWarning }
func (commandSetBit) Cmd() []string          { return []string{"SETBIT"} }

var CommandClusterAddSlots = new(commandClusterAddSlots)

type commandClusterAddSlots string

func (commandClusterAddSlots) String() string         { return "CLUSTER ADDSLOTS" }
func (commandClusterAddSlots) Class() string          { return "Cluster" }
func (commandClusterAddSlots) RequireVersion() string { return "3.0.0" }
func (commandClusterAddSlots) Forbid() bool           { return true }
func (commandClusterAddSlots) WarnVersion() string    { return "" }
func (commandClusterAddSlots) Warning() string        { return "" }
func (commandClusterAddSlots) Cmd() []string          { return []string{"CLUSTER", "ADDSLOTS"} }

var CommandClusterAddSlotsRange = new(commandClusterAddSlotsRange)

type commandClusterAddSlotsRange string

func (commandClusterAddSlotsRange) String() string         { return "CLUSTER ADDSLOTSRANGE" }
func (commandClusterAddSlotsRange) Class() string          { return "Cluster" }
func (commandClusterAddSlotsRange) RequireVersion() string { return "7.0.0" }
func (commandClusterAddSlotsRange) Forbid() bool           { return true }
func (commandClusterAddSlotsRange) WarnVersion() string    { return "" }
func (commandClusterAddSlotsRange) Warning() string        { return "" }
func (commandClusterAddSlotsRange) Cmd() []string          { return []string{"CLUSTER", "ADDSLOTSRANGE"} }

var CommandClusterCountFailureReports = new(commandClusterCountFailureReports)

type commandClusterCountFailureReports string

func (commandClusterCountFailureReports) String() string         { return "CLUSTER COUNT-FAILURE-REPORTS" }
func (commandClusterCountFailureReports) Class() string          { return "Cluster" }
func (commandClusterCountFailureReports) RequireVersion() string { return "3.0.0" }
func (commandClusterCountFailureReports) Forbid() bool           { return false }
func (commandClusterCountFailureReports) WarnVersion() string    { return "" }
func (commandClusterCountFailureReports) Warning() string        { return "" }
func (commandClusterCountFailureReports) Cmd() []string {
	return []string{"CLUSTER", "COUNT-FAILURE-REPORTS"}
}

var CommandClusterCountKeysInSlot = new(commandClusterCountKeysInSlot)

type commandClusterCountKeysInSlot string

func (commandClusterCountKeysInSlot) String() string         { return "CLUSTER COUNTKEYSINSLOT" }
func (commandClusterCountKeysInSlot) Class() string          { return "Cluster" }
func (commandClusterCountKeysInSlot) RequireVersion() string { return "3.0.0" }
func (commandClusterCountKeysInSlot) Forbid() bool           { return false }
func (commandClusterCountKeysInSlot) WarnVersion() string    { return "" }
func (commandClusterCountKeysInSlot) Warning() string        { return "" }
func (commandClusterCountKeysInSlot) Cmd() []string          { return []string{"CLUSTER", "COUNTKEYSINSLOT"} }

var CommandClusterDelSlots = new(commandClusterDelSlots)

type commandClusterDelSlots string

func (commandClusterDelSlots) String() string         { return "CLUSTER DELSLOTS" }
func (commandClusterDelSlots) Class() string          { return "Cluster" }
func (commandClusterDelSlots) RequireVersion() string { return "3.0.0" }
func (commandClusterDelSlots) Forbid() bool           { return true }
func (commandClusterDelSlots) WarnVersion() string    { return "" }
func (commandClusterDelSlots) Warning() string        { return "" }
func (commandClusterDelSlots) Cmd() []string          { return []string{"CLUSTER", "DELSLOTS"} }

var CommandClusterDelSlotsRange = new(commandClusterDelSlotsRange)

type commandClusterDelSlotsRange string

func (commandClusterDelSlotsRange) String() string         { return "CLUSTER DELSLOTSRANGE" }
func (commandClusterDelSlotsRange) Class() string          { return "Cluster" }
func (commandClusterDelSlotsRange) RequireVersion() string { return "7.0.0" }
func (commandClusterDelSlotsRange) Forbid() bool           { return true }
func (commandClusterDelSlotsRange) WarnVersion() string    { return "" }
func (commandClusterDelSlotsRange) Warning() string        { return "" }
func (commandClusterDelSlotsRange) Cmd() []string          { return []string{"CLUSTER", "DELSLOTSRANGE"} }

var CommandClusterFailover = new(commandClusterFailover)

type commandClusterFailover string

func (commandClusterFailover) String() string         { return "CLUSTER FAILOVER" }
func (commandClusterFailover) Class() string          { return "Cluster" }
func (commandClusterFailover) RequireVersion() string { return "3.0.0" }
func (commandClusterFailover) Forbid() bool           { return true }
func (commandClusterFailover) WarnVersion() string    { return "" }
func (commandClusterFailover) Warning() string        { return "" }
func (commandClusterFailover) Cmd() []string          { return []string{"CLUSTER", "FAILOVER"} }

var CommandClusterForget = new(commandClusterForget)

type commandClusterForget string

func (commandClusterForget) String() string         { return "CLUSTER FORGET" }
func (commandClusterForget) Class() string          { return "Cluster" }
func (commandClusterForget) RequireVersion() string { return "3.0.0" }
func (commandClusterForget) Forbid() bool           { return true }
func (commandClusterForget) WarnVersion() string    { return "" }
func (commandClusterForget) Warning() string        { return "" }
func (commandClusterForget) Cmd() []string          { return []string{"CLUSTER", "FORGET"} }

var CommandClusterGetKeysInSlot = new(commandClusterGetKeysInSlot)

type commandClusterGetKeysInSlot string

func (commandClusterGetKeysInSlot) String() string         { return "CLUSTER GETKEYSINSLOT" }
func (commandClusterGetKeysInSlot) Class() string          { return "Cluster" }
func (commandClusterGetKeysInSlot) RequireVersion() string { return "3.0.0" }
func (commandClusterGetKeysInSlot) Forbid() bool           { return false }
func (commandClusterGetKeysInSlot) WarnVersion() string    { return "" }
func (commandClusterGetKeysInSlot) Warning() string        { return "" }
func (commandClusterGetKeysInSlot) Cmd() []string          { return []string{"CLUSTER", "GETKEYSINSLOT"} }

var CommandClusterInfo = new(commandClusterInfo)

type commandClusterInfo string

func (commandClusterInfo) String() string         { return "CLUSTER INFO" }
func (commandClusterInfo) Class() string          { return "Cluster" }
func (commandClusterInfo) RequireVersion() string { return "3.0.0" }
func (commandClusterInfo) Forbid() bool           { return false }
func (commandClusterInfo) WarnVersion() string    { return "" }
func (commandClusterInfo) Warning() string        { return "" }
func (commandClusterInfo) Cmd() []string          { return []string{"CLUSTER", "INFO"} }

var CommandClusterKeySlot = new(commandClusterKeySlot)

type commandClusterKeySlot string

func (commandClusterKeySlot) String() string         { return "CLUSTER KEYSLOT" }
func (commandClusterKeySlot) Class() string          { return "Cluster" }
func (commandClusterKeySlot) RequireVersion() string { return "3.0.0" }
func (commandClusterKeySlot) Forbid() bool           { return false }
func (commandClusterKeySlot) WarnVersion() string    { return "" }
func (commandClusterKeySlot) Warning() string        { return "" }
func (commandClusterKeySlot) Cmd() []string          { return []string{"CLUSTER", "KEYSLOT"} }

var CommandClusterMeet = new(commandClusterMeet)

type commandClusterMeet string

func (commandClusterMeet) String() string         { return "CLUSTER MEET" }
func (commandClusterMeet) Class() string          { return "Cluster" }
func (commandClusterMeet) RequireVersion() string { return "3.0.0" }
func (commandClusterMeet) Forbid() bool           { return true }
func (commandClusterMeet) WarnVersion() string    { return "" }
func (commandClusterMeet) Warning() string        { return "" }
func (commandClusterMeet) Cmd() []string          { return []string{"CLUSTER", "MEET"} }

var CommandClusterNodes = new(commandClusterNodes)

type commandClusterNodes string

func (commandClusterNodes) String() string         { return "CLUSTER NODES" }
func (commandClusterNodes) Class() string          { return "Cluster" }
func (commandClusterNodes) RequireVersion() string { return "3.0.0" }
func (commandClusterNodes) Forbid() bool           { return false }
func (commandClusterNodes) WarnVersion() string    { return "" }
func (commandClusterNodes) Warning() string        { return "" }
func (commandClusterNodes) Cmd() []string          { return []string{"CLUSTER", "NODES"} }

var CommandClusterReplicate = new(commandClusterReplicate)

type commandClusterReplicate string

func (commandClusterReplicate) String() string         { return "CLUSTER REPLICATE" }
func (commandClusterReplicate) Class() string          { return "Cluster" }
func (commandClusterReplicate) RequireVersion() string { return "3.0.0" }
func (commandClusterReplicate) Forbid() bool           { return true }
func (commandClusterReplicate) WarnVersion() string    { return "" }
func (commandClusterReplicate) Warning() string        { return "" }
func (commandClusterReplicate) Cmd() []string          { return []string{"CLUSTER", "REPLICATE"} }

var CommandClusterResetSoft = new(commandClusterResetSoft)

type commandClusterResetSoft string

func (commandClusterResetSoft) String() string         { return "CLUSTER RESET SOFT" }
func (commandClusterResetSoft) Class() string          { return "Cluster" }
func (commandClusterResetSoft) RequireVersion() string { return "3.0.0" }
func (commandClusterResetSoft) Forbid() bool           { return true }
func (commandClusterResetSoft) WarnVersion() string    { return "" }
func (commandClusterResetSoft) Warning() string        { return "" }
func (commandClusterResetSoft) Cmd() []string          { return []string{"CLUSTER", "RESET", "SOFT"} }

var CommandClusterResetHard = new(commandClusterResetHard)

type commandClusterResetHard string

func (commandClusterResetHard) String() string         { return "CLUSTER RESET HARD" }
func (commandClusterResetHard) Class() string          { return "Cluster" }
func (commandClusterResetHard) RequireVersion() string { return "3.0.0" }
func (commandClusterResetHard) Forbid() bool           { return true }
func (commandClusterResetHard) WarnVersion() string    { return "" }
func (commandClusterResetHard) Warning() string        { return "" }
func (commandClusterResetHard) Cmd() []string          { return []string{"CLUSTER", "RESET", "HARD"} }

var CommandClusterSaveConfig = new(commandClusterSaveConfig)

type commandClusterSaveConfig string

func (commandClusterSaveConfig) String() string         { return "CLUSTER SAVECONFIG" }
func (commandClusterSaveConfig) Class() string          { return "Cluster" }
func (commandClusterSaveConfig) RequireVersion() string { return "3.0.0" }
func (commandClusterSaveConfig) Forbid() bool           { return true }
func (commandClusterSaveConfig) WarnVersion() string    { return "" }
func (commandClusterSaveConfig) Warning() string        { return "" }
func (commandClusterSaveConfig) Cmd() []string          { return []string{"CLUSTER", "SAVECONFIG"} }

var CommandClusterSlaves = new(commandClusterSlaves)

type commandClusterSlaves string

func (commandClusterSlaves) String() string         { return "CLUSTER SLAVES" }
func (commandClusterSlaves) Class() string          { return "Cluster" }
func (commandClusterSlaves) RequireVersion() string { return "3.0.0" }
func (commandClusterSlaves) Forbid() bool           { return true }
func (commandClusterSlaves) WarnVersion() string    { return "" }
func (commandClusterSlaves) Warning() string        { return "" }
func (commandClusterSlaves) Cmd() []string          { return []string{"CLUSTER", "SLAVES"} }

var CommandClusterSlots = new(commandClusterSlots)

type commandClusterSlots string

func (commandClusterSlots) String() string         { return "CLUSTER SLOTS" }
func (commandClusterSlots) Class() string          { return "Cluster" }
func (commandClusterSlots) RequireVersion() string { return "3.0.0" }
func (commandClusterSlots) Forbid() bool           { return false }
func (commandClusterSlots) WarnVersion() string    { return "" }
func (commandClusterSlots) Warning() string        { return "" }
func (commandClusterSlots) Cmd() []string          { return []string{"CLUSTER", "SLOTS"} }

var CommandReadOnly = new(commandReadOnly)

type commandReadOnly string

func (commandReadOnly) String() string         { return "READONLY" }
func (commandReadOnly) Class() string          { return "Cluster" }
func (commandReadOnly) RequireVersion() string { return "3.0.0" }
func (commandReadOnly) Forbid() bool           { return false }
func (commandReadOnly) WarnVersion() string    { return "" }
func (commandReadOnly) Warning() string        { return "" }
func (commandReadOnly) Cmd() []string          { return []string{"READONLY"} }

var CommandReadWrite = new(commandReadWrite)

type commandReadWrite string

func (commandReadWrite) String() string         { return "READWRITE" }
func (commandReadWrite) Class() string          { return "Cluster" }
func (commandReadWrite) RequireVersion() string { return "3.0.0" }
func (commandReadWrite) Forbid() bool           { return false }
func (commandReadWrite) WarnVersion() string    { return "" }
func (commandReadWrite) Warning() string        { return "" }
func (commandReadWrite) Cmd() []string          { return []string{"READWRITE"} }

var CommandClientGetName = new(commandClientGetName)

type commandClientGetName string

func (commandClientGetName) String() string         { return "CLIENT GETNAME" }
func (commandClientGetName) Class() string          { return "Connection" }
func (commandClientGetName) RequireVersion() string { return "2.6.9" }
func (commandClientGetName) Forbid() bool           { return false }
func (commandClientGetName) WarnVersion() string    { return "" }
func (commandClientGetName) Warning() string        { return "" }
func (commandClientGetName) Cmd() []string          { return []string{"CLIENT", "GETNAME"} }

var CommandClientSetName = new(commandClientSetName)

type commandClientSetName string

func (commandClientSetName) String() string         { return "CLIENT SETNAME" }
func (commandClientSetName) Class() string          { return "Connection" }
func (commandClientSetName) RequireVersion() string { return "2.6.9" }
func (commandClientSetName) Forbid() bool           { return false }
func (commandClientSetName) WarnVersion() string    { return "" }
func (commandClientSetName) Warning() string        { return "" }
func (commandClientSetName) Cmd() []string          { return []string{"CLIENT", "SETNAME"} }

var CommandClientID = new(commandClientID)

type commandClientID string

func (commandClientID) String() string         { return "CLIENT ID" }
func (commandClientID) Class() string          { return "Connection" }
func (commandClientID) RequireVersion() string { return "5.0.0" }
func (commandClientID) Forbid() bool           { return false }
func (commandClientID) WarnVersion() string    { return "" }
func (commandClientID) Warning() string        { return "" }
func (commandClientID) Cmd() []string          { return []string{"CLIENT", "ID"} }

var CommandClientKill = new(commandClientKill)

type commandClientKill string

func (commandClientKill) String() string         { return "CLIENT KILL" }
func (commandClientKill) Class() string          { return "Connection" }
func (commandClientKill) RequireVersion() string { return "2.4.0" }
func (commandClientKill) Forbid() bool           { return false }
func (commandClientKill) WarnVersion() string    { return "" }
func (commandClientKill) Warning() string        { return "" }
func (commandClientKill) Cmd() []string          { return []string{"CLIENT", "KILL"} }

var CommandClientKillByFilter = new(commandClientKillByFilter)

type commandClientKillByFilter string

func (commandClientKillByFilter) String() string         { return "CLIENT KILL BY FILTER" }
func (commandClientKillByFilter) Class() string          { return "Connection" }
func (commandClientKillByFilter) RequireVersion() string { return "2.8.12" }
func (commandClientKillByFilter) Forbid() bool           { return false }
func (commandClientKillByFilter) WarnVersion() string    { return "" }
func (commandClientKillByFilter) Warning() string        { return "" }
func (commandClientKillByFilter) Cmd() []string          { return []string{"CLIENT", "KILL"} }

var CommandClientKillByFilterByLAddr = new(commandClientKillByFilterByLAddr)

type commandClientKillByFilterByLAddr string

func (commandClientKillByFilterByLAddr) String() string         { return "CLIENT KILL BY LADDR" }
func (commandClientKillByFilterByLAddr) Class() string          { return "Connection" }
func (commandClientKillByFilterByLAddr) RequireVersion() string { return "6.2.0" }
func (commandClientKillByFilterByLAddr) Forbid() bool           { return false }
func (commandClientKillByFilterByLAddr) WarnVersion() string    { return "" }
func (commandClientKillByFilterByLAddr) Warning() string        { return "" }
func (commandClientKillByFilterByLAddr) Cmd() []string          { return []string{"CLIENT", "KILL"} }

var CommandClientList = new(commandClientList)

type commandClientList string

func (commandClientList) String() string         { return "CLIENT LIST" }
func (commandClientList) Class() string          { return "Connection" }
func (commandClientList) RequireVersion() string { return "2.4.0" }
func (commandClientList) Forbid() bool           { return false }
func (commandClientList) WarnVersion() string    { return "" }
func (commandClientList) Warning() string        { return "" }
func (commandClientList) Cmd() []string          { return []string{"CLIENT", "LIST"} }

var CommandClientPause = new(commandClientPause)

type commandClientPause string

func (commandClientPause) String() string         { return "CLIENT PAUSE" }
func (commandClientPause) Class() string          { return "Connection" }
func (commandClientPause) RequireVersion() string { return "2.9.50" }
func (commandClientPause) Forbid() bool           { return false }
func (commandClientPause) WarnVersion() string    { return "" }
func (commandClientPause) Warning() string        { return "" }
func (commandClientPause) Cmd() []string          { return []string{"CLIENT", "PAUSE"} }

var CommandEcho = new(commandEcho)

type commandEcho string

func (commandEcho) String() string         { return "ECHO" }
func (commandEcho) Class() string          { return "Connection" }
func (commandEcho) RequireVersion() string { return "1.0.0" }
func (commandEcho) Forbid() bool           { return false }
func (commandEcho) WarnVersion() string    { return "" }
func (commandEcho) Warning() string        { return "" }
func (commandEcho) Cmd() []string          { return []string{"ECHO"} }

var CommandPing = new(commandPing)

type commandPing string

func (commandPing) String() string         { return "PING" }
func (commandPing) Class() string          { return "Connection" }
func (commandPing) RequireVersion() string { return "1.0.0" }
func (commandPing) Forbid() bool           { return false }
func (commandPing) WarnVersion() string    { return "" }
func (commandPing) Warning() string        { return "" }
func (commandPing) Cmd() []string          { return []string{"PING"} }

var CommandQuit = new(commandQuit)

type commandQuit string

func (commandQuit) String() string         { return "QUIT" }
func (commandQuit) Class() string          { return "Connection" }
func (commandQuit) RequireVersion() string { return "1.0.0" }
func (commandQuit) Forbid() bool           { return false }
func (commandQuit) WarnVersion() string    { return "" }
func (commandQuit) Warning() string        { return "" }
func (commandQuit) Cmd() []string          { return []string{"QUIT"} }

var CommandSelect = new(commandSelect)

type commandSelect string

func (commandSelect) String() string         { return "SELECT" }
func (commandSelect) Class() string          { return "Connection" }
func (commandSelect) RequireVersion() string { return "1.0.0" }
func (commandSelect) Forbid() bool           { return true }
func (commandSelect) WarnVersion() string    { return "" }
func (commandSelect) Warning() string        { return "" }
func (commandSelect) Cmd() []string          { return []string{"SELECT"} }

var CommandCopy = new(commandCopy)

type commandCopy string

func (commandCopy) String() string         { return "COPY" }
func (commandCopy) Class() string          { return "Generic" }
func (commandCopy) RequireVersion() string { return "6.2.0" }
func (commandCopy) Forbid() bool           { return false }
func (commandCopy) WarnVersion() string    { return "" }
func (commandCopy) Warning() string        { return "" }
func (commandCopy) Cmd() []string          { return []string{"COPY"} }

var CommandDel = new(commandDel)

type commandDel string

func (commandDel) String() string         { return "DEL" }
func (commandDel) Class() string          { return "Generic" }
func (commandDel) RequireVersion() string { return "1.0.0" }
func (commandDel) Forbid() bool           { return false }
func (commandDel) WarnVersion() string    { return "" }
func (commandDel) Warning() string        { return "" }
func (commandDel) Cmd() []string          { return []string{"DEL"} }

var CommandDump = new(commandDump)

type commandDump string

func (commandDump) String() string         { return "DUMP" }
func (commandDump) Class() string          { return "Generic" }
func (commandDump) RequireVersion() string { return "2.6.0" }
func (commandDump) Forbid() bool           { return false }
func (commandDump) WarnVersion() string    { return "" }
func (commandDump) Warning() string        { return "" }
func (commandDump) Cmd() []string          { return []string{"DUMP"} }

var CommandExists = new(commandExists)

type commandExists string

func (commandExists) String() string         { return "EXISTS" }
func (commandExists) Class() string          { return "Generic" }
func (commandExists) RequireVersion() string { return "1.0.0" }
func (commandExists) Forbid() bool           { return false }
func (commandExists) WarnVersion() string    { return "" }
func (commandExists) Warning() string        { return "" }
func (commandExists) Cmd() []string          { return []string{"EXISTS"} }

var CommandExistsMultipleKeys = new(commandExistsMultipleKeys)

type commandExistsMultipleKeys string

func (commandExistsMultipleKeys) String() string         { return "EXISTS MULTIPLE KEYS" }
func (commandExistsMultipleKeys) Class() string          { return "Generic" }
func (commandExistsMultipleKeys) RequireVersion() string { return "3.0.3" }
func (commandExistsMultipleKeys) Forbid() bool           { return false }
func (commandExistsMultipleKeys) WarnVersion() string    { return "" }
func (commandExistsMultipleKeys) Warning() string        { return "" }
func (commandExistsMultipleKeys) Cmd() []string          { return []string{"EXISTS"} }

var CommandExpire = new(commandExpire)

type commandExpire string

func (commandExpire) String() string         { return "EXPIRE" }
func (commandExpire) Class() string          { return "Generic" }
func (commandExpire) RequireVersion() string { return "1.0.0" }
func (commandExpire) Forbid() bool           { return false }
func (commandExpire) WarnVersion() string    { return "" }
func (commandExpire) Warning() string        { return "" }
func (commandExpire) Cmd() []string          { return []string{"EXPIRE"} }

var CommandExpireAt = new(commandExpireAt)

type commandExpireAt string

func (commandExpireAt) String() string         { return "EXPIREAT" }
func (commandExpireAt) Class() string          { return "Generic" }
func (commandExpireAt) RequireVersion() string { return "1.2.0" }
func (commandExpireAt) Forbid() bool           { return false }
func (commandExpireAt) WarnVersion() string    { return "" }
func (commandExpireAt) Warning() string        { return "" }
func (commandExpireAt) Cmd() []string          { return []string{"EXPIREAT"} }

var CommandKeys = new(commandKeys)

type commandKeys string

func (commandKeys) String() string         { return "KEYS" }
func (commandKeys) Class() string          { return "Generic" }
func (commandKeys) RequireVersion() string { return "1.0.0" }
func (commandKeys) Forbid() bool           { return true }
func (commandKeys) WarnVersion() string    { return "0.0.0" }
func (commandKeys) Warning() string        { return commandKeysWarning }
func (commandKeys) Cmd() []string          { return []string{"KEYS"} }

var CommandMigrate = new(commandMigrate)

type commandMigrate string

func (commandMigrate) String() string         { return "MIGRATE" }
func (commandMigrate) Class() string          { return "Generic" }
func (commandMigrate) RequireVersion() string { return "2.6.0" }
func (commandMigrate) Forbid() bool           { return true }
func (commandMigrate) WarnVersion() string    { return "" }
func (commandMigrate) Warning() string        { return "" }
func (commandMigrate) Cmd() []string          { return []string{"MIGRATE"} }

var CommandMove = new(commandMove)

type commandMove string

func (commandMove) String() string         { return "MOVE" }
func (commandMove) Class() string          { return "Generic" }
func (commandMove) RequireVersion() string { return "1.0.0" }
func (commandMove) Forbid() bool           { return false }
func (commandMove) WarnVersion() string    { return "" }
func (commandMove) Warning() string        { return "" }
func (commandMove) Cmd() []string          { return []string{"MOVE"} }

var CommandObjectRefCount = new(commandObjectRefCount)

type commandObjectRefCount string

func (commandObjectRefCount) String() string         { return "OBJECT REFCOUNT" }
func (commandObjectRefCount) Class() string          { return "Generic" }
func (commandObjectRefCount) RequireVersion() string { return "2.2.3" }
func (commandObjectRefCount) Forbid() bool           { return false }
func (commandObjectRefCount) WarnVersion() string    { return "" }
func (commandObjectRefCount) Warning() string        { return "" }
func (commandObjectRefCount) Cmd() []string          { return []string{"OBJECT", "REFCOUNT"} }

var CommandObjectEncoding = new(commandObjectEncoding)

type commandObjectEncoding string

func (commandObjectEncoding) String() string         { return "OBJECT ENCODING" }
func (commandObjectEncoding) Class() string          { return "Generic" }
func (commandObjectEncoding) RequireVersion() string { return "2.2.3" }
func (commandObjectEncoding) Forbid() bool           { return false }
func (commandObjectEncoding) WarnVersion() string    { return "" }
func (commandObjectEncoding) Warning() string        { return "" }
func (commandObjectEncoding) Cmd() []string          { return []string{"OBJECT", "ENCODING"} }

var CommandObjectIdleTime = new(commandObjectIdleTime)

type commandObjectIdleTime string

func (commandObjectIdleTime) String() string         { return "OBJECT IDLETIME" }
func (commandObjectIdleTime) Class() string          { return "Generic" }
func (commandObjectIdleTime) RequireVersion() string { return "2.2.3" }
func (commandObjectIdleTime) Forbid() bool           { return false }
func (commandObjectIdleTime) WarnVersion() string    { return "" }
func (commandObjectIdleTime) Warning() string        { return "" }
func (commandObjectIdleTime) Cmd() []string          { return []string{"OBJECT", "IDLETIME"} }

var CommandPersist = new(commandPersist)

type commandPersist string

func (commandPersist) String() string         { return "PERSIST" }
func (commandPersist) Class() string          { return "Generic" }
func (commandPersist) RequireVersion() string { return "2.2.0" }
func (commandPersist) Forbid() bool           { return false }
func (commandPersist) WarnVersion() string    { return "" }
func (commandPersist) Warning() string        { return "" }
func (commandPersist) Cmd() []string          { return []string{"PERSIST"} }

var CommandPExpire = new(commandPExpire)

type commandPExpire string

func (commandPExpire) String() string         { return "PEXPIRE" }
func (commandPExpire) Class() string          { return "Generic" }
func (commandPExpire) RequireVersion() string { return "2.6.0" }
func (commandPExpire) Forbid() bool           { return false }
func (commandPExpire) WarnVersion() string    { return "" }
func (commandPExpire) Warning() string        { return "" }
func (commandPExpire) Cmd() []string          { return []string{"PEXPIRE"} }

var CommandPExpireAt = new(commandPExpireAt)

type commandPExpireAt string

func (commandPExpireAt) String() string         { return "PEXPIREAT" }
func (commandPExpireAt) Class() string          { return "Generic" }
func (commandPExpireAt) RequireVersion() string { return "2.6.0" }
func (commandPExpireAt) Forbid() bool           { return false }
func (commandPExpireAt) WarnVersion() string    { return "" }
func (commandPExpireAt) Warning() string        { return "" }
func (commandPExpireAt) Cmd() []string          { return []string{"PEXPIREAT"} }

var CommandPTTL = new(commandPTTL)

type commandPTTL string

func (commandPTTL) String() string         { return "PTTL" }
func (commandPTTL) Class() string          { return "Generic" }
func (commandPTTL) RequireVersion() string { return "2.6.0" }
func (commandPTTL) Forbid() bool           { return false }
func (commandPTTL) WarnVersion() string    { return "" }
func (commandPTTL) Warning() string        { return "" }
func (commandPTTL) Cmd() []string          { return []string{"PTTL"} }

var CommandRandomKey = new(commandRandomKey)

type commandRandomKey string

func (commandRandomKey) String() string         { return "RANDOMKEY" }
func (commandRandomKey) Class() string          { return "Generic" }
func (commandRandomKey) RequireVersion() string { return "1.0.0" }
func (commandRandomKey) Forbid() bool           { return false }
func (commandRandomKey) WarnVersion() string    { return "" }
func (commandRandomKey) Warning() string        { return "" }
func (commandRandomKey) Cmd() []string          { return []string{"RANDOMKEY"} }

var CommandRename = new(commandRename)

type commandRename string

func (commandRename) String() string         { return "RENAME" }
func (commandRename) Class() string          { return "Generic" }
func (commandRename) RequireVersion() string { return "1.0.0" }
func (commandRename) Forbid() bool           { return false }
func (commandRename) WarnVersion() string    { return "" }
func (commandRename) Warning() string        { return "" }
func (commandRename) Cmd() []string          { return []string{"RENAME"} }

var CommandRenameNX = new(commandRenameNX)

type commandRenameNX string

func (commandRenameNX) String() string         { return "RENAMENX" }
func (commandRenameNX) Class() string          { return "Generic" }
func (commandRenameNX) RequireVersion() string { return "1.0.0" }
func (commandRenameNX) Forbid() bool           { return false }
func (commandRenameNX) WarnVersion() string    { return "" }
func (commandRenameNX) Warning() string        { return "" }
func (commandRenameNX) Cmd() []string          { return []string{"RENAMENX"} }

var CommandRestore = new(commandRestore)

type commandRestore string

func (commandRestore) String() string         { return "RESTORE" }
func (commandRestore) Class() string          { return "Generic" }
func (commandRestore) RequireVersion() string { return "2.6.0" }
func (commandRestore) Forbid() bool           { return false }
func (commandRestore) WarnVersion() string    { return "" }
func (commandRestore) Warning() string        { return "" }
func (commandRestore) Cmd() []string          { return []string{"RESTORE"} }

var CommandRestoreReplace = new(commandRestoreReplace)

type commandRestoreReplace string

func (commandRestoreReplace) String() string         { return "RESTORE REPLACE" }
func (commandRestoreReplace) Class() string          { return "Generic" }
func (commandRestoreReplace) RequireVersion() string { return "3.0.0" }
func (commandRestoreReplace) Forbid() bool           { return false }
func (commandRestoreReplace) WarnVersion() string    { return "" }
func (commandRestoreReplace) Warning() string        { return "" }
func (commandRestoreReplace) Cmd() []string          { return []string{"RESTORE"} }

var CommandScan = new(commandScan)

type commandScan string

func (commandScan) String() string         { return "SCAN" }
func (commandScan) Class() string          { return "Generic" }
func (commandScan) RequireVersion() string { return "2.8.0" }
func (commandScan) Forbid() bool           { return false }
func (commandScan) WarnVersion() string    { return "" }
func (commandScan) Warning() string        { return "" }
func (commandScan) Cmd() []string          { return []string{"SCAN"} }

var CommandScanType = new(commandScanType)

type commandScanType string

func (commandScanType) String() string         { return "SCAN TYPE" }
func (commandScanType) Class() string          { return "Generic" }
func (commandScanType) RequireVersion() string { return "6.0.0" }
func (commandScanType) Forbid() bool           { return false }
func (commandScanType) WarnVersion() string    { return "" }
func (commandScanType) Warning() string        { return "" }
func (commandScanType) Cmd() []string          { return []string{"SCAN"} }

var CommandSort = new(commandSort)

type commandSort string

func (commandSort) String() string         { return "SORT" }
func (commandSort) Class() string          { return "Generic" }
func (commandSort) RequireVersion() string { return "1.0.0" }
func (commandSort) Forbid() bool           { return false }
func (commandSort) WarnVersion() string    { return "" }
func (commandSort) Warning() string        { return "" }
func (commandSort) Cmd() []string          { return []string{"SORT"} }

var CommandTouch = new(commandTouch)

type commandTouch string

func (commandTouch) String() string         { return "TOUCH" }
func (commandTouch) Class() string          { return "Generic" }
func (commandTouch) RequireVersion() string { return "3.2.1" }
func (commandTouch) Forbid() bool           { return false }
func (commandTouch) WarnVersion() string    { return "" }
func (commandTouch) Warning() string        { return "" }
func (commandTouch) Cmd() []string          { return []string{"TOUCH"} }

var CommandTTL = new(commandTTL)

type commandTTL string

func (commandTTL) String() string         { return "TTL" }
func (commandTTL) Class() string          { return "Generic" }
func (commandTTL) RequireVersion() string { return "1.0.0" }
func (commandTTL) Forbid() bool           { return false }
func (commandTTL) WarnVersion() string    { return "" }
func (commandTTL) Warning() string        { return "" }
func (commandTTL) Cmd() []string          { return []string{"TTL"} }

var CommandType = new(commandType)

type commandType string

func (commandType) String() string         { return "TYPE" }
func (commandType) Class() string          { return "Generic" }
func (commandType) RequireVersion() string { return "1.0.0" }
func (commandType) Forbid() bool           { return false }
func (commandType) WarnVersion() string    { return "" }
func (commandType) Warning() string        { return "" }
func (commandType) Cmd() []string          { return []string{"TYPE"} }

var CommandUnlink = new(commandUnlink)

type commandUnlink string

func (commandUnlink) String() string         { return "UNLINK" }
func (commandUnlink) Class() string          { return "Generic" }
func (commandUnlink) RequireVersion() string { return "4.0.0" }
func (commandUnlink) Forbid() bool           { return false }
func (commandUnlink) WarnVersion() string    { return "" }
func (commandUnlink) Warning() string        { return "" }
func (commandUnlink) Cmd() []string          { return []string{"UNLINK"} }

var CommandGeoAdd = new(commandGeoAdd)

type commandGeoAdd string

func (commandGeoAdd) String() string         { return "GEOADD" }
func (commandGeoAdd) Class() string          { return "Geospatial" }
func (commandGeoAdd) RequireVersion() string { return "3.2.0" }
func (commandGeoAdd) Forbid() bool           { return false }
func (commandGeoAdd) WarnVersion() string    { return "" }
func (commandGeoAdd) Warning() string        { return "" }
func (commandGeoAdd) Cmd() []string          { return []string{"GEOADD"} }

var CommandGeoDist = new(commandGeoDist)

type commandGeoDist string

func (commandGeoDist) String() string         { return "GEODIST" }
func (commandGeoDist) Class() string          { return "Geospatial" }
func (commandGeoDist) RequireVersion() string { return "3.2.0" }
func (commandGeoDist) Forbid() bool           { return false }
func (commandGeoDist) WarnVersion() string    { return "" }
func (commandGeoDist) Warning() string        { return "" }
func (commandGeoDist) Cmd() []string          { return []string{"GEODIST"} }

var CommandGeoHash = new(commandGeoHash)

type commandGeoHash string

func (commandGeoHash) String() string         { return "GEOHASH" }
func (commandGeoHash) Class() string          { return "Geospatial" }
func (commandGeoHash) RequireVersion() string { return "3.2.0" }
func (commandGeoHash) Forbid() bool           { return false }
func (commandGeoHash) WarnVersion() string    { return "" }
func (commandGeoHash) Warning() string        { return "" }
func (commandGeoHash) Cmd() []string          { return []string{"GEOHASH"} }

var CommandGeoPos = new(commandGeoPos)

type commandGeoPos string

func (commandGeoPos) String() string         { return "GEOPOS" }
func (commandGeoPos) Class() string          { return "Geospatial" }
func (commandGeoPos) RequireVersion() string { return "3.2.0" }
func (commandGeoPos) Forbid() bool           { return false }
func (commandGeoPos) WarnVersion() string    { return "" }
func (commandGeoPos) Warning() string        { return "" }
func (commandGeoPos) Cmd() []string          { return []string{"GEOPOS"} }

var CommandGeoRadiusRO = new(commandGeoRadiusRO)

type commandGeoRadiusRO string

func (commandGeoRadiusRO) String() string         { return "GEORADIUS_RO" }
func (commandGeoRadiusRO) Class() string          { return "Geospatial" }
func (commandGeoRadiusRO) RequireVersion() string { return "3.2.10" }
func (commandGeoRadiusRO) Forbid() bool           { return false }
func (commandGeoRadiusRO) WarnVersion() string    { return "6.2.0" }
func (commandGeoRadiusRO) Warning() string        { return commandGeoRadiusROWarning }
func (commandGeoRadiusRO) Cmd() []string          { return []string{"GEORADIUS_RO"} }

var CommandGeoRadiusROCount = new(commandGeoRadiusROCount)

type commandGeoRadiusROCount string

func (commandGeoRadiusROCount) String() string         { return "GEORADIUS_RO COUNT" }
func (commandGeoRadiusROCount) Class() string          { return "Geospatial" }
func (commandGeoRadiusROCount) RequireVersion() string { return "6.2.0" }
func (commandGeoRadiusROCount) Forbid() bool           { return false }
func (commandGeoRadiusROCount) WarnVersion() string    { return "6.2.0" }
func (commandGeoRadiusROCount) Warning() string        { return commandGeoRadiusROCountWarning }
func (commandGeoRadiusROCount) Cmd() []string          { return []string{"GEORADIUS_RO"} }

var CommandGeoRadiusStore = new(commandGeoRadiusStore)

type commandGeoRadiusStore string

func (commandGeoRadiusStore) String() string         { return "GEORADIUS" }
func (commandGeoRadiusStore) Class() string          { return "Geospatial" }
func (commandGeoRadiusStore) RequireVersion() string { return "3.2.0" }
func (commandGeoRadiusStore) Forbid() bool           { return false }
func (commandGeoRadiusStore) WarnVersion() string    { return "6.2.0" }
func (commandGeoRadiusStore) Warning() string        { return commandGeoRadiusStoreWarning }
func (commandGeoRadiusStore) Cmd() []string          { return []string{"GEORADIUS"} }

var CommandGeoRadiusStoreCount = new(commandGeoRadiusStoreCount)

type commandGeoRadiusStoreCount string

func (commandGeoRadiusStoreCount) String() string         { return "GEORADIUS COUNT" }
func (commandGeoRadiusStoreCount) Class() string          { return "Geospatial" }
func (commandGeoRadiusStoreCount) RequireVersion() string { return "6.2.0" }
func (commandGeoRadiusStoreCount) Forbid() bool           { return false }
func (commandGeoRadiusStoreCount) WarnVersion() string    { return "6.2.0" }
func (commandGeoRadiusStoreCount) Warning() string        { return commandGeoRadiusStoreCountWarning }
func (commandGeoRadiusStoreCount) Cmd() []string          { return []string{"GEORADIUS"} }

var CommandGeoRadiusByMemberRO = new(commandGeoRadiusByMemberRO)

type commandGeoRadiusByMemberRO string

func (commandGeoRadiusByMemberRO) String() string         { return "GEORADIUSBYMEMBER_RO" }
func (commandGeoRadiusByMemberRO) Class() string          { return "Geospatial" }
func (commandGeoRadiusByMemberRO) RequireVersion() string { return "3.2.10" }
func (commandGeoRadiusByMemberRO) Forbid() bool           { return false }
func (commandGeoRadiusByMemberRO) WarnVersion() string    { return "6.2.0" }
func (commandGeoRadiusByMemberRO) Warning() string        { return commandGeoRadiusByMemberROWarning }
func (commandGeoRadiusByMemberRO) Cmd() []string          { return []string{"GEORADIUSBYMEMBER_RO"} }

var CommandGeoRadiusByMemberStore = new(commandGeoRadiusByMemberStore)

type commandGeoRadiusByMemberStore string

func (commandGeoRadiusByMemberStore) String() string         { return "GEORADIUSBYMEMBER" }
func (commandGeoRadiusByMemberStore) Class() string          { return "Geospatial" }
func (commandGeoRadiusByMemberStore) RequireVersion() string { return "3.2.0" }
func (commandGeoRadiusByMemberStore) Forbid() bool           { return false }
func (commandGeoRadiusByMemberStore) WarnVersion() string    { return "6.2.0" }
func (commandGeoRadiusByMemberStore) Warning() string        { return commandGeoRadiusByMemberStoreWarning }
func (commandGeoRadiusByMemberStore) Cmd() []string          { return []string{"GEORADIUSBYMEMBER"} }

var CommandGeoSearch = new(commandGeoSearch)

type commandGeoSearch string

func (commandGeoSearch) String() string         { return "GEOSEARCH" }
func (commandGeoSearch) Class() string          { return "Geospatial" }
func (commandGeoSearch) RequireVersion() string { return "6.2.0" }
func (commandGeoSearch) Forbid() bool           { return false }
func (commandGeoSearch) WarnVersion() string    { return "" }
func (commandGeoSearch) Warning() string        { return "" }
func (commandGeoSearch) Cmd() []string          { return []string{"GEOSEARCH"} }

var CommandGeoSearchStore = new(commandGeoSearchStore)

type commandGeoSearchStore string

func (commandGeoSearchStore) String() string         { return "GEOSEARCHSTORE" }
func (commandGeoSearchStore) Class() string          { return "Geospatial" }
func (commandGeoSearchStore) RequireVersion() string { return "6.2.0" }
func (commandGeoSearchStore) Forbid() bool           { return false }
func (commandGeoSearchStore) WarnVersion() string    { return "" }
func (commandGeoSearchStore) Warning() string        { return "" }
func (commandGeoSearchStore) Cmd() []string          { return []string{"GEOSEARCHSTORE"} }

var CommandHDel = new(commandHDel)

type commandHDel string

func (commandHDel) String() string         { return "HDEL" }
func (commandHDel) Class() string          { return "Hash" }
func (commandHDel) RequireVersion() string { return "2.0.0" }
func (commandHDel) Forbid() bool           { return false }
func (commandHDel) WarnVersion() string    { return "" }
func (commandHDel) Warning() string        { return "" }
func (commandHDel) Cmd() []string          { return []string{"HDEL"} }

var CommandHDelMultiple = new(commandHDelMultiple)

type commandHDelMultiple string

func (commandHDelMultiple) String() string         { return "HDEL MULTIPLE" }
func (commandHDelMultiple) Class() string          { return "Hash" }
func (commandHDelMultiple) RequireVersion() string { return "2.4.0" }
func (commandHDelMultiple) Forbid() bool           { return false }
func (commandHDelMultiple) WarnVersion() string    { return "" }
func (commandHDelMultiple) Warning() string        { return "" }
func (commandHDelMultiple) Cmd() []string          { return []string{"HDEL"} }

var CommandHExists = new(commandHExists)

type commandHExists string

func (commandHExists) String() string         { return "HEXISTS" }
func (commandHExists) Class() string          { return "Hash" }
func (commandHExists) RequireVersion() string { return "2.0.0" }
func (commandHExists) Forbid() bool           { return false }
func (commandHExists) WarnVersion() string    { return "" }
func (commandHExists) Warning() string        { return "" }
func (commandHExists) Cmd() []string          { return []string{"HEXISTS"} }

var CommandHGet = new(commandHGet)

type commandHGet string

func (commandHGet) String() string         { return "HGET" }
func (commandHGet) Class() string          { return "Hash" }
func (commandHGet) RequireVersion() string { return "2.0.0" }
func (commandHGet) Forbid() bool           { return false }
func (commandHGet) WarnVersion() string    { return "" }
func (commandHGet) Warning() string        { return "" }
func (commandHGet) Cmd() []string          { return []string{"HGET"} }

var CommandHGetAll = new(commandHGetAll)

type commandHGetAll string

func (commandHGetAll) String() string         { return "HGETALL" }
func (commandHGetAll) Class() string          { return "Hash" }
func (commandHGetAll) RequireVersion() string { return "2.0.0" }
func (commandHGetAll) Forbid() bool           { return false }
func (commandHGetAll) WarnVersion() string    { return "" }
func (commandHGetAll) Warning() string        { return "" }
func (commandHGetAll) Cmd() []string          { return []string{"HGETALL"} }

var CommandHIncrBy = new(commandHIncrBy)

type commandHIncrBy string

func (commandHIncrBy) String() string         { return "HINCRBY" }
func (commandHIncrBy) Class() string          { return "Hash" }
func (commandHIncrBy) RequireVersion() string { return "2.0.0" }
func (commandHIncrBy) Forbid() bool           { return false }
func (commandHIncrBy) WarnVersion() string    { return "" }
func (commandHIncrBy) Warning() string        { return "" }
func (commandHIncrBy) Cmd() []string          { return []string{"HINCRBY"} }

var CommandHIncrByFloat = new(commandHIncrByFloat)

type commandHIncrByFloat string

func (commandHIncrByFloat) String() string         { return "HINCRBYFLOAT" }
func (commandHIncrByFloat) Class() string          { return "Hash" }
func (commandHIncrByFloat) RequireVersion() string { return "2.6.0" }
func (commandHIncrByFloat) Forbid() bool           { return false }
func (commandHIncrByFloat) WarnVersion() string    { return "" }
func (commandHIncrByFloat) Warning() string        { return "" }
func (commandHIncrByFloat) Cmd() []string          { return []string{"HINCRBYFLOAT"} }

var CommandHKeys = new(commandHKeys)

type commandHKeys string

func (commandHKeys) String() string         { return "HKEYS" }
func (commandHKeys) Class() string          { return "Hash" }
func (commandHKeys) RequireVersion() string { return "2.0.0" }
func (commandHKeys) Forbid() bool           { return false }
func (commandHKeys) WarnVersion() string    { return "" }
func (commandHKeys) Warning() string        { return "" }
func (commandHKeys) Cmd() []string          { return []string{"HKEYS"} }

var CommandHLen = new(commandHLen)

type commandHLen string

func (commandHLen) String() string         { return "HLEN" }
func (commandHLen) Class() string          { return "Hash" }
func (commandHLen) RequireVersion() string { return "2.0.0" }
func (commandHLen) Forbid() bool           { return false }
func (commandHLen) WarnVersion() string    { return "" }
func (commandHLen) Warning() string        { return "" }
func (commandHLen) Cmd() []string          { return []string{"HLEN"} }

var CommandHMGet = new(commandHMGet)

type commandHMGet string

func (commandHMGet) String() string         { return "HMGET" }
func (commandHMGet) Class() string          { return "Hash" }
func (commandHMGet) RequireVersion() string { return "2.0.0" }
func (commandHMGet) Forbid() bool           { return false }
func (commandHMGet) WarnVersion() string    { return "" }
func (commandHMGet) Warning() string        { return "" }
func (commandHMGet) Cmd() []string          { return []string{"HMGET"} }

var CommandHMSet = new(commandHMSet)

type commandHMSet string

func (commandHMSet) String() string         { return "HMSET" }
func (commandHMSet) Class() string          { return "Hash" }
func (commandHMSet) RequireVersion() string { return "2.0.0" }
func (commandHMSet) Forbid() bool           { return false }
func (commandHMSet) WarnVersion() string    { return "4.0.0" }
func (commandHMSet) Warning() string        { return commandHMSetWarning }
func (commandHMSet) Cmd() []string          { return []string{"HMSET"} }

var CommandHRandField = new(commandHRandField)

type commandHRandField string

func (commandHRandField) String() string         { return "HRANDFIELD" }
func (commandHRandField) Class() string          { return "Hash" }
func (commandHRandField) RequireVersion() string { return "6.2.0" }
func (commandHRandField) Forbid() bool           { return false }
func (commandHRandField) WarnVersion() string    { return "" }
func (commandHRandField) Warning() string        { return "" }
func (commandHRandField) Cmd() []string          { return []string{"HRANDFIELD"} }

var CommandHScan = new(commandHScan)

type commandHScan string

func (commandHScan) String() string         { return "HSCAN" }
func (commandHScan) Class() string          { return "Hash" }
func (commandHScan) RequireVersion() string { return "2.8.0" }
func (commandHScan) Forbid() bool           { return false }
func (commandHScan) WarnVersion() string    { return "" }
func (commandHScan) Warning() string        { return "" }
func (commandHScan) Cmd() []string          { return []string{"HSCAN"} }

var CommandHSet = new(commandHSet)

type commandHSet string

func (commandHSet) String() string         { return "HSET" }
func (commandHSet) Class() string          { return "Hash" }
func (commandHSet) RequireVersion() string { return "2.0.0" }
func (commandHSet) Forbid() bool           { return false }
func (commandHSet) WarnVersion() string    { return "" }
func (commandHSet) Warning() string        { return "" }
func (commandHSet) Cmd() []string          { return []string{"HSET"} }

var CommandHSetMultiple = new(commandHSetMultiple)

type commandHSetMultiple string

func (commandHSetMultiple) String() string         { return "HSET MULTIPLE" }
func (commandHSetMultiple) Class() string          { return "Hash" }
func (commandHSetMultiple) RequireVersion() string { return "4.0.0" }
func (commandHSetMultiple) Forbid() bool           { return false }
func (commandHSetMultiple) WarnVersion() string    { return "" }
func (commandHSetMultiple) Warning() string        { return "" }
func (commandHSetMultiple) Cmd() []string          { return []string{"HSET"} }

var CommandHSetNX = new(commandHSetNX)

type commandHSetNX string

func (commandHSetNX) String() string         { return "HSETNX" }
func (commandHSetNX) Class() string          { return "Hash" }
func (commandHSetNX) RequireVersion() string { return "2.0.0" }
func (commandHSetNX) Forbid() bool           { return false }
func (commandHSetNX) WarnVersion() string    { return "" }
func (commandHSetNX) Warning() string        { return "" }
func (commandHSetNX) Cmd() []string          { return []string{"HSETNX"} }

var CommandHVals = new(commandHVals)

type commandHVals string

func (commandHVals) String() string         { return "HVALS" }
func (commandHVals) Class() string          { return "Hash" }
func (commandHVals) RequireVersion() string { return "2.0.0" }
func (commandHVals) Forbid() bool           { return false }
func (commandHVals) WarnVersion() string    { return "" }
func (commandHVals) Warning() string        { return "" }
func (commandHVals) Cmd() []string          { return []string{"HVALS"} }

var CommandPFAdd = new(commandPFAdd)

type commandPFAdd string

func (commandPFAdd) String() string         { return "PFADD" }
func (commandPFAdd) Class() string          { return "HyperLog" }
func (commandPFAdd) RequireVersion() string { return "2.8.9" }
func (commandPFAdd) Forbid() bool           { return false }
func (commandPFAdd) WarnVersion() string    { return "" }
func (commandPFAdd) Warning() string        { return "" }
func (commandPFAdd) Cmd() []string          { return []string{"PFADD"} }

var CommandPFCount = new(commandPFCount)

type commandPFCount string

func (commandPFCount) String() string         { return "PFCount" }
func (commandPFCount) Class() string          { return "HyperLog" }
func (commandPFCount) RequireVersion() string { return "2.8.9" }
func (commandPFCount) Forbid() bool           { return false }
func (commandPFCount) WarnVersion() string    { return "" }
func (commandPFCount) Warning() string        { return "" }
func (commandPFCount) Cmd() []string          { return []string{"PFCount"} }

var CommandPFMerge = new(commandPFMerge)

type commandPFMerge string

func (commandPFMerge) String() string         { return "PFMERGE" }
func (commandPFMerge) Class() string          { return "HyperLog" }
func (commandPFMerge) RequireVersion() string { return "2.8.9" }
func (commandPFMerge) Forbid() bool           { return false }
func (commandPFMerge) WarnVersion() string    { return "" }
func (commandPFMerge) Warning() string        { return "" }
func (commandPFMerge) Cmd() []string          { return []string{"PFMERGE"} }

var CommandBLMove = new(commandBLMove)

type commandBLMove string

func (commandBLMove) String() string         { return "BLMOVE" }
func (commandBLMove) Class() string          { return "List" }
func (commandBLMove) RequireVersion() string { return "6.2.0" }
func (commandBLMove) Forbid() bool           { return false }
func (commandBLMove) WarnVersion() string    { return "" }
func (commandBLMove) Warning() string        { return "" }
func (commandBLMove) Cmd() []string          { return []string{"BLMOVE"} }

var CommandBLPop = new(commandBLPop)

type commandBLPop string

func (commandBLPop) String() string         { return "BLPOP" }
func (commandBLPop) Class() string          { return "List" }
func (commandBLPop) RequireVersion() string { return "2.0.0" }
func (commandBLPop) Forbid() bool           { return false }
func (commandBLPop) WarnVersion() string    { return "" }
func (commandBLPop) Warning() string        { return "" }
func (commandBLPop) Cmd() []string          { return []string{"BLPOP"} }

var CommandBRPop = new(commandBRPop)

type commandBRPop string

func (commandBRPop) String() string         { return "BRPOP" }
func (commandBRPop) Class() string          { return "List" }
func (commandBRPop) RequireVersion() string { return "2.0.0" }
func (commandBRPop) Forbid() bool           { return false }
func (commandBRPop) WarnVersion() string    { return "" }
func (commandBRPop) Warning() string        { return "" }
func (commandBRPop) Cmd() []string          { return []string{"BRPOP"} }

var CommandBRPopLPush = new(commandBRPopLPush)

type commandBRPopLPush string

func (commandBRPopLPush) String() string         { return "BRPOPLPUSH" }
func (commandBRPopLPush) Class() string          { return "List" }
func (commandBRPopLPush) RequireVersion() string { return "2.2.0" }
func (commandBRPopLPush) Forbid() bool           { return false }
func (commandBRPopLPush) WarnVersion() string    { return "6.2.0" }
func (commandBRPopLPush) Warning() string        { return commandBRPopLPushWarning }
func (commandBRPopLPush) Cmd() []string          { return []string{"BRPOPLPUSH"} }

var CommandLIndex = new(commandLIndex)

type commandLIndex string

func (commandLIndex) String() string         { return "LINDEX" }
func (commandLIndex) Class() string          { return "List" }
func (commandLIndex) RequireVersion() string { return "1.0.0" }
func (commandLIndex) Forbid() bool           { return false }
func (commandLIndex) WarnVersion() string    { return "" }
func (commandLIndex) Warning() string        { return "" }
func (commandLIndex) Cmd() []string          { return []string{"LINDEX"} }

var CommandLInsert = new(commandLInsert)

type commandLInsert string

func (commandLInsert) String() string         { return "LINSERT" }
func (commandLInsert) Class() string          { return "List" }
func (commandLInsert) RequireVersion() string { return "2.2.0" }
func (commandLInsert) Forbid() bool           { return false }
func (commandLInsert) WarnVersion() string    { return "" }
func (commandLInsert) Warning() string        { return "" }
func (commandLInsert) Cmd() []string          { return []string{"LINSERT"} }

var CommandLLen = new(commandLLen)

type commandLLen string

func (commandLLen) String() string         { return "LLEN" }
func (commandLLen) Class() string          { return "List" }
func (commandLLen) RequireVersion() string { return "1.0.0" }
func (commandLLen) Forbid() bool           { return false }
func (commandLLen) WarnVersion() string    { return "" }
func (commandLLen) Warning() string        { return "" }
func (commandLLen) Cmd() []string          { return []string{"LLEN"} }

var CommandLMove = new(commandLMove)

type commandLMove string

func (commandLMove) String() string         { return "LMOVE" }
func (commandLMove) Class() string          { return "List" }
func (commandLMove) RequireVersion() string { return "6.2.0" }
func (commandLMove) Forbid() bool           { return false }
func (commandLMove) WarnVersion() string    { return "" }
func (commandLMove) Warning() string        { return "" }
func (commandLMove) Cmd() []string          { return []string{"LMOVE"} }

var CommandLPop = new(commandLPop)

type commandLPop string

func (commandLPop) String() string         { return "LPOP" }
func (commandLPop) Class() string          { return "List" }
func (commandLPop) RequireVersion() string { return "1.0.0" }
func (commandLPop) Forbid() bool           { return false }
func (commandLPop) WarnVersion() string    { return "" }
func (commandLPop) Warning() string        { return "" }
func (commandLPop) Cmd() []string          { return []string{"LPOP"} }

var CommandLPopCount = new(commandLPopCount)

type commandLPopCount string

func (commandLPopCount) String() string         { return "LPOP COUNT" }
func (commandLPopCount) Class() string          { return "List" }
func (commandLPopCount) RequireVersion() string { return "6.2.0" }
func (commandLPopCount) Forbid() bool           { return false }
func (commandLPopCount) WarnVersion() string    { return "" }
func (commandLPopCount) Warning() string        { return "" }
func (commandLPopCount) Cmd() []string          { return []string{"LPOP"} }

var CommandLPos = new(commandLPos)

type commandLPos string

func (commandLPos) String() string         { return "LPOS" }
func (commandLPos) Class() string          { return "List" }
func (commandLPos) RequireVersion() string { return "6.0.6" }
func (commandLPos) Forbid() bool           { return false }
func (commandLPos) WarnVersion() string    { return "" }
func (commandLPos) Warning() string        { return "" }
func (commandLPos) Cmd() []string          { return []string{"LPOS"} }

var CommandLPush = new(commandLPush)

type commandLPush string

func (commandLPush) String() string         { return "LPUSH" }
func (commandLPush) Class() string          { return "List" }
func (commandLPush) RequireVersion() string { return "1.0.0" }
func (commandLPush) Forbid() bool           { return false }
func (commandLPush) WarnVersion() string    { return "" }
func (commandLPush) Warning() string        { return "" }
func (commandLPush) Cmd() []string          { return []string{"LPUSH"} }

var CommandLPushMultiple = new(commandLPushMultiple)

type commandLPushMultiple string

func (commandLPushMultiple) String() string         { return "LPUSH MULTIPLE" }
func (commandLPushMultiple) Class() string          { return "List" }
func (commandLPushMultiple) RequireVersion() string { return "2.4.0" }
func (commandLPushMultiple) Forbid() bool           { return false }
func (commandLPushMultiple) WarnVersion() string    { return "" }
func (commandLPushMultiple) Warning() string        { return "" }
func (commandLPushMultiple) Cmd() []string          { return []string{"LPUSH"} }

var CommandLPushX = new(commandLPushX)

type commandLPushX string

func (commandLPushX) String() string         { return "LPUSHX" }
func (commandLPushX) Class() string          { return "List" }
func (commandLPushX) RequireVersion() string { return "2.2.0" }
func (commandLPushX) Forbid() bool           { return false }
func (commandLPushX) WarnVersion() string    { return "" }
func (commandLPushX) Warning() string        { return "" }
func (commandLPushX) Cmd() []string          { return []string{"LPUSHX"} }

var CommandLPushXMultiple = new(commandLPushXMultiple)

type commandLPushXMultiple string

func (commandLPushXMultiple) String() string         { return "LPUSHX MULTIPLE" }
func (commandLPushXMultiple) Class() string          { return "List" }
func (commandLPushXMultiple) RequireVersion() string { return "4.0.0" }
func (commandLPushXMultiple) Forbid() bool           { return false }
func (commandLPushXMultiple) WarnVersion() string    { return "" }
func (commandLPushXMultiple) Warning() string        { return "" }
func (commandLPushXMultiple) Cmd() []string          { return []string{"LPUSHX"} }

var CommandLRange = new(commandLRange)

type commandLRange string

func (commandLRange) String() string         { return "LRANGE" }
func (commandLRange) Class() string          { return "List" }
func (commandLRange) RequireVersion() string { return "1.0.0" }
func (commandLRange) Forbid() bool           { return false }
func (commandLRange) WarnVersion() string    { return "" }
func (commandLRange) Warning() string        { return "" }
func (commandLRange) Cmd() []string          { return []string{"LRANGE"} }

var CommandLRem = new(commandLRem)

type commandLRem string

func (commandLRem) String() string         { return "LREM" }
func (commandLRem) Class() string          { return "List" }
func (commandLRem) RequireVersion() string { return "1.0.0" }
func (commandLRem) Forbid() bool           { return false }
func (commandLRem) WarnVersion() string    { return "" }
func (commandLRem) Warning() string        { return "" }
func (commandLRem) Cmd() []string          { return []string{"LREM"} }

var CommandLSet = new(commandLSet)

type commandLSet string

func (commandLSet) String() string         { return "LSET" }
func (commandLSet) Class() string          { return "List" }
func (commandLSet) RequireVersion() string { return "1.0.0" }
func (commandLSet) Forbid() bool           { return false }
func (commandLSet) WarnVersion() string    { return "" }
func (commandLSet) Warning() string        { return "" }
func (commandLSet) Cmd() []string          { return []string{"LSET"} }

var CommandLTrim = new(commandLTrim)

type commandLTrim string

func (commandLTrim) String() string         { return "LTRIM" }
func (commandLTrim) Class() string          { return "List" }
func (commandLTrim) RequireVersion() string { return "1.0.0" }
func (commandLTrim) Forbid() bool           { return false }
func (commandLTrim) WarnVersion() string    { return "" }
func (commandLTrim) Warning() string        { return "" }
func (commandLTrim) Cmd() []string          { return []string{"LTRIM"} }

var CommandRPop = new(commandRPop)

type commandRPop string

func (commandRPop) String() string         { return "RPOP" }
func (commandRPop) Class() string          { return "List" }
func (commandRPop) RequireVersion() string { return "1.0.0" }
func (commandRPop) Forbid() bool           { return false }
func (commandRPop) WarnVersion() string    { return "" }
func (commandRPop) Warning() string        { return "" }
func (commandRPop) Cmd() []string          { return []string{"RPOP"} }

var CommandRPopCount = new(commandRPopCount)

type commandRPopCount string

func (commandRPopCount) String() string         { return "RPOP COUNT" }
func (commandRPopCount) Class() string          { return "List" }
func (commandRPopCount) RequireVersion() string { return "6.2.0" }
func (commandRPopCount) Forbid() bool           { return false }
func (commandRPopCount) WarnVersion() string    { return "" }
func (commandRPopCount) Warning() string        { return "" }
func (commandRPopCount) Cmd() []string          { return []string{"RPOP"} }

var CommandRPopLPush = new(commandRPopLPush)

type commandRPopLPush string

func (commandRPopLPush) String() string         { return "RPOPLPUSH" }
func (commandRPopLPush) Class() string          { return "List" }
func (commandRPopLPush) RequireVersion() string { return "1.2.0" }
func (commandRPopLPush) Forbid() bool           { return false }
func (commandRPopLPush) WarnVersion() string    { return "6.2.0" }
func (commandRPopLPush) Warning() string        { return commandRPopLPushWarning }
func (commandRPopLPush) Cmd() []string          { return []string{"RPOPLPUSH"} }

var CommandRPush = new(commandRPush)

type commandRPush string

func (commandRPush) String() string         { return "RPUSH" }
func (commandRPush) Class() string          { return "List" }
func (commandRPush) RequireVersion() string { return "1.0.0" }
func (commandRPush) Forbid() bool           { return false }
func (commandRPush) WarnVersion() string    { return "" }
func (commandRPush) Warning() string        { return "" }
func (commandRPush) Cmd() []string          { return []string{"RPUSH"} }

var CommandRPushMultiple = new(commandRPushMultiple)

type commandRPushMultiple string

func (commandRPushMultiple) String() string         { return "RPUSH MULTIPLE" }
func (commandRPushMultiple) Class() string          { return "List" }
func (commandRPushMultiple) RequireVersion() string { return "2.4.0" }
func (commandRPushMultiple) Forbid() bool           { return false }
func (commandRPushMultiple) WarnVersion() string    { return "" }
func (commandRPushMultiple) Warning() string        { return "" }
func (commandRPushMultiple) Cmd() []string          { return []string{"RPUSH"} }

var CommandRPushX = new(commandRPushX)

type commandRPushX string

func (commandRPushX) String() string         { return "RPUSHX" }
func (commandRPushX) Class() string          { return "List" }
func (commandRPushX) RequireVersion() string { return "2.2.0" }
func (commandRPushX) Forbid() bool           { return false }
func (commandRPushX) WarnVersion() string    { return "" }
func (commandRPushX) Warning() string        { return "" }
func (commandRPushX) Cmd() []string          { return []string{"RPUSHX"} }

var CommandRPushXMultiple = new(commandRPushXMultiple)

type commandRPushXMultiple string

func (commandRPushXMultiple) String() string         { return "RPUSHX MULTIPLE" }
func (commandRPushXMultiple) Class() string          { return "List" }
func (commandRPushXMultiple) RequireVersion() string { return "4.0.0" }
func (commandRPushXMultiple) Forbid() bool           { return false }
func (commandRPushXMultiple) WarnVersion() string    { return "" }
func (commandRPushXMultiple) Warning() string        { return "" }
func (commandRPushXMultiple) Cmd() []string          { return []string{"RPUSHX"} }

var CommandEval = new(commandEval)

type commandEval string

func (commandEval) String() string         { return "EVAL" }
func (commandEval) Class() string          { return "Scripting" }
func (commandEval) RequireVersion() string { return "2.6.0" }
func (commandEval) Forbid() bool           { return false }
func (commandEval) WarnVersion() string    { return "" }
func (commandEval) Warning() string        { return "" }
func (commandEval) Cmd() []string          { return []string{"EVAL"} }

var CommandEvalSha = new(commandEvalSha)

type commandEvalSha string

func (commandEvalSha) String() string         { return "EVALSHA" }
func (commandEvalSha) Class() string          { return "Scripting" }
func (commandEvalSha) RequireVersion() string { return "2.6.0" }
func (commandEvalSha) Forbid() bool           { return false }
func (commandEvalSha) WarnVersion() string    { return "" }
func (commandEvalSha) Warning() string        { return "" }
func (commandEvalSha) Cmd() []string          { return []string{"EVALSHA"} }

var CommandScriptExists = new(commandScriptExists)

type commandScriptExists string

func (commandScriptExists) String() string         { return "SCRIPT EXISTS" }
func (commandScriptExists) Class() string          { return "Scripting" }
func (commandScriptExists) RequireVersion() string { return "2.6.0" }
func (commandScriptExists) Forbid() bool           { return false }
func (commandScriptExists) WarnVersion() string    { return "" }
func (commandScriptExists) Warning() string        { return "" }
func (commandScriptExists) Cmd() []string          { return []string{"SCRIPT", "EXISTS"} }

var CommandScriptFlush = new(commandScriptFlush)

type commandScriptFlush string

func (commandScriptFlush) String() string         { return "SCRIPT FLUSH" }
func (commandScriptFlush) Class() string          { return "Scripting" }
func (commandScriptFlush) RequireVersion() string { return "2.6.0" }
func (commandScriptFlush) Forbid() bool           { return false }
func (commandScriptFlush) WarnVersion() string    { return "" }
func (commandScriptFlush) Warning() string        { return "" }
func (commandScriptFlush) Cmd() []string          { return []string{"SCRIPT", "FLUSH"} }

var CommandScriptKill = new(commandScriptKill)

type commandScriptKill string

func (commandScriptKill) String() string         { return "SCRIPT KILL" }
func (commandScriptKill) Class() string          { return "Scripting" }
func (commandScriptKill) RequireVersion() string { return "2.6.0" }
func (commandScriptKill) Forbid() bool           { return false }
func (commandScriptKill) WarnVersion() string    { return "" }
func (commandScriptKill) Warning() string        { return "" }
func (commandScriptKill) Cmd() []string          { return []string{"SCRIPT", "KILL"} }

var CommandScriptLoad = new(commandScriptLoad)

type commandScriptLoad string

func (commandScriptLoad) String() string         { return "SCRIPT LOAD" }
func (commandScriptLoad) Class() string          { return "Scripting" }
func (commandScriptLoad) RequireVersion() string { return "2.6.0" }
func (commandScriptLoad) Forbid() bool           { return false }
func (commandScriptLoad) WarnVersion() string    { return "" }
func (commandScriptLoad) Warning() string        { return "" }
func (commandScriptLoad) Cmd() []string          { return []string{"SCRIPT", "LOAD"} }

var CommandBgRewriteAOF = new(commandBgRewriteAOF)

type commandBgRewriteAOF string

func (commandBgRewriteAOF) String() string         { return "BGREWRITEAOF" }
func (commandBgRewriteAOF) Class() string          { return "Server" }
func (commandBgRewriteAOF) RequireVersion() string { return "1.0.0" }
func (commandBgRewriteAOF) Forbid() bool           { return true }
func (commandBgRewriteAOF) WarnVersion() string    { return "" }
func (commandBgRewriteAOF) Warning() string        { return "" }
func (commandBgRewriteAOF) Cmd() []string          { return []string{"BGREWRITEAOF"} }

var CommandBgSave = new(commandBgSave)

type commandBgSave string

func (commandBgSave) String() string         { return "BGSAVE" }
func (commandBgSave) Class() string          { return "Server" }
func (commandBgSave) RequireVersion() string { return "1.0.0" }
func (commandBgSave) Forbid() bool           { return true }
func (commandBgSave) WarnVersion() string    { return "" }
func (commandBgSave) Warning() string        { return "" }
func (commandBgSave) Cmd() []string          { return []string{"BGSAVE"} }

var CommandCommand = new(commandCommand)

type commandCommand string

func (commandCommand) String() string         { return "COMMAND" }
func (commandCommand) Class() string          { return "Server" }
func (commandCommand) RequireVersion() string { return "2.8.13" }
func (commandCommand) Forbid() bool           { return false }
func (commandCommand) WarnVersion() string    { return "" }
func (commandCommand) Warning() string        { return "" }
func (commandCommand) Cmd() []string          { return []string{"COMMAND"} }

var CommandConfigGet = new(commandConfigGet)

type commandConfigGet string

func (commandConfigGet) String() string         { return "CONFIG GET" }
func (commandConfigGet) Class() string          { return "Server" }
func (commandConfigGet) RequireVersion() string { return "2.0.0" }
func (commandConfigGet) Forbid() bool           { return true }
func (commandConfigGet) WarnVersion() string    { return "" }
func (commandConfigGet) Warning() string        { return "" }
func (commandConfigGet) Cmd() []string          { return []string{"CONFIG", "GET"} }

var CommandConfigResetStat = new(commandConfigResetStat)

type commandConfigResetStat string

func (commandConfigResetStat) String() string         { return "CONFIG RESETSTAT" }
func (commandConfigResetStat) Class() string          { return "Server" }
func (commandConfigResetStat) RequireVersion() string { return "2.0.0" }
func (commandConfigResetStat) Forbid() bool           { return true }
func (commandConfigResetStat) WarnVersion() string    { return "" }
func (commandConfigResetStat) Warning() string        { return "" }
func (commandConfigResetStat) Cmd() []string          { return []string{"CONFIG", "RESETSTAT"} }

var CommandConfigRewrite = new(commandConfigRewrite)

type commandConfigRewrite string

func (commandConfigRewrite) String() string         { return "CONFIG REWRITE" }
func (commandConfigRewrite) Class() string          { return "Server" }
func (commandConfigRewrite) RequireVersion() string { return "2.8.0" }
func (commandConfigRewrite) Forbid() bool           { return true }
func (commandConfigRewrite) WarnVersion() string    { return "" }
func (commandConfigRewrite) Warning() string        { return "" }
func (commandConfigRewrite) Cmd() []string          { return []string{"CONFIG", "REWRITE"} }

var CommandConfigSet = new(commandConfigSet)

type commandConfigSet string

func (commandConfigSet) String() string         { return "CONFIG SET" }
func (commandConfigSet) Class() string          { return "Server" }
func (commandConfigSet) RequireVersion() string { return "2.0.0" }
func (commandConfigSet) Forbid() bool           { return true }
func (commandConfigSet) WarnVersion() string    { return "" }
func (commandConfigSet) Warning() string        { return "" }
func (commandConfigSet) Cmd() []string          { return []string{"CONFIG", "SET"} }

var CommandDBSize = new(commandDBSize)

type commandDBSize string

func (commandDBSize) String() string         { return "DBSIZE" }
func (commandDBSize) Class() string          { return "Server" }
func (commandDBSize) RequireVersion() string { return "1.0.0" }
func (commandDBSize) Forbid() bool           { return false }
func (commandDBSize) WarnVersion() string    { return "" }
func (commandDBSize) Warning() string        { return "" }
func (commandDBSize) Cmd() []string          { return []string{"DBSIZE"} }

var CommandFlushAll = new(commandFlushAll)

type commandFlushAll string

func (commandFlushAll) String() string         { return "FLUSHALL" }
func (commandFlushAll) Class() string          { return "Server" }
func (commandFlushAll) RequireVersion() string { return "1.0.0" }
func (commandFlushAll) Forbid() bool           { return true }
func (commandFlushAll) WarnVersion() string    { return "" }
func (commandFlushAll) Warning() string        { return "" }
func (commandFlushAll) Cmd() []string          { return []string{"FLUSHALL"} }

var CommandFlushAllAsync = new(commandFlushAllAsync)

type commandFlushAllAsync string

func (commandFlushAllAsync) String() string         { return "FLUSHALL ASYNC" }
func (commandFlushAllAsync) Class() string          { return "Server" }
func (commandFlushAllAsync) RequireVersion() string { return "4.0.0" }
func (commandFlushAllAsync) Forbid() bool           { return true }
func (commandFlushAllAsync) WarnVersion() string    { return "" }
func (commandFlushAllAsync) Warning() string        { return "" }
func (commandFlushAllAsync) Cmd() []string          { return []string{"FLUSHALL", "ASYNC"} }

var CommandFlushDB = new(commandFlushDB)

type commandFlushDB string

func (commandFlushDB) String() string         { return "FLUSHDB" }
func (commandFlushDB) Class() string          { return "Server" }
func (commandFlushDB) RequireVersion() string { return "1.0.0" }
func (commandFlushDB) Forbid() bool           { return true }
func (commandFlushDB) WarnVersion() string    { return "" }
func (commandFlushDB) Warning() string        { return "" }
func (commandFlushDB) Cmd() []string          { return []string{"FLUSHDB"} }

var CommandFlushDBAsync = new(commandFlushDBAsync)

type commandFlushDBAsync string

func (commandFlushDBAsync) String() string         { return "FLUSHDB ASYNC" }
func (commandFlushDBAsync) Class() string          { return "Server" }
func (commandFlushDBAsync) RequireVersion() string { return "4.0.0" }
func (commandFlushDBAsync) Forbid() bool           { return true }
func (commandFlushDBAsync) WarnVersion() string    { return "" }
func (commandFlushDBAsync) Warning() string        { return "" }
func (commandFlushDBAsync) Cmd() []string          { return []string{"FLUSHDB", "ASYNC"} }

var CommandInfos = new(commandInfos)

type commandInfos string

func (commandInfos) String() string         { return "INFO" }
func (commandInfos) Class() string          { return "Server" }
func (commandInfos) RequireVersion() string { return "1.0.0" }
func (commandInfos) Forbid() bool           { return false }
func (commandInfos) WarnVersion() string    { return "" }
func (commandInfos) Warning() string        { return "" }
func (commandInfos) Cmd() []string          { return []string{"INFO"} }

var CommandInfoMultiple = new(commandInfoMultiple)

type commandInfoMultiple string

func (commandInfoMultiple) String() string         { return "INFO MULTIPLE" }
func (commandInfoMultiple) Class() string          { return "Server" }
func (commandInfoMultiple) RequireVersion() string { return "7.0.0" }
func (commandInfoMultiple) Forbid() bool           { return false }
func (commandInfoMultiple) WarnVersion() string    { return "" }
func (commandInfoMultiple) Warning() string        { return "" }
func (commandInfoMultiple) Cmd() []string          { return []string{"INFO"} }

var CommandLastSave = new(commandLastSave)

type commandLastSave string

func (commandLastSave) String() string         { return "LASTSAVE" }
func (commandLastSave) Class() string          { return "Server" }
func (commandLastSave) RequireVersion() string { return "1.0.0" }
func (commandLastSave) Forbid() bool           { return false }
func (commandLastSave) WarnVersion() string    { return "" }
func (commandLastSave) Warning() string        { return "" }
func (commandLastSave) Cmd() []string          { return []string{"LASTSAVE"} }

var CommandMemoryUsage = new(commandMemoryUsage)

type commandMemoryUsage string

func (commandMemoryUsage) String() string         { return "MEMORY USAGE" }
func (commandMemoryUsage) Class() string          { return "Server" }
func (commandMemoryUsage) RequireVersion() string { return "4.0.0" }
func (commandMemoryUsage) Forbid() bool           { return false }
func (commandMemoryUsage) WarnVersion() string    { return "" }
func (commandMemoryUsage) Warning() string        { return "" }
func (commandMemoryUsage) Cmd() []string          { return []string{"MEMORY", "USAGE"} }

var CommandSave = new(commandSave)

type commandSave string

func (commandSave) String() string         { return "SAVE" }
func (commandSave) Class() string          { return "Server" }
func (commandSave) RequireVersion() string { return "1.0.0" }
func (commandSave) Forbid() bool           { return true }
func (commandSave) WarnVersion() string    { return "" }
func (commandSave) Warning() string        { return "" }
func (commandSave) Cmd() []string          { return []string{"SAVE"} }

var CommandShutdown = new(commandShutdown)

type commandShutdown string

func (commandShutdown) String() string         { return "SHUTDOWN" }
func (commandShutdown) Class() string          { return "Server" }
func (commandShutdown) RequireVersion() string { return "1.0.0" }
func (commandShutdown) Forbid() bool           { return true }
func (commandShutdown) WarnVersion() string    { return "" }
func (commandShutdown) Warning() string        { return "" }
func (commandShutdown) Cmd() []string          { return []string{"SHUTDOWN"} }

var CommandShutdownNoSave = new(commandShutdownNoSave)

type commandShutdownNoSave string

func (commandShutdownNoSave) String() string         { return "SHUTDOWN NOSAVE" }
func (commandShutdownNoSave) Class() string          { return "Server" }
func (commandShutdownNoSave) RequireVersion() string { return "1.0.0" }
func (commandShutdownNoSave) Forbid() bool           { return true }
func (commandShutdownNoSave) WarnVersion() string    { return "" }
func (commandShutdownNoSave) Warning() string        { return "" }
func (commandShutdownNoSave) Cmd() []string          { return []string{"SHUTDOWN", "NOSAVE"} }

var CommandShutdownSave = new(commandShutdownSave)

type commandShutdownSave string

func (commandShutdownSave) String() string         { return "SHUTDOWN SAVE" }
func (commandShutdownSave) Class() string          { return "Server" }
func (commandShutdownSave) RequireVersion() string { return "1.0.0" }
func (commandShutdownSave) Forbid() bool           { return true }
func (commandShutdownSave) WarnVersion() string    { return "" }
func (commandShutdownSave) Warning() string        { return "" }
func (commandShutdownSave) Cmd() []string          { return []string{"SHUTDOWN", "SAVE"} }

var CommandSlaveOf = new(commandSlaveOf)

type commandSlaveOf string

func (commandSlaveOf) String() string         { return "SLAVEOF" }
func (commandSlaveOf) Class() string          { return "Server" }
func (commandSlaveOf) RequireVersion() string { return "1.0.0" }
func (commandSlaveOf) Forbid() bool           { return true }
func (commandSlaveOf) WarnVersion() string    { return "" }
func (commandSlaveOf) Warning() string        { return "" }
func (commandSlaveOf) Cmd() []string          { return []string{"SLAVEOF"} }

var CommandTime = new(commandTime)

type commandTime string

func (commandTime) String() string         { return "TIME" }
func (commandTime) Class() string          { return "Server" }
func (commandTime) RequireVersion() string { return "2.6.0" }
func (commandTime) Forbid() bool           { return false }
func (commandTime) WarnVersion() string    { return "" }
func (commandTime) Warning() string        { return "" }
func (commandTime) Cmd() []string          { return []string{"TIME"} }

var CommandDebug = new(commandDebug)

type commandDebug string

func (commandDebug) String() string         { return "DEBUG" }
func (commandDebug) Class() string          { return "Server" }
func (commandDebug) RequireVersion() string { return "1.0.0" }
func (commandDebug) Forbid() bool           { return false }
func (commandDebug) WarnVersion() string    { return "" }
func (commandDebug) Warning() string        { return "" }
func (commandDebug) Cmd() []string          { return []string{"DEBUG"} }

var CommandSAdd = new(commandSAdd)

type commandSAdd string

func (commandSAdd) String() string         { return "SADD" }
func (commandSAdd) Class() string          { return "Set" }
func (commandSAdd) RequireVersion() string { return "1.0.0" }
func (commandSAdd) Forbid() bool           { return false }
func (commandSAdd) WarnVersion() string    { return "" }
func (commandSAdd) Warning() string        { return "" }
func (commandSAdd) Cmd() []string          { return []string{"SADD"} }

var CommandSAddMultiple = new(commandSAddMultiple)

type commandSAddMultiple string

func (commandSAddMultiple) String() string         { return "SADD MULTIPLE" }
func (commandSAddMultiple) Class() string          { return "Set" }
func (commandSAddMultiple) RequireVersion() string { return "2.4.0" }
func (commandSAddMultiple) Forbid() bool           { return false }
func (commandSAddMultiple) WarnVersion() string    { return "" }
func (commandSAddMultiple) Warning() string        { return "" }
func (commandSAddMultiple) Cmd() []string          { return []string{"SADD"} }

var CommandSCard = new(commandSCard)

type commandSCard string

func (commandSCard) String() string         { return "SCARD" }
func (commandSCard) Class() string          { return "Set" }
func (commandSCard) RequireVersion() string { return "1.0.0" }
func (commandSCard) Forbid() bool           { return false }
func (commandSCard) WarnVersion() string    { return "" }
func (commandSCard) Warning() string        { return "" }
func (commandSCard) Cmd() []string          { return []string{"SCARD"} }

var CommandSDiff = new(commandSDiff)

type commandSDiff string

func (commandSDiff) String() string         { return "SDIFF" }
func (commandSDiff) Class() string          { return "Set" }
func (commandSDiff) RequireVersion() string { return "1.0.0" }
func (commandSDiff) Forbid() bool           { return false }
func (commandSDiff) WarnVersion() string    { return "" }
func (commandSDiff) Warning() string        { return "" }
func (commandSDiff) Cmd() []string          { return []string{"SDIFF"} }

var CommandSDiffStore = new(commandSDiffStore)

type commandSDiffStore string

func (commandSDiffStore) String() string         { return "SDIFFSTORE" }
func (commandSDiffStore) Class() string          { return "Set" }
func (commandSDiffStore) RequireVersion() string { return "1.0.0" }
func (commandSDiffStore) Forbid() bool           { return false }
func (commandSDiffStore) WarnVersion() string    { return "" }
func (commandSDiffStore) Warning() string        { return "" }
func (commandSDiffStore) Cmd() []string          { return []string{"SDIFFSTORE"} }

var CommandSInter = new(commandSInter)

type commandSInter string

func (commandSInter) String() string         { return "SINTER" }
func (commandSInter) Class() string          { return "Set" }
func (commandSInter) RequireVersion() string { return "1.0.0" }
func (commandSInter) Forbid() bool           { return false }
func (commandSInter) WarnVersion() string    { return "" }
func (commandSInter) Warning() string        { return "" }
func (commandSInter) Cmd() []string          { return []string{"SINTER"} }

var CommandSInterStore = new(commandSInterStore)

type commandSInterStore string

func (commandSInterStore) String() string         { return "SINTERSTORE" }
func (commandSInterStore) Class() string          { return "Set" }
func (commandSInterStore) RequireVersion() string { return "1.0.0" }
func (commandSInterStore) Forbid() bool           { return false }
func (commandSInterStore) WarnVersion() string    { return "" }
func (commandSInterStore) Warning() string        { return "" }
func (commandSInterStore) Cmd() []string          { return []string{"SINTERSTORE"} }

var CommandSIsMember = new(commandSIsMember)

type commandSIsMember string

func (commandSIsMember) String() string         { return "SISMEMBER" }
func (commandSIsMember) Class() string          { return "Set" }
func (commandSIsMember) RequireVersion() string { return "1.0.0" }
func (commandSIsMember) Forbid() bool           { return false }
func (commandSIsMember) WarnVersion() string    { return "" }
func (commandSIsMember) Warning() string        { return "" }
func (commandSIsMember) Cmd() []string          { return []string{"SISMEMBER"} }

var CommandSMIsMember = new(commandSMIsMember)

type commandSMIsMember string

func (commandSMIsMember) String() string         { return "SMISMEMBER" }
func (commandSMIsMember) Class() string          { return "Set" }
func (commandSMIsMember) RequireVersion() string { return "6.2.0" }
func (commandSMIsMember) Forbid() bool           { return false }
func (commandSMIsMember) WarnVersion() string    { return "" }
func (commandSMIsMember) Warning() string        { return "" }
func (commandSMIsMember) Cmd() []string          { return []string{"SMISMEMBER"} }

var CommandSMembers = new(commandSMembers)

type commandSMembers string

func (commandSMembers) String() string         { return "SMEMBERS" }
func (commandSMembers) Class() string          { return "Set" }
func (commandSMembers) RequireVersion() string { return "1.0.0" }
func (commandSMembers) Forbid() bool           { return false }
func (commandSMembers) WarnVersion() string    { return "" }
func (commandSMembers) Warning() string        { return "" }
func (commandSMembers) Cmd() []string          { return []string{"SMEMBERS"} }

var CommandSMove = new(commandSMove)

type commandSMove string

func (commandSMove) String() string         { return "SMOVE" }
func (commandSMove) Class() string          { return "Set" }
func (commandSMove) RequireVersion() string { return "1.0.0" }
func (commandSMove) Forbid() bool           { return false }
func (commandSMove) WarnVersion() string    { return "" }
func (commandSMove) Warning() string        { return "" }
func (commandSMove) Cmd() []string          { return []string{"SMOVE"} }

var CommandSPop = new(commandSPop)

type commandSPop string

func (commandSPop) String() string         { return "SPOP" }
func (commandSPop) Class() string          { return "Set" }
func (commandSPop) RequireVersion() string { return "1.0.0" }
func (commandSPop) Forbid() bool           { return false }
func (commandSPop) WarnVersion() string    { return "" }
func (commandSPop) Warning() string        { return "" }
func (commandSPop) Cmd() []string          { return []string{"SPOP"} }

var CommandSPopN = new(commandSPopN)

type commandSPopN string

func (commandSPopN) String() string         { return "SPOP COUNT" }
func (commandSPopN) Class() string          { return "Set" }
func (commandSPopN) RequireVersion() string { return "3.2.0" }
func (commandSPopN) Forbid() bool           { return false }
func (commandSPopN) WarnVersion() string    { return "" }
func (commandSPopN) Warning() string        { return "" }
func (commandSPopN) Cmd() []string          { return []string{"SPOP"} }

var CommandSRandMember = new(commandSRandMember)

type commandSRandMember string

func (commandSRandMember) String() string         { return "SRANDMEMBER" }
func (commandSRandMember) Class() string          { return "Set" }
func (commandSRandMember) RequireVersion() string { return "1.0.0" }
func (commandSRandMember) Forbid() bool           { return false }
func (commandSRandMember) WarnVersion() string    { return "" }
func (commandSRandMember) Warning() string        { return "" }
func (commandSRandMember) Cmd() []string          { return []string{"SRANDMEMBER"} }

var CommandSRandMemberN = new(commandSRandMemberN)

type commandSRandMemberN string

func (commandSRandMemberN) String() string         { return "SRANDMEMBER COUNT" }
func (commandSRandMemberN) Class() string          { return "Set" }
func (commandSRandMemberN) RequireVersion() string { return "2.6.0" }
func (commandSRandMemberN) Forbid() bool           { return false }
func (commandSRandMemberN) WarnVersion() string    { return "" }
func (commandSRandMemberN) Warning() string        { return "" }
func (commandSRandMemberN) Cmd() []string          { return []string{"SRANDMEMBER"} }

var CommandSRem = new(commandSRem)

type commandSRem string

func (commandSRem) String() string         { return "SREM" }
func (commandSRem) Class() string          { return "Set" }
func (commandSRem) RequireVersion() string { return "1.0.0" }
func (commandSRem) Forbid() bool           { return false }
func (commandSRem) WarnVersion() string    { return "" }
func (commandSRem) Warning() string        { return "" }
func (commandSRem) Cmd() []string          { return []string{"SREM"} }

var CommandSRemMultiple = new(commandSRemMultiple)

type commandSRemMultiple string

func (commandSRemMultiple) String() string         { return "SREM MULTIPLE" }
func (commandSRemMultiple) Class() string          { return "Set" }
func (commandSRemMultiple) RequireVersion() string { return "2.4.0" }
func (commandSRemMultiple) Forbid() bool           { return false }
func (commandSRemMultiple) WarnVersion() string    { return "" }
func (commandSRemMultiple) Warning() string        { return "" }
func (commandSRemMultiple) Cmd() []string          { return []string{"SREM"} }

var CommandSScan = new(commandSScan)

type commandSScan string

func (commandSScan) String() string         { return "SSCAN" }
func (commandSScan) Class() string          { return "Set" }
func (commandSScan) RequireVersion() string { return "2.8.0" }
func (commandSScan) Forbid() bool           { return false }
func (commandSScan) WarnVersion() string    { return "" }
func (commandSScan) Warning() string        { return "" }
func (commandSScan) Cmd() []string          { return []string{"SSCAN"} }

var CommandSUnion = new(commandSUnion)

type commandSUnion string

func (commandSUnion) String() string         { return "SUNION" }
func (commandSUnion) Class() string          { return "Set" }
func (commandSUnion) RequireVersion() string { return "1.0.0" }
func (commandSUnion) Forbid() bool           { return false }
func (commandSUnion) WarnVersion() string    { return "" }
func (commandSUnion) Warning() string        { return "" }
func (commandSUnion) Cmd() []string          { return []string{"SUNION"} }

var CommandSUnionStore = new(commandSUnionStore)

type commandSUnionStore string

func (commandSUnionStore) String() string         { return "SUNIONSTORE" }
func (commandSUnionStore) Class() string          { return "Set" }
func (commandSUnionStore) RequireVersion() string { return "1.0.0" }
func (commandSUnionStore) Forbid() bool           { return false }
func (commandSUnionStore) WarnVersion() string    { return "" }
func (commandSUnionStore) Warning() string        { return "" }
func (commandSUnionStore) Cmd() []string          { return []string{"SUNIONSTORE"} }

var CommandBZPopMax = new(commandBZPopMax)

type commandBZPopMax string

func (commandBZPopMax) String() string         { return "BZPOPMAX" }
func (commandBZPopMax) Class() string          { return "SortedSet" }
func (commandBZPopMax) RequireVersion() string { return "5.0.0" }
func (commandBZPopMax) Forbid() bool           { return false }
func (commandBZPopMax) WarnVersion() string    { return "" }
func (commandBZPopMax) Warning() string        { return "" }
func (commandBZPopMax) Cmd() []string          { return []string{"BZPOPMAX"} }

var CommandBZPopMin = new(commandBZPopMin)

type commandBZPopMin string

func (commandBZPopMin) String() string         { return "BZPOPMIN" }
func (commandBZPopMin) Class() string          { return "SortedSet" }
func (commandBZPopMin) RequireVersion() string { return "5.0.0" }
func (commandBZPopMin) Forbid() bool           { return false }
func (commandBZPopMin) WarnVersion() string    { return "" }
func (commandBZPopMin) Warning() string        { return "" }
func (commandBZPopMin) Cmd() []string          { return []string{"BZPOPMIN"} }

var CommandZAdd = new(commandZAdd)

type commandZAdd string

func (commandZAdd) String() string         { return "ZADD" }
func (commandZAdd) Class() string          { return "SortedSet" }
func (commandZAdd) RequireVersion() string { return "1.2.0" }
func (commandZAdd) Forbid() bool           { return false }
func (commandZAdd) WarnVersion() string    { return "" }
func (commandZAdd) Warning() string        { return "" }
func (commandZAdd) Cmd() []string          { return []string{"ZADD"} }

var CommandZAddMultiple = new(commandZAddMultiple)

type commandZAddMultiple string

func (commandZAddMultiple) String() string         { return "ZADD MULTIPLE" }
func (commandZAddMultiple) Class() string          { return "SortedSet" }
func (commandZAddMultiple) RequireVersion() string { return "2.4.0" }
func (commandZAddMultiple) Forbid() bool           { return false }
func (commandZAddMultiple) WarnVersion() string    { return "" }
func (commandZAddMultiple) Warning() string        { return "" }
func (commandZAddMultiple) Cmd() []string          { return []string{"ZADD"} }

var CommandZAddXX = new(commandZAddXX)

type commandZAddXX string

func (commandZAddXX) String() string         { return "ZADD XX" }
func (commandZAddXX) Class() string          { return "SortedSet" }
func (commandZAddXX) RequireVersion() string { return "3.0.2" }
func (commandZAddXX) Forbid() bool           { return false }
func (commandZAddXX) WarnVersion() string    { return "" }
func (commandZAddXX) Warning() string        { return "" }
func (commandZAddXX) Cmd() []string          { return []string{"ZADD"} }

var CommandZAddNX = new(commandZAddNX)

type commandZAddNX string

func (commandZAddNX) String() string         { return "ZADD NX" }
func (commandZAddNX) Class() string          { return "SortedSet" }
func (commandZAddNX) RequireVersion() string { return "3.0.2" }
func (commandZAddNX) Forbid() bool           { return false }
func (commandZAddNX) WarnVersion() string    { return "" }
func (commandZAddNX) Warning() string        { return "" }
func (commandZAddNX) Cmd() []string          { return []string{"ZADD"} }

var CommandZAddCh = new(commandZAddCh)

type commandZAddCh string

func (commandZAddCh) String() string         { return "ZADD CH" }
func (commandZAddCh) Class() string          { return "SortedSet" }
func (commandZAddCh) RequireVersion() string { return "3.0.2" }
func (commandZAddCh) Forbid() bool           { return false }
func (commandZAddCh) WarnVersion() string    { return "" }
func (commandZAddCh) Warning() string        { return "" }
func (commandZAddCh) Cmd() []string          { return []string{"ZADD"} }

var CommandZAddIncr = new(commandZAddIncr)

type commandZAddIncr string

func (commandZAddIncr) String() string         { return "ZADD INCR" }
func (commandZAddIncr) Class() string          { return "SortedSet" }
func (commandZAddIncr) RequireVersion() string { return "3.0.2" }
func (commandZAddIncr) Forbid() bool           { return false }
func (commandZAddIncr) WarnVersion() string    { return "" }
func (commandZAddIncr) Warning() string        { return "" }
func (commandZAddIncr) Cmd() []string          { return []string{"ZADD"} }

var CommandZAddGT = new(commandZAddGT)

type commandZAddGT string

func (commandZAddGT) String() string         { return "ZADD GT" }
func (commandZAddGT) Class() string          { return "SortedSet" }
func (commandZAddGT) RequireVersion() string { return "6.2.0" }
func (commandZAddGT) Forbid() bool           { return false }
func (commandZAddGT) WarnVersion() string    { return "" }
func (commandZAddGT) Warning() string        { return "" }
func (commandZAddGT) Cmd() []string          { return []string{"ZADD"} }

var CommandZAddLT = new(commandZAddLT)

type commandZAddLT string

func (commandZAddLT) String() string         { return "ZADD LT" }
func (commandZAddLT) Class() string          { return "SortedSet" }
func (commandZAddLT) RequireVersion() string { return "6.2.0" }
func (commandZAddLT) Forbid() bool           { return false }
func (commandZAddLT) WarnVersion() string    { return "" }
func (commandZAddLT) Warning() string        { return "" }
func (commandZAddLT) Cmd() []string          { return []string{"ZADD"} }

var CommandZCard = new(commandZCard)

type commandZCard string

func (commandZCard) String() string         { return "ZCARD" }
func (commandZCard) Class() string          { return "SortedSet" }
func (commandZCard) RequireVersion() string { return "1.2.0" }
func (commandZCard) Forbid() bool           { return false }
func (commandZCard) WarnVersion() string    { return "" }
func (commandZCard) Warning() string        { return "" }
func (commandZCard) Cmd() []string          { return []string{"ZCARD"} }

var CommandZCount = new(commandZCount)

type commandZCount string

func (commandZCount) String() string         { return "ZCOUNT" }
func (commandZCount) Class() string          { return "SortedSet" }
func (commandZCount) RequireVersion() string { return "2.0.0" }
func (commandZCount) Forbid() bool           { return false }
func (commandZCount) WarnVersion() string    { return "" }
func (commandZCount) Warning() string        { return "" }
func (commandZCount) Cmd() []string          { return []string{"ZCOUNT"} }

var CommandZDiff = new(commandZDiff)

type commandZDiff string

func (commandZDiff) String() string         { return "ZDIFF" }
func (commandZDiff) Class() string          { return "SortedSet" }
func (commandZDiff) RequireVersion() string { return "6.2.0" }
func (commandZDiff) Forbid() bool           { return false }
func (commandZDiff) WarnVersion() string    { return "" }
func (commandZDiff) Warning() string        { return "" }
func (commandZDiff) Cmd() []string          { return []string{"ZDIFF"} }

var CommandZDiffStore = new(commandZDiffStore)

type commandZDiffStore string

func (commandZDiffStore) String() string         { return "ZDIFFSTORE" }
func (commandZDiffStore) Class() string          { return "SortedSet" }
func (commandZDiffStore) RequireVersion() string { return "6.2.0" }
func (commandZDiffStore) Forbid() bool           { return false }
func (commandZDiffStore) WarnVersion() string    { return "" }
func (commandZDiffStore) Warning() string        { return "" }
func (commandZDiffStore) Cmd() []string          { return []string{"ZDIFFSTORE"} }

var CommandZIncrBy = new(commandZIncrBy)

type commandZIncrBy string

func (commandZIncrBy) String() string         { return "ZINCRBY" }
func (commandZIncrBy) Class() string          { return "SortedSet" }
func (commandZIncrBy) RequireVersion() string { return "1.2.0" }
func (commandZIncrBy) Forbid() bool           { return false }
func (commandZIncrBy) WarnVersion() string    { return "" }
func (commandZIncrBy) Warning() string        { return "" }
func (commandZIncrBy) Cmd() []string          { return []string{"ZINCRBY"} }

var CommandZInter = new(commandZInter)

type commandZInter string

func (commandZInter) String() string         { return "ZINTER" }
func (commandZInter) Class() string          { return "SortedSet" }
func (commandZInter) RequireVersion() string { return "6.2.0" }
func (commandZInter) Forbid() bool           { return false }
func (commandZInter) WarnVersion() string    { return "" }
func (commandZInter) Warning() string        { return "" }
func (commandZInter) Cmd() []string          { return []string{"ZINTER"} }

var CommandZInterStore = new(commandZInterStore)

type commandZInterStore string

func (commandZInterStore) String() string         { return "ZINTERSTORE" }
func (commandZInterStore) Class() string          { return "SortedSet" }
func (commandZInterStore) RequireVersion() string { return "2.0.0" }
func (commandZInterStore) Forbid() bool           { return false }
func (commandZInterStore) WarnVersion() string    { return "" }
func (commandZInterStore) Warning() string        { return "" }
func (commandZInterStore) Cmd() []string          { return []string{"ZINTERSTORE"} }

var CommandZLexCount = new(commandZLexCount)

type commandZLexCount string

func (commandZLexCount) String() string         { return "ZLEXCOUNT" }
func (commandZLexCount) Class() string          { return "SortedSet" }
func (commandZLexCount) RequireVersion() string { return "2.8.9" }
func (commandZLexCount) Forbid() bool           { return false }
func (commandZLexCount) WarnVersion() string    { return "" }
func (commandZLexCount) Warning() string        { return "" }
func (commandZLexCount) Cmd() []string          { return []string{"ZLEXCOUNT"} }

var CommandZMScore = new(commandZMScore)

type commandZMScore string

func (commandZMScore) String() string         { return "ZMSCORE" }
func (commandZMScore) Class() string          { return "SortedSet" }
func (commandZMScore) RequireVersion() string { return "6.2.0" }
func (commandZMScore) Forbid() bool           { return false }
func (commandZMScore) WarnVersion() string    { return "" }
func (commandZMScore) Warning() string        { return "" }
func (commandZMScore) Cmd() []string          { return []string{"ZMSCORE"} }

var CommandZPopMax = new(commandZPopMax)

type commandZPopMax string

func (commandZPopMax) String() string         { return "ZPOPMAX" }
func (commandZPopMax) Class() string          { return "SortedSet" }
func (commandZPopMax) RequireVersion() string { return "5.0.0" }
func (commandZPopMax) Forbid() bool           { return false }
func (commandZPopMax) WarnVersion() string    { return "" }
func (commandZPopMax) Warning() string        { return "" }
func (commandZPopMax) Cmd() []string          { return []string{"ZPOPMAX"} }

var CommandZPopMin = new(commandZPopMin)

type commandZPopMin string

func (commandZPopMin) String() string         { return "ZPOPMAX" }
func (commandZPopMin) Class() string          { return "SortedSet" }
func (commandZPopMin) RequireVersion() string { return "5.0.0" }
func (commandZPopMin) Forbid() bool           { return false }
func (commandZPopMin) WarnVersion() string    { return "" }
func (commandZPopMin) Warning() string        { return "" }
func (commandZPopMin) Cmd() []string          { return []string{"ZPOPMAX"} }

var CommandZRandMember = new(commandZRandMember)

type commandZRandMember string

func (commandZRandMember) String() string         { return "ZRANDMEMBER" }
func (commandZRandMember) Class() string          { return "SortedSet" }
func (commandZRandMember) RequireVersion() string { return "6.2.0" }
func (commandZRandMember) Forbid() bool           { return false }
func (commandZRandMember) WarnVersion() string    { return "" }
func (commandZRandMember) Warning() string        { return "" }
func (commandZRandMember) Cmd() []string          { return []string{"ZRANDMEMBER"} }

var CommandZRange = new(commandZRange)

type commandZRange string

func (commandZRange) String() string         { return "ZRANGE" }
func (commandZRange) Class() string          { return "SortedSet" }
func (commandZRange) RequireVersion() string { return "1.2.0" }
func (commandZRange) Forbid() bool           { return false }
func (commandZRange) WarnVersion() string    { return "" }
func (commandZRange) Warning() string        { return "" }
func (commandZRange) Cmd() []string          { return []string{"ZRANGE"} }

var CommandZRangeRev = new(commandZRangeRev)

type commandZRangeRev string

func (commandZRangeRev) String() string         { return "ZRANGE REV" }
func (commandZRangeRev) Class() string          { return "SortedSet" }
func (commandZRangeRev) RequireVersion() string { return "6.2.0" }
func (commandZRangeRev) Forbid() bool           { return false }
func (commandZRangeRev) WarnVersion() string    { return "" }
func (commandZRangeRev) Warning() string        { return "" }
func (commandZRangeRev) Cmd() []string          { return []string{"ZRANGE"} }

var CommandZRangeByScore = new(commandZRangeByScore)

type commandZRangeByScore string

func (commandZRangeByScore) String() string         { return "ZRANGE BYSCORE" }
func (commandZRangeByScore) Class() string          { return "SortedSet" }
func (commandZRangeByScore) RequireVersion() string { return "6.2.0" }
func (commandZRangeByScore) Forbid() bool           { return false }
func (commandZRangeByScore) WarnVersion() string    { return "" }
func (commandZRangeByScore) Warning() string        { return "" }
func (commandZRangeByScore) Cmd() []string          { return []string{"ZRANGE"} }

var CommandZRangeByLex = new(commandZRangeByLex)

type commandZRangeByLex string

func (commandZRangeByLex) String() string         { return "ZRANGE BYLEX" }
func (commandZRangeByLex) Class() string          { return "SortedSet" }
func (commandZRangeByLex) RequireVersion() string { return "6.2.0" }
func (commandZRangeByLex) Forbid() bool           { return false }
func (commandZRangeByLex) WarnVersion() string    { return "" }
func (commandZRangeByLex) Warning() string        { return "" }
func (commandZRangeByLex) Cmd() []string          { return []string{"ZRANGE"} }

var CommandZRangeLimit = new(commandZRangeLimit)

type commandZRangeLimit string

func (commandZRangeLimit) String() string         { return "ZRANGE LIMIT" }
func (commandZRangeLimit) Class() string          { return "SortedSet" }
func (commandZRangeLimit) RequireVersion() string { return "6.2.0" }
func (commandZRangeLimit) Forbid() bool           { return false }
func (commandZRangeLimit) WarnVersion() string    { return "" }
func (commandZRangeLimit) Warning() string        { return "" }
func (commandZRangeLimit) Cmd() []string          { return []string{"ZRANGE"} }

var CommandZrangebyscore = new(commandZrangebyscore)

type commandZrangebyscore string

func (commandZrangebyscore) String() string         { return "ZRANGEBYSCORE" }
func (commandZrangebyscore) Class() string          { return "1.0.5" }
func (commandZrangebyscore) RequireVersion() string { return "6.2.0" }
func (commandZrangebyscore) Forbid() bool           { return false }
func (commandZrangebyscore) WarnVersion() string    { return "" }
func (commandZrangebyscore) Warning() string        { return commandZrangebyscoreWarning }
func (commandZrangebyscore) Cmd() []string          { return []string{"SortedSet"} }

var CommandZrangebyscoreWithScores = new(commandZrangebyscoreWithScores)

type commandZrangebyscoreWithScores string

func (commandZrangebyscoreWithScores) String() string         { return "ZRANGEBYSCORE WITHSCORES" }
func (commandZrangebyscoreWithScores) Class() string          { return "SortedSet" }
func (commandZrangebyscoreWithScores) RequireVersion() string { return "2.0.0" }
func (commandZrangebyscoreWithScores) Forbid() bool           { return false }
func (commandZrangebyscoreWithScores) WarnVersion() string    { return "6.2.0" }
func (commandZrangebyscoreWithScores) Warning() string        { return commandZrangebyscoreWithScoresWarning }
func (commandZrangebyscoreWithScores) Cmd() []string          { return []string{"ZRANGEBYSCORE"} }

var CommandZRangebylex = new(commandZRangebylex)

type commandZRangebylex string

func (commandZRangebylex) String() string         { return "ZRANGEBYLEX" }
func (commandZRangebylex) Class() string          { return "SortedSet" }
func (commandZRangebylex) RequireVersion() string { return "2.8.9" }
func (commandZRangebylex) Forbid() bool           { return false }
func (commandZRangebylex) WarnVersion() string    { return "6.2.0" }
func (commandZRangebylex) Warning() string        { return commandZRangebylexWarning }
func (commandZRangebylex) Cmd() []string          { return []string{"ZRANGEBYLEX"} }

var CommandZRangeStore = new(commandZRangeStore)

type commandZRangeStore string

func (commandZRangeStore) String() string         { return "ZRANGESTORE" }
func (commandZRangeStore) Class() string          { return "SortedSet" }
func (commandZRangeStore) RequireVersion() string { return "6.2.0" }
func (commandZRangeStore) Forbid() bool           { return false }
func (commandZRangeStore) WarnVersion() string    { return "" }
func (commandZRangeStore) Warning() string        { return "" }
func (commandZRangeStore) Cmd() []string          { return []string{"ZRANGESTORE"} }

var CommandZRank = new(commandZRank)

type commandZRank string

func (commandZRank) String() string         { return "ZRANK" }
func (commandZRank) Class() string          { return "SortedSet" }
func (commandZRank) RequireVersion() string { return "2.0.0" }
func (commandZRank) Forbid() bool           { return false }
func (commandZRank) WarnVersion() string    { return "" }
func (commandZRank) Warning() string        { return "" }
func (commandZRank) Cmd() []string          { return []string{"ZRANK"} }

var CommandZRem = new(commandZRem)

type commandZRem string

func (commandZRem) String() string         { return "ZREM" }
func (commandZRem) Class() string          { return "SortedSet" }
func (commandZRem) RequireVersion() string { return "1.2.0" }
func (commandZRem) Forbid() bool           { return false }
func (commandZRem) WarnVersion() string    { return "" }
func (commandZRem) Warning() string        { return "" }
func (commandZRem) Cmd() []string          { return []string{"ZREM"} }

var CommandZRemMultiple = new(commandZRemMultiple)

type commandZRemMultiple string

func (commandZRemMultiple) String() string         { return "ZREM MULTIPLE" }
func (commandZRemMultiple) Class() string          { return "SortedSet" }
func (commandZRemMultiple) RequireVersion() string { return "2.4.0" }
func (commandZRemMultiple) Forbid() bool           { return false }
func (commandZRemMultiple) WarnVersion() string    { return "" }
func (commandZRemMultiple) Warning() string        { return "" }
func (commandZRemMultiple) Cmd() []string          { return []string{"ZREM"} }

var CommandZRemRangeByLex = new(commandZRemRangeByLex)

type commandZRemRangeByLex string

func (commandZRemRangeByLex) String() string         { return "ZREMRANGEBYLEX" }
func (commandZRemRangeByLex) Class() string          { return "SortedSet" }
func (commandZRemRangeByLex) RequireVersion() string { return "2.8.9" }
func (commandZRemRangeByLex) Forbid() bool           { return false }
func (commandZRemRangeByLex) WarnVersion() string    { return "" }
func (commandZRemRangeByLex) Warning() string        { return "" }
func (commandZRemRangeByLex) Cmd() []string          { return []string{"ZREMRANGEBYLEX"} }

var CommandZRemRangeByRank = new(commandZRemRangeByRank)

type commandZRemRangeByRank string

func (commandZRemRangeByRank) String() string         { return "ZREMRANGEBYRANK" }
func (commandZRemRangeByRank) Class() string          { return "SortedSet" }
func (commandZRemRangeByRank) RequireVersion() string { return "2.0.0" }
func (commandZRemRangeByRank) Forbid() bool           { return false }
func (commandZRemRangeByRank) WarnVersion() string    { return "" }
func (commandZRemRangeByRank) Warning() string        { return "" }
func (commandZRemRangeByRank) Cmd() []string          { return []string{"ZREMRANGEBYRANK"} }

var CommandZRemRangeByScore = new(commandZRemRangeByScore)

type commandZRemRangeByScore string

func (commandZRemRangeByScore) String() string         { return "ZREMRANGEBYSCORE" }
func (commandZRemRangeByScore) Class() string          { return "SortedSet" }
func (commandZRemRangeByScore) RequireVersion() string { return "1.2.0" }
func (commandZRemRangeByScore) Forbid() bool           { return false }
func (commandZRemRangeByScore) WarnVersion() string    { return "" }
func (commandZRemRangeByScore) Warning() string        { return "" }
func (commandZRemRangeByScore) Cmd() []string          { return []string{"ZREMRANGEBYSCORE"} }

var CommandZRevRange = new(commandZRevRange)

type commandZRevRange string

func (commandZRevRange) String() string         { return "ZREVRANGE" }
func (commandZRevRange) Class() string          { return "SortedSet" }
func (commandZRevRange) RequireVersion() string { return "1.2.0" }
func (commandZRevRange) Forbid() bool           { return false }
func (commandZRevRange) WarnVersion() string    { return "6.2.0" }
func (commandZRevRange) Warning() string        { return commandZRevRangeWarning }
func (commandZRevRange) Cmd() []string          { return []string{"ZREVRANGE"} }

var CommandZRevRangeByLex = new(commandZRevRangeByLex)

type commandZRevRangeByLex string

func (commandZRevRangeByLex) String() string         { return "ZREVRANGEBYLEX" }
func (commandZRevRangeByLex) Class() string          { return "SortedSet" }
func (commandZRevRangeByLex) RequireVersion() string { return "2.8.9" }
func (commandZRevRangeByLex) Forbid() bool           { return false }
func (commandZRevRangeByLex) WarnVersion() string    { return "6.2.0" }
func (commandZRevRangeByLex) Warning() string        { return commandZRevRangeByLexWarning }
func (commandZRevRangeByLex) Cmd() []string          { return []string{"ZREVRANGEBYLEX"} }

var CommandZRevRangeByScore = new(commandZRevRangeByScore)

type commandZRevRangeByScore string

func (commandZRevRangeByScore) String() string         { return "ZREVRANGEBYSCORE" }
func (commandZRevRangeByScore) Class() string          { return "SortedSet" }
func (commandZRevRangeByScore) RequireVersion() string { return "2.2.0" }
func (commandZRevRangeByScore) Forbid() bool           { return false }
func (commandZRevRangeByScore) WarnVersion() string    { return "6.2.0" }
func (commandZRevRangeByScore) Warning() string        { return commandZRevRangeByScoreWarning }
func (commandZRevRangeByScore) Cmd() []string          { return []string{"ZREVRANGEBYSCORE"} }

var CommandZRevRank = new(commandZRevRank)

type commandZRevRank string

func (commandZRevRank) String() string         { return "ZREVRANK" }
func (commandZRevRank) Class() string          { return "SortedSet" }
func (commandZRevRank) RequireVersion() string { return "2.0.0" }
func (commandZRevRank) Forbid() bool           { return false }
func (commandZRevRank) WarnVersion() string    { return "" }
func (commandZRevRank) Warning() string        { return "" }
func (commandZRevRank) Cmd() []string          { return []string{"ZREVRANK"} }

var CommandZScan = new(commandZScan)

type commandZScan string

func (commandZScan) String() string         { return "ZSCAN" }
func (commandZScan) Class() string          { return "SortedSet" }
func (commandZScan) RequireVersion() string { return "2.8.0" }
func (commandZScan) Forbid() bool           { return false }
func (commandZScan) WarnVersion() string    { return "" }
func (commandZScan) Warning() string        { return "" }
func (commandZScan) Cmd() []string          { return []string{"ZSCAN"} }

var CommandZScore = new(commandZScore)

type commandZScore string

func (commandZScore) String() string         { return "ZSCORE" }
func (commandZScore) Class() string          { return "SortedSet" }
func (commandZScore) RequireVersion() string { return "1.2.0" }
func (commandZScore) Forbid() bool           { return false }
func (commandZScore) WarnVersion() string    { return "" }
func (commandZScore) Warning() string        { return "" }
func (commandZScore) Cmd() []string          { return []string{"ZSCORE"} }

var CommandZUnion = new(commandZUnion)

type commandZUnion string

func (commandZUnion) String() string         { return "ZUNION" }
func (commandZUnion) Class() string          { return "SortedSet" }
func (commandZUnion) RequireVersion() string { return "6.2.0" }
func (commandZUnion) Forbid() bool           { return false }
func (commandZUnion) WarnVersion() string    { return "" }
func (commandZUnion) Warning() string        { return "" }
func (commandZUnion) Cmd() []string          { return []string{"ZUNION"} }

var CommandZUnionStore = new(commandZUnionStore)

type commandZUnionStore string

func (commandZUnionStore) String() string         { return "ZUNIONSTORE" }
func (commandZUnionStore) Class() string          { return "SortedSet" }
func (commandZUnionStore) RequireVersion() string { return "2.0.0" }
func (commandZUnionStore) Forbid() bool           { return false }
func (commandZUnionStore) WarnVersion() string    { return "" }
func (commandZUnionStore) Warning() string        { return "" }
func (commandZUnionStore) Cmd() []string          { return []string{"ZUNIONSTORE"} }

var CommandXAck = new(commandXAck)

type commandXAck string

func (commandXAck) String() string         { return "XACK" }
func (commandXAck) Class() string          { return "Stream" }
func (commandXAck) RequireVersion() string { return "5.0.0" }
func (commandXAck) Forbid() bool           { return false }
func (commandXAck) WarnVersion() string    { return "" }
func (commandXAck) Warning() string        { return "" }
func (commandXAck) Cmd() []string          { return []string{"XACK"} }

var CommandXAdd = new(commandXAdd)

type commandXAdd string

func (commandXAdd) String() string         { return "XADD" }
func (commandXAdd) Class() string          { return "Stream" }
func (commandXAdd) RequireVersion() string { return "5.0.0" }
func (commandXAdd) Forbid() bool           { return false }
func (commandXAdd) WarnVersion() string    { return "" }
func (commandXAdd) Warning() string        { return "" }
func (commandXAdd) Cmd() []string          { return []string{"XADD"} }

var CommandXAddNoMkStream = new(commandXAddNoMkStream)

type commandXAddNoMkStream string

func (commandXAddNoMkStream) String() string         { return "XADD NOMKSTREAM" }
func (commandXAddNoMkStream) Class() string          { return "Stream" }
func (commandXAddNoMkStream) RequireVersion() string { return "6.2.0" }
func (commandXAddNoMkStream) Forbid() bool           { return false }
func (commandXAddNoMkStream) WarnVersion() string    { return "" }
func (commandXAddNoMkStream) Warning() string        { return "" }
func (commandXAddNoMkStream) Cmd() []string          { return []string{"XADD"} }

var CommandXAddMinId = new(commandXAddMinId)

type commandXAddMinId string

func (commandXAddMinId) String() string         { return "XADD MINID" }
func (commandXAddMinId) Class() string          { return "Stream" }
func (commandXAddMinId) RequireVersion() string { return "6.2.0" }
func (commandXAddMinId) Forbid() bool           { return false }
func (commandXAddMinId) WarnVersion() string    { return "" }
func (commandXAddMinId) Warning() string        { return "" }
func (commandXAddMinId) Cmd() []string          { return []string{"XADD"} }

var CommandXAddLimit = new(commandXAddLimit)

type commandXAddLimit string

func (commandXAddLimit) String() string         { return "XADD LIMIT" }
func (commandXAddLimit) Class() string          { return "Stream" }
func (commandXAddLimit) RequireVersion() string { return "6.2.0" }
func (commandXAddLimit) Forbid() bool           { return false }
func (commandXAddLimit) WarnVersion() string    { return "" }
func (commandXAddLimit) Warning() string        { return "" }
func (commandXAddLimit) Cmd() []string          { return []string{"XADD"} }

var CommandXAutoClaim = new(commandXAutoClaim)

type commandXAutoClaim string

func (commandXAutoClaim) String() string         { return "XAUTOCLAIM" }
func (commandXAutoClaim) Class() string          { return "Stream" }
func (commandXAutoClaim) RequireVersion() string { return "6.2.0" }
func (commandXAutoClaim) Forbid() bool           { return false }
func (commandXAutoClaim) WarnVersion() string    { return "" }
func (commandXAutoClaim) Warning() string        { return "" }
func (commandXAutoClaim) Cmd() []string          { return []string{"XAUTOCLAIM"} }

var CommandXClaim = new(commandXClaim)

type commandXClaim string

func (commandXClaim) String() string         { return "XCLAIM" }
func (commandXClaim) Class() string          { return "Stream" }
func (commandXClaim) RequireVersion() string { return "5.0.0" }
func (commandXClaim) Forbid() bool           { return false }
func (commandXClaim) WarnVersion() string    { return "" }
func (commandXClaim) Warning() string        { return "" }
func (commandXClaim) Cmd() []string          { return []string{"XCLAIM"} }

var CommandXDel = new(commandXDel)

type commandXDel string

func (commandXDel) String() string         { return "XDEL" }
func (commandXDel) Class() string          { return "Stream" }
func (commandXDel) RequireVersion() string { return "5.0.0" }
func (commandXDel) Forbid() bool           { return false }
func (commandXDel) WarnVersion() string    { return "" }
func (commandXDel) Warning() string        { return "" }
func (commandXDel) Cmd() []string          { return []string{"XDEL"} }

var CommandXGroupCreate = new(commandXGroupCreate)

type commandXGroupCreate string

func (commandXGroupCreate) String() string         { return "XGROUP CREATE" }
func (commandXGroupCreate) Class() string          { return "Stream" }
func (commandXGroupCreate) RequireVersion() string { return "5.0.0" }
func (commandXGroupCreate) Forbid() bool           { return false }
func (commandXGroupCreate) WarnVersion() string    { return "" }
func (commandXGroupCreate) Warning() string        { return "" }
func (commandXGroupCreate) Cmd() []string          { return []string{"XGROUP", "CREATE"} }

var CommandXGroupCreateConsumer = new(commandXGroupCreateConsumer)

type commandXGroupCreateConsumer string

func (commandXGroupCreateConsumer) String() string         { return "XGROUP CREATECONSUMER" }
func (commandXGroupCreateConsumer) Class() string          { return "Stream" }
func (commandXGroupCreateConsumer) RequireVersion() string { return "6.2.0" }
func (commandXGroupCreateConsumer) Forbid() bool           { return false }
func (commandXGroupCreateConsumer) WarnVersion() string    { return "" }
func (commandXGroupCreateConsumer) Warning() string        { return "" }
func (commandXGroupCreateConsumer) Cmd() []string          { return []string{"XGROUP", "CREATECONSUMER"} }

var CommandXGroupDelConsumer = new(commandXGroupDelConsumer)

type commandXGroupDelConsumer string

func (commandXGroupDelConsumer) String() string         { return "XGROUP DELCONSUMER" }
func (commandXGroupDelConsumer) Class() string          { return "Stream" }
func (commandXGroupDelConsumer) RequireVersion() string { return "5.0.0" }
func (commandXGroupDelConsumer) Forbid() bool           { return false }
func (commandXGroupDelConsumer) WarnVersion() string    { return "" }
func (commandXGroupDelConsumer) Warning() string        { return "" }
func (commandXGroupDelConsumer) Cmd() []string          { return []string{"XGROUP", "DELCONSUMER"} }

var CommandXGroupDestroy = new(commandXGroupDestroy)

type commandXGroupDestroy string

func (commandXGroupDestroy) String() string         { return "XGROUP DESTROY" }
func (commandXGroupDestroy) Class() string          { return "Stream" }
func (commandXGroupDestroy) RequireVersion() string { return "5.0.0" }
func (commandXGroupDestroy) Forbid() bool           { return false }
func (commandXGroupDestroy) WarnVersion() string    { return "" }
func (commandXGroupDestroy) Warning() string        { return "" }
func (commandXGroupDestroy) Cmd() []string          { return []string{"XGROUP", "DESTROY"} }

var CommandXGroupSetID = new(commandXGroupSetID)

type commandXGroupSetID string

func (commandXGroupSetID) String() string         { return "XGROUP SETID" }
func (commandXGroupSetID) Class() string          { return "Stream" }
func (commandXGroupSetID) RequireVersion() string { return "5.0.0" }
func (commandXGroupSetID) Forbid() bool           { return false }
func (commandXGroupSetID) WarnVersion() string    { return "" }
func (commandXGroupSetID) Warning() string        { return "" }
func (commandXGroupSetID) Cmd() []string          { return []string{"XGROUP", "SETID"} }

var CommandXInfoConsumers = new(commandXInfoConsumers)

type commandXInfoConsumers string

func (commandXInfoConsumers) String() string         { return "XINFO CONSUMERS" }
func (commandXInfoConsumers) Class() string          { return "Stream" }
func (commandXInfoConsumers) RequireVersion() string { return "5.0.0" }
func (commandXInfoConsumers) Forbid() bool           { return false }
func (commandXInfoConsumers) WarnVersion() string    { return "" }
func (commandXInfoConsumers) Warning() string        { return "" }
func (commandXInfoConsumers) Cmd() []string          { return []string{"XINFO", "CONSUMERS"} }

var CommandXInfoGroups = new(commandXInfoGroups)

type commandXInfoGroups string

func (commandXInfoGroups) String() string         { return "XINFO GROUPS" }
func (commandXInfoGroups) Class() string          { return "Stream" }
func (commandXInfoGroups) RequireVersion() string { return "5.0.0" }
func (commandXInfoGroups) Forbid() bool           { return false }
func (commandXInfoGroups) WarnVersion() string    { return "" }
func (commandXInfoGroups) Warning() string        { return "" }
func (commandXInfoGroups) Cmd() []string          { return []string{"XINFO", "GROUPS"} }

var CommandXInfoStream = new(commandXInfoStream)

type commandXInfoStream string

func (commandXInfoStream) String() string         { return "XINFO STREAM" }
func (commandXInfoStream) Class() string          { return "Stream" }
func (commandXInfoStream) RequireVersion() string { return "5.0.0" }
func (commandXInfoStream) Forbid() bool           { return false }
func (commandXInfoStream) WarnVersion() string    { return "" }
func (commandXInfoStream) Warning() string        { return "" }
func (commandXInfoStream) Cmd() []string          { return []string{"XINFO", "STREAM"} }

var CommandXInfoStreamFull = new(commandXInfoStreamFull)

type commandXInfoStreamFull string

func (commandXInfoStreamFull) String() string         { return "XINFO STREAM FULL" }
func (commandXInfoStreamFull) Class() string          { return "Stream" }
func (commandXInfoStreamFull) RequireVersion() string { return "6.0.0" }
func (commandXInfoStreamFull) Forbid() bool           { return false }
func (commandXInfoStreamFull) WarnVersion() string    { return "" }
func (commandXInfoStreamFull) Warning() string        { return "" }
func (commandXInfoStreamFull) Cmd() []string          { return []string{"STREAM"} }

var CommandXLen = new(commandXLen)

type commandXLen string

func (commandXLen) String() string         { return "XLEN" }
func (commandXLen) Class() string          { return "Stream" }
func (commandXLen) RequireVersion() string { return "5.0.0" }
func (commandXLen) Forbid() bool           { return false }
func (commandXLen) WarnVersion() string    { return "" }
func (commandXLen) Warning() string        { return "" }
func (commandXLen) Cmd() []string          { return []string{"XLEN"} }

var CommandXPending = new(commandXPending)

type commandXPending string

func (commandXPending) String() string         { return "XPENDING" }
func (commandXPending) Class() string          { return "Stream" }
func (commandXPending) RequireVersion() string { return "5.0.0" }
func (commandXPending) Forbid() bool           { return false }
func (commandXPending) WarnVersion() string    { return "" }
func (commandXPending) Warning() string        { return "" }
func (commandXPending) Cmd() []string          { return []string{"XPENDING"} }

var CommandXPendingIdle = new(commandXPendingIdle)

type commandXPendingIdle string

func (commandXPendingIdle) String() string         { return "XPENDING IDLE" }
func (commandXPendingIdle) Class() string          { return "Stream" }
func (commandXPendingIdle) RequireVersion() string { return "6.2.0" }
func (commandXPendingIdle) Forbid() bool           { return false }
func (commandXPendingIdle) WarnVersion() string    { return "" }
func (commandXPendingIdle) Warning() string        { return "" }
func (commandXPendingIdle) Cmd() []string          { return []string{"XPENDING"} }

var CommandXRange = new(commandXRange)

type commandXRange string

func (commandXRange) String() string         { return "XRANGE" }
func (commandXRange) Class() string          { return "Stream" }
func (commandXRange) RequireVersion() string { return "5.0.0" }
func (commandXRange) Forbid() bool           { return false }
func (commandXRange) WarnVersion() string    { return "" }
func (commandXRange) Warning() string        { return "" }
func (commandXRange) Cmd() []string          { return []string{"XRANGE"} }

var CommandXRead = new(commandXRead)

type commandXRead string

func (commandXRead) String() string         { return "XREAD" }
func (commandXRead) Class() string          { return "Stream" }
func (commandXRead) RequireVersion() string { return "5.0.0" }
func (commandXRead) Forbid() bool           { return false }
func (commandXRead) WarnVersion() string    { return "" }
func (commandXRead) Warning() string        { return "" }
func (commandXRead) Cmd() []string          { return []string{"XREAD"} }

var CommandXReadGroup = new(commandXReadGroup)

type commandXReadGroup string

func (commandXReadGroup) String() string         { return "XREADGROUP" }
func (commandXReadGroup) Class() string          { return "Stream" }
func (commandXReadGroup) RequireVersion() string { return "5.0.0" }
func (commandXReadGroup) Forbid() bool           { return false }
func (commandXReadGroup) WarnVersion() string    { return "" }
func (commandXReadGroup) Warning() string        { return "" }
func (commandXReadGroup) Cmd() []string          { return []string{"XREADGROUP"} }

var CommandXRevRange = new(commandXRevRange)

type commandXRevRange string

func (commandXRevRange) String() string         { return "XREVRANGE" }
func (commandXRevRange) Class() string          { return "Stream" }
func (commandXRevRange) RequireVersion() string { return "5.0.0" }
func (commandXRevRange) Forbid() bool           { return false }
func (commandXRevRange) WarnVersion() string    { return "" }
func (commandXRevRange) Warning() string        { return "" }
func (commandXRevRange) Cmd() []string          { return []string{"XREVRANGE"} }

var CommandXTrim = new(commandXTrim)

type commandXTrim string

func (commandXTrim) String() string         { return "XTRIM" }
func (commandXTrim) Class() string          { return "Stream" }
func (commandXTrim) RequireVersion() string { return "5.0.0" }
func (commandXTrim) Forbid() bool           { return false }
func (commandXTrim) WarnVersion() string    { return "" }
func (commandXTrim) Warning() string        { return "" }
func (commandXTrim) Cmd() []string          { return []string{"XTRIM"} }

var CommandXTrimMinId = new(commandXTrimMinId)

type commandXTrimMinId string

func (commandXTrimMinId) String() string         { return "XTRIM MINID" }
func (commandXTrimMinId) Class() string          { return "Stream" }
func (commandXTrimMinId) RequireVersion() string { return "6.2.0" }
func (commandXTrimMinId) Forbid() bool           { return false }
func (commandXTrimMinId) WarnVersion() string    { return "" }
func (commandXTrimMinId) Warning() string        { return "" }
func (commandXTrimMinId) Cmd() []string          { return []string{"XTRIM"} }

var CommandXTrimLimit = new(commandXTrimLimit)

type commandXTrimLimit string

func (commandXTrimLimit) String() string         { return "XTRIM LIMIT" }
func (commandXTrimLimit) Class() string          { return "Stream" }
func (commandXTrimLimit) RequireVersion() string { return "6.2.0" }
func (commandXTrimLimit) Forbid() bool           { return false }
func (commandXTrimLimit) WarnVersion() string    { return "" }
func (commandXTrimLimit) Warning() string        { return "" }
func (commandXTrimLimit) Cmd() []string          { return []string{"XTRIM"} }

var CommandAppend = new(commandAppend)

type commandAppend string

func (commandAppend) String() string         { return "APPEND" }
func (commandAppend) Class() string          { return "String" }
func (commandAppend) RequireVersion() string { return "2.0.0" }
func (commandAppend) Forbid() bool           { return false }
func (commandAppend) WarnVersion() string    { return "" }
func (commandAppend) Warning() string        { return "" }
func (commandAppend) Cmd() []string          { return []string{"APPEND"} }

var CommandDecr = new(commandDecr)

type commandDecr string

func (commandDecr) String() string         { return "DECR" }
func (commandDecr) Class() string          { return "String" }
func (commandDecr) RequireVersion() string { return "1.0.0" }
func (commandDecr) Forbid() bool           { return false }
func (commandDecr) WarnVersion() string    { return "" }
func (commandDecr) Warning() string        { return "" }
func (commandDecr) Cmd() []string          { return []string{"DECR"} }

var CommandDecrBy = new(commandDecrBy)

type commandDecrBy string

func (commandDecrBy) String() string         { return "DECRBY" }
func (commandDecrBy) Class() string          { return "String" }
func (commandDecrBy) RequireVersion() string { return "1.0.0" }
func (commandDecrBy) Forbid() bool           { return false }
func (commandDecrBy) WarnVersion() string    { return "" }
func (commandDecrBy) Warning() string        { return "" }
func (commandDecrBy) Cmd() []string          { return []string{"DECRBY"} }

var CommandGet = new(commandGet)

type commandGet string

func (commandGet) String() string         { return "GET" }
func (commandGet) Class() string          { return "String" }
func (commandGet) RequireVersion() string { return "1.0.0" }
func (commandGet) Forbid() bool           { return false }
func (commandGet) WarnVersion() string    { return "" }
func (commandGet) Warning() string        { return "" }
func (commandGet) Cmd() []string          { return []string{"GET"} }

var CommandGetDel = new(commandGetDel)

type commandGetDel string

func (commandGetDel) String() string         { return "GETDEL" }
func (commandGetDel) Class() string          { return "String" }
func (commandGetDel) RequireVersion() string { return "6.2.0" }
func (commandGetDel) Forbid() bool           { return false }
func (commandGetDel) WarnVersion() string    { return "" }
func (commandGetDel) Warning() string        { return "" }
func (commandGetDel) Cmd() []string          { return []string{"GETDEL"} }

var CommandGetEX = new(commandGetEX)

type commandGetEX string

func (commandGetEX) String() string         { return "GETEX" }
func (commandGetEX) Class() string          { return "String" }
func (commandGetEX) RequireVersion() string { return "6.2.0" }
func (commandGetEX) Forbid() bool           { return false }
func (commandGetEX) WarnVersion() string    { return "" }
func (commandGetEX) Warning() string        { return "" }
func (commandGetEX) Cmd() []string          { return []string{"GETEX"} }

var CommandGetRange = new(commandGetRange)

type commandGetRange string

func (commandGetRange) String() string         { return "GETRANGE" }
func (commandGetRange) Class() string          { return "String" }
func (commandGetRange) RequireVersion() string { return "2.4.0" }
func (commandGetRange) Forbid() bool           { return false }
func (commandGetRange) WarnVersion() string    { return "" }
func (commandGetRange) Warning() string        { return "" }
func (commandGetRange) Cmd() []string          { return []string{"GETRANGE"} }

var CommandGetSet = new(commandGetSet)

type commandGetSet string

func (commandGetSet) String() string         { return "GETSET" }
func (commandGetSet) Class() string          { return "String" }
func (commandGetSet) RequireVersion() string { return "1.0.0" }
func (commandGetSet) Forbid() bool           { return false }
func (commandGetSet) WarnVersion() string    { return "6.2.0" }
func (commandGetSet) Warning() string        { return commandGetSetWarning }
func (commandGetSet) Cmd() []string          { return []string{"GETSET"} }

var CommandIncr = new(commandIncr)

type commandIncr string

func (commandIncr) String() string         { return "INCR" }
func (commandIncr) Class() string          { return "String" }
func (commandIncr) RequireVersion() string { return "1.0.0" }
func (commandIncr) Forbid() bool           { return false }
func (commandIncr) WarnVersion() string    { return "" }
func (commandIncr) Warning() string        { return "" }
func (commandIncr) Cmd() []string          { return []string{"INCR"} }

var CommandIncrBy = new(commandIncrBy)

type commandIncrBy string

func (commandIncrBy) String() string         { return "INCRBY" }
func (commandIncrBy) Class() string          { return "String" }
func (commandIncrBy) RequireVersion() string { return "1.0.0" }
func (commandIncrBy) Forbid() bool           { return false }
func (commandIncrBy) WarnVersion() string    { return "" }
func (commandIncrBy) Warning() string        { return "" }
func (commandIncrBy) Cmd() []string          { return []string{"INCRBY"} }

var CommandIncrByFloat = new(commandIncrByFloat)

type commandIncrByFloat string

func (commandIncrByFloat) String() string         { return "INCRBYFLOAT" }
func (commandIncrByFloat) Class() string          { return "String" }
func (commandIncrByFloat) RequireVersion() string { return "2.6.0" }
func (commandIncrByFloat) Forbid() bool           { return false }
func (commandIncrByFloat) WarnVersion() string    { return "" }
func (commandIncrByFloat) Warning() string        { return "" }
func (commandIncrByFloat) Cmd() []string          { return []string{"INCRBYFLOAT"} }

var CommandMGet = new(commandMGet)

type commandMGet string

func (commandMGet) String() string         { return "MGET" }
func (commandMGet) Class() string          { return "String" }
func (commandMGet) RequireVersion() string { return "1.0.0" }
func (commandMGet) Forbid() bool           { return false }
func (commandMGet) WarnVersion() string    { return "" }
func (commandMGet) Warning() string        { return "" }
func (commandMGet) Cmd() []string          { return []string{"MGET"} }

var CommandMSet = new(commandMSet)

type commandMSet string

func (commandMSet) String() string         { return "MSET" }
func (commandMSet) Class() string          { return "String" }
func (commandMSet) RequireVersion() string { return "1.0.1" }
func (commandMSet) Forbid() bool           { return false }
func (commandMSet) WarnVersion() string    { return "" }
func (commandMSet) Warning() string        { return "" }
func (commandMSet) Cmd() []string          { return []string{"MSET"} }

var CommandMSetNX = new(commandMSetNX)

type commandMSetNX string

func (commandMSetNX) String() string         { return "MSETNX" }
func (commandMSetNX) Class() string          { return "String" }
func (commandMSetNX) RequireVersion() string { return "1.0.1" }
func (commandMSetNX) Forbid() bool           { return false }
func (commandMSetNX) WarnVersion() string    { return "" }
func (commandMSetNX) Warning() string        { return "" }
func (commandMSetNX) Cmd() []string          { return []string{"MSETNX"} }

var CommandSet = new(commandSet)

type commandSet string

func (commandSet) String() string         { return "SET" }
func (commandSet) Class() string          { return "String" }
func (commandSet) RequireVersion() string { return "1.0.0" }
func (commandSet) Forbid() bool           { return false }
func (commandSet) WarnVersion() string    { return "" }
func (commandSet) Warning() string        { return "" }
func (commandSet) Cmd() []string          { return []string{"SET"} }

var CommandSetKeepTTL = new(commandSetKeepTTL)

type commandSetKeepTTL string

func (commandSetKeepTTL) String() string         { return "SET KEEPTTL" }
func (commandSetKeepTTL) Class() string          { return "String" }
func (commandSetKeepTTL) RequireVersion() string { return "6.0.0" }
func (commandSetKeepTTL) Forbid() bool           { return false }
func (commandSetKeepTTL) WarnVersion() string    { return "" }
func (commandSetKeepTTL) Warning() string        { return "" }
func (commandSetKeepTTL) Cmd() []string          { return []string{"SET"} }

var CommandSetex = new(commandSetex)

type commandSetex string

func (commandSetex) String() string         { return "SETEX" }
func (commandSetex) Class() string          { return "String" }
func (commandSetex) RequireVersion() string { return "2.0.0" }
func (commandSetex) Forbid() bool           { return false }
func (commandSetex) WarnVersion() string    { return "" }
func (commandSetex) Warning() string        { return "" }
func (commandSetex) Cmd() []string          { return []string{"SETEX"} }

var CommandSetnx = new(commandSetnx)

type commandSetnx string

func (commandSetnx) String() string         { return "SETNX" }
func (commandSetnx) Class() string          { return "String" }
func (commandSetnx) RequireVersion() string { return "1.0.0" }
func (commandSetnx) Forbid() bool           { return false }
func (commandSetnx) WarnVersion() string    { return "" }
func (commandSetnx) Warning() string        { return "" }
func (commandSetnx) Cmd() []string          { return []string{"SETNX"} }

var CommandSetEX = new(commandSetEX)

type commandSetEX string

func (commandSetEX) String() string         { return "SET EX" }
func (commandSetEX) Class() string          { return "String" }
func (commandSetEX) RequireVersion() string { return "2.6.12" }
func (commandSetEX) Forbid() bool           { return false }
func (commandSetEX) WarnVersion() string    { return "" }
func (commandSetEX) Warning() string        { return "" }
func (commandSetEX) Cmd() []string          { return []string{"SET"} }

var CommandSetNX = new(commandSetNX)

type commandSetNX string

func (commandSetNX) String() string         { return "SET NX" }
func (commandSetNX) Class() string          { return "String" }
func (commandSetNX) RequireVersion() string { return "2.6.12" }
func (commandSetNX) Forbid() bool           { return false }
func (commandSetNX) WarnVersion() string    { return "" }
func (commandSetNX) Warning() string        { return "" }
func (commandSetNX) Cmd() []string          { return []string{"SET"} }

var CommandSetXX = new(commandSetXX)

type commandSetXX string

func (commandSetXX) String() string         { return "SET XX" }
func (commandSetXX) Class() string          { return "String" }
func (commandSetXX) RequireVersion() string { return "2.6.12" }
func (commandSetXX) Forbid() bool           { return false }
func (commandSetXX) WarnVersion() string    { return "" }
func (commandSetXX) Warning() string        { return "" }
func (commandSetXX) Cmd() []string          { return []string{"SET"} }

var CommandSetGet = new(commandSetGet)

type commandSetGet string

func (commandSetGet) String() string         { return "SET GET" }
func (commandSetGet) Class() string          { return "String" }
func (commandSetGet) RequireVersion() string { return "6.2.0" }
func (commandSetGet) Forbid() bool           { return false }
func (commandSetGet) WarnVersion() string    { return "" }
func (commandSetGet) Warning() string        { return "" }
func (commandSetGet) Cmd() []string          { return []string{"SET"} }

var CommandSetEXAT = new(commandSetEXAT)

type commandSetEXAT string

func (commandSetEXAT) String() string         { return "SET EXAT" }
func (commandSetEXAT) Class() string          { return "String" }
func (commandSetEXAT) RequireVersion() string { return "6.2.0" }
func (commandSetEXAT) Forbid() bool           { return false }
func (commandSetEXAT) WarnVersion() string    { return "" }
func (commandSetEXAT) Warning() string        { return "" }
func (commandSetEXAT) Cmd() []string          { return []string{"SET"} }

var CommandSetRange = new(commandSetRange)

type commandSetRange string

func (commandSetRange) String() string         { return "SETRANGE" }
func (commandSetRange) Class() string          { return "String" }
func (commandSetRange) RequireVersion() string { return "2.2.0" }
func (commandSetRange) Forbid() bool           { return false }
func (commandSetRange) WarnVersion() string    { return "" }
func (commandSetRange) Warning() string        { return "" }
func (commandSetRange) Cmd() []string          { return []string{"SETRANGE"} }

var CommandStrLen = new(commandStrLen)

type commandStrLen string

func (commandStrLen) String() string         { return "STRLEN" }
func (commandStrLen) Class() string          { return "String" }
func (commandStrLen) RequireVersion() string { return "2.2.0" }
func (commandStrLen) Forbid() bool           { return false }
func (commandStrLen) WarnVersion() string    { return "" }
func (commandStrLen) Warning() string        { return "" }
func (commandStrLen) Cmd() []string          { return []string{"STRLEN"} }

var CommandPublish = new(commandPublish)

type commandPublish string

func (commandPublish) String() string         { return "PUBLISH" }
func (commandPublish) Class() string          { return "PubSub" }
func (commandPublish) RequireVersion() string { return "2.0.0" }
func (commandPublish) Forbid() bool           { return false }
func (commandPublish) WarnVersion() string    { return "" }
func (commandPublish) Warning() string        { return "" }
func (commandPublish) Cmd() []string          { return []string{"PUBLISH"} }

var CommandPubSubChannels = new(commandPubSubChannels)

type commandPubSubChannels string

func (commandPubSubChannels) String() string         { return "PUBSUB CHANNELS" }
func (commandPubSubChannels) Class() string          { return "PubSub" }
func (commandPubSubChannels) RequireVersion() string { return "2.8.0" }
func (commandPubSubChannels) Forbid() bool           { return false }
func (commandPubSubChannels) WarnVersion() string    { return "" }
func (commandPubSubChannels) Warning() string        { return "" }
func (commandPubSubChannels) Cmd() []string          { return []string{"PUBSUB", "CHANNELS"} }

var CommandPubSubNumPat = new(commandPubSubNumPat)

type commandPubSubNumPat string

func (commandPubSubNumPat) String() string         { return "PUBSUB NUMPAT" }
func (commandPubSubNumPat) Class() string          { return "PubSub" }
func (commandPubSubNumPat) RequireVersion() string { return "2.8.0" }
func (commandPubSubNumPat) Forbid() bool           { return false }
func (commandPubSubNumPat) WarnVersion() string    { return "" }
func (commandPubSubNumPat) Warning() string        { return "" }
func (commandPubSubNumPat) Cmd() []string          { return []string{"PUBSUB", "NUMPAT"} }

var CommandPubSubNumSub = new(commandPubSubNumSub)

type commandPubSubNumSub string

func (commandPubSubNumSub) String() string         { return "PUBSUB NUMSUB" }
func (commandPubSubNumSub) Class() string          { return "PubSub" }
func (commandPubSubNumSub) RequireVersion() string { return "2.8.0" }
func (commandPubSubNumSub) Forbid() bool           { return false }
func (commandPubSubNumSub) WarnVersion() string    { return "" }
func (commandPubSubNumSub) Warning() string        { return "" }
func (commandPubSubNumSub) Cmd() []string          { return []string{"PUBSUB", "NUMSUB"} }

var CommandSubscribe = new(commandSubscribe)

type commandSubscribe string

func (commandSubscribe) String() string         { return "SUBSCRIBE" }
func (commandSubscribe) Class() string          { return "PubSub" }
func (commandSubscribe) RequireVersion() string { return "2.0.0" }
func (commandSubscribe) Forbid() bool           { return false }
func (commandSubscribe) WarnVersion() string    { return "" }
func (commandSubscribe) Warning() string        { return "" }
func (commandSubscribe) Cmd() []string          { return []string{"SUBSCRIBE"} }

var CommandPSubscribe = new(commandPSubscribe)

type commandPSubscribe string

func (commandPSubscribe) String() string         { return "PSUBSCRIBE" }
func (commandPSubscribe) Class() string          { return "PubSub" }
func (commandPSubscribe) RequireVersion() string { return "2.0.0" }
func (commandPSubscribe) Forbid() bool           { return false }
func (commandPSubscribe) WarnVersion() string    { return "" }
func (commandPSubscribe) Warning() string        { return "" }
func (commandPSubscribe) Cmd() []string          { return []string{"PSUBSCRIBE"} }

var CommandUnsubscribe = new(commandUnsubscribe)

type commandUnsubscribe string

func (commandUnsubscribe) String() string         { return "UNSUBSCRIBE" }
func (commandUnsubscribe) Class() string          { return "PubSub" }
func (commandUnsubscribe) RequireVersion() string { return "2.0.0" }
func (commandUnsubscribe) Forbid() bool           { return false }
func (commandUnsubscribe) WarnVersion() string    { return "" }
func (commandUnsubscribe) Warning() string        { return "" }
func (commandUnsubscribe) Cmd() []string          { return []string{"UNSUBSCRIBE"} }

var CommandPUnsubscribe = new(commandPUnsubscribe)

type commandPUnsubscribe string

func (commandPUnsubscribe) String() string         { return "PUNSUBSCRIBE" }
func (commandPUnsubscribe) Class() string          { return "PubSub" }
func (commandPUnsubscribe) RequireVersion() string { return "2.0.0" }
func (commandPUnsubscribe) Forbid() bool           { return false }
func (commandPUnsubscribe) WarnVersion() string    { return "" }
func (commandPUnsubscribe) Warning() string        { return "" }
func (commandPUnsubscribe) Cmd() []string          { return []string{"PUNSUBSCRIBE"} }
